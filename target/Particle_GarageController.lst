
/Users/Tim/github/Particle_GarageController/target/Particle_GarageController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006818  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a6830  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         000000d4  20000300  080a6834  00030300  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000006f8  200003d4  200003d4  000403d4  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a6908  080a6908  00036908  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a6930  080a6930  00036930  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000bad7e  00000000  00000000  00036934  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000109cc  00000000  00000000  000f16b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00014668  00000000  00000000  0010207e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001ff0  00000000  00000000  001166e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003588  00000000  00000000  001186d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000250af  00000000  00000000  0011bc5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00023d00  00000000  00000000  00140d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a8313  00000000  00000000  00164a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c1a0  00000000  00000000  0020cd20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	40 60 0a 08                                         @`..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f005 fbe9 	bl	80a5804 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f005 fbee 	bl	80a581a <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a6834 	.word	0x080a6834
 80a004c:	200003d4 	.word	0x200003d4
 80a0050:	200003d4 	.word	0x200003d4
 80a0054:	20000acc 	.word	0x20000acc
 80a0058:	20000acc 	.word	0x20000acc

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fc77 	bl	80a2950 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a67f4 	.word	0x080a67f4
 80a0084:	080a682c 	.word	0x080a682c

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bb9c 	b.w	80a07c4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fb7d 	bl	80a078c <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 bc1d 	b.w	80a28d4 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f001 baa1 	b.w	80a15e0 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f001 baa7 	b.w	80a15f0 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
 80a00b2:	6810      	ldr	r0, [r2, #0]
 80a00b4:	4770      	bx	lr

080a00b6 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80a00b6:	6803      	ldr	r3, [r0, #0]
 80a00b8:	4718      	bx	r3

080a00ba <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a00ba:	2a01      	cmp	r2, #1
 80a00bc:	d002      	beq.n	80a00c4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 80a00be:	2a02      	cmp	r2, #2
 80a00c0:	d002      	beq.n	80a00c8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 80a00c2:	e004      	b.n	80a00ce <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a00c4:	6001      	str	r1, [r0, #0]
	      break;
 80a00c6:	e002      	b.n	80a00ce <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a00c8:	680b      	ldr	r3, [r1, #0]
 80a00ca:	b100      	cbz	r0, 80a00ce <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 80a00cc:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a00ce:	2000      	movs	r0, #0
 80a00d0:	4770      	bx	lr
	...

080a00d4 <_Z11dht_wrapperv>:
  * Output         : None
  *******************************************************************************/
void dht_wrapper()
{

  DHT.isrCallback();
 80a00d4:	4801      	ldr	r0, [pc, #4]	; (80a00dc <_Z11dht_wrapperv+0x8>)
 80a00d6:	f000 be3b 	b.w	80a0d50 <_ZN14PietteTech_DHT11isrCallbackEv>
 80a00da:	bf00      	nop
 80a00dc:	20000438 	.word	0x20000438

080a00e0 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
 80a00e0:	6943      	ldr	r3, [r0, #20]
 80a00e2:	b113      	cbz	r3, 80a00ea <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a00e4:	6983      	ldr	r3, [r0, #24]
 80a00e6:	300c      	adds	r0, #12
 80a00e8:	4718      	bx	r3
 80a00ea:	4770      	bx	lr

080a00ec <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 80a00ec:	b513      	push	{r0, r1, r4, lr}
 80a00ee:	4604      	mov	r4, r0
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
 80a00f0:	2100      	movs	r1, #0
 80a00f2:	4608      	mov	r0, r1
 80a00f4:	f001 f826 	bl	80a1144 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 80a00f8:	a902      	add	r1, sp, #8
 80a00fa:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
 80a00fc:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 80a00fe:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
 80a0102:	f001 f837 	bl	80a1174 <os_timer_get_id>
            t = static_cast<Timer*>(id);
 80a0106:	9c01      	ldr	r4, [sp, #4]
            if (t) {
 80a0108:	b10c      	cbz	r4, 80a010e <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
 80a010a:	2301      	movs	r3, #1
 80a010c:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
 80a010e:	2100      	movs	r1, #0
 80a0110:	2001      	movs	r0, #1
 80a0112:	f001 f817 	bl	80a1144 <os_thread_scheduling>
            }
        }
        if (t) {
 80a0116:	b12c      	cbz	r4, 80a0124 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
 80a0118:	6823      	ldr	r3, [r4, #0]
 80a011a:	4620      	mov	r0, r4
 80a011c:	689b      	ldr	r3, [r3, #8]
 80a011e:	4798      	blx	r3
            t->running = false;
 80a0120:	2300      	movs	r3, #0
 80a0122:	7123      	strb	r3, [r4, #4]
        }
    }
 80a0124:	b002      	add	sp, #8
 80a0126:	bd10      	pop	{r4, pc}

080a0128 <_Z13triggerGarage6String>:
 * Description    : Trigger for opening / closing the garage door
 * Input          : open / close
 * Output         : 1 = opening, 0 = closing, -1 = invalid command
 *******************************************************************************/
int triggerGarage(String command)
{
 80a0128:	b538      	push	{r3, r4, r5, lr}

  if (garageDoorState > 2 && command == "open")
 80a012a:	4b1d      	ldr	r3, [pc, #116]	; (80a01a0 <_Z13triggerGarage6String+0x78>)
 * Description    : Trigger for opening / closing the garage door
 * Input          : open / close
 * Output         : 1 = opening, 0 = closing, -1 = invalid command
 *******************************************************************************/
int triggerGarage(String command)
{
 80a012c:	4605      	mov	r5, r0

  if (garageDoorState > 2 && command == "open")
 80a012e:	681a      	ldr	r2, [r3, #0]
 80a0130:	461c      	mov	r4, r3
 80a0132:	2a02      	cmp	r2, #2
 80a0134:	dd03      	ble.n	80a013e <_Z13triggerGarage6String+0x16>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a0136:	491b      	ldr	r1, [pc, #108]	; (80a01a4 <_Z13triggerGarage6String+0x7c>)
 80a0138:	f002 f966 	bl	80a2408 <_ZNK6String6equalsEPKc>
 80a013c:	b9d0      	cbnz	r0, 80a0174 <_Z13triggerGarage6String+0x4c>
    delay(500);
    digitalWrite(garageTrigger, LOW);

    return 1;
  }
  else if (garageDoorState < 2 && command == "close")
 80a013e:	6823      	ldr	r3, [r4, #0]
 80a0140:	2b01      	cmp	r3, #1
 80a0142:	dc2a      	bgt.n	80a019a <_Z13triggerGarage6String+0x72>
 80a0144:	4918      	ldr	r1, [pc, #96]	; (80a01a8 <_Z13triggerGarage6String+0x80>)
 80a0146:	4628      	mov	r0, r5
 80a0148:	f002 f95e 	bl	80a2408 <_ZNK6String6equalsEPKc>
 80a014c:	b328      	cbz	r0, 80a019a <_Z13triggerGarage6String+0x72>
  {

    Serial.println("Closing garage door ...");
 80a014e:	f002 facd 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a0152:	4916      	ldr	r1, [pc, #88]	; (80a01ac <_Z13triggerGarage6String+0x84>)
 80a0154:	f001 ff51 	bl	80a1ffa <_ZN5Print7printlnEPKc>

    digitalWrite(garageTrigger, HIGH);
 80a0158:	2101      	movs	r1, #1
 80a015a:	200a      	movs	r0, #10
 80a015c:	f002 fc59 	bl	80a2a12 <digitalWrite>
    delay(500);
 80a0160:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0164:	f001 fa84 	bl	80a1670 <delay>
    digitalWrite(garageTrigger, LOW);
 80a0168:	2100      	movs	r1, #0
 80a016a:	200a      	movs	r0, #10
 80a016c:	f002 fc51 	bl	80a2a12 <digitalWrite>

    return 0;
 80a0170:	2000      	movs	r0, #0
 80a0172:	bd38      	pop	{r3, r4, r5, pc}
{

  if (garageDoorState > 2 && command == "open")
  {

    Serial.println("Opening garage door ...");
 80a0174:	f002 faba 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a0178:	490d      	ldr	r1, [pc, #52]	; (80a01b0 <_Z13triggerGarage6String+0x88>)
 80a017a:	f001 ff3e 	bl	80a1ffa <_ZN5Print7printlnEPKc>

    digitalWrite(garageTrigger, HIGH);
 80a017e:	2101      	movs	r1, #1
 80a0180:	200a      	movs	r0, #10
 80a0182:	f002 fc46 	bl	80a2a12 <digitalWrite>
    delay(500);
 80a0186:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a018a:	f001 fa71 	bl	80a1670 <delay>
    digitalWrite(garageTrigger, LOW);
 80a018e:	2100      	movs	r1, #0
 80a0190:	200a      	movs	r0, #10
 80a0192:	f002 fc3e 	bl	80a2a12 <digitalWrite>
 80a0196:	2001      	movs	r0, #1
 80a0198:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
  }
  else
  {

    return -1;
 80a019a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
}
 80a019e:	bd38      	pop	{r3, r4, r5, pc}
 80a01a0:	20000314 	.word	0x20000314
 80a01a4:	080a60c6 	.word	0x080a60c6
 80a01a8:	080a6068 	.word	0x080a6068
 80a01ac:	080a6086 	.word	0x080a6086
 80a01b0:	080a606e 	.word	0x080a606e

080a01b4 <_Z13automaticMode6String>:
 * Description    : Setting mode for automatic opening / closing the garage door
 * Input          : on / off / status
 * Output         : 1 = activated, 0 = deactivated, -1 = invalid command
 *******************************************************************************/
int automaticMode(String command)
{
 80a01b4:	b538      	push	{r3, r4, r5, lr}
 80a01b6:	490f      	ldr	r1, [pc, #60]	; (80a01f4 <_Z13automaticMode6String+0x40>)
 80a01b8:	4605      	mov	r5, r0
 80a01ba:	f002 f925 	bl	80a2408 <_ZNK6String6equalsEPKc>

  if (command == "on")
 80a01be:	4604      	mov	r4, r0
 80a01c0:	b118      	cbz	r0, 80a01ca <_Z13automaticMode6String+0x16>
  {

    bAutomaticDoorOperation = true;
 80a01c2:	4b0d      	ldr	r3, [pc, #52]	; (80a01f8 <_Z13automaticMode6String+0x44>)
 80a01c4:	2001      	movs	r0, #1
 80a01c6:	7018      	strb	r0, [r3, #0]
    return 1;
 80a01c8:	bd38      	pop	{r3, r4, r5, pc}
 80a01ca:	490c      	ldr	r1, [pc, #48]	; (80a01fc <_Z13automaticMode6String+0x48>)
 80a01cc:	4628      	mov	r0, r5
 80a01ce:	f002 f91b 	bl	80a2408 <_ZNK6String6equalsEPKc>
  }
  else if (command == "off")
 80a01d2:	b118      	cbz	r0, 80a01dc <_Z13automaticMode6String+0x28>
  {

    bAutomaticDoorOperation = false;
 80a01d4:	4b08      	ldr	r3, [pc, #32]	; (80a01f8 <_Z13automaticMode6String+0x44>)
    return 0;
 80a01d6:	4620      	mov	r0, r4
    return 1;
  }
  else if (command == "off")
  {

    bAutomaticDoorOperation = false;
 80a01d8:	701c      	strb	r4, [r3, #0]
    return 0;
 80a01da:	bd38      	pop	{r3, r4, r5, pc}
 80a01dc:	4908      	ldr	r1, [pc, #32]	; (80a0200 <_Z13automaticMode6String+0x4c>)
 80a01de:	4628      	mov	r0, r5
 80a01e0:	f002 f912 	bl	80a2408 <_ZNK6String6equalsEPKc>
  }
  else if (command == "status")
 80a01e4:	b110      	cbz	r0, 80a01ec <_Z13automaticMode6String+0x38>
  {

    if (bAutomaticDoorOperation)
 80a01e6:	4b04      	ldr	r3, [pc, #16]	; (80a01f8 <_Z13automaticMode6String+0x44>)

  if (command == "on")
  {

    bAutomaticDoorOperation = true;
    return 1;
 80a01e8:	7818      	ldrb	r0, [r3, #0]
 80a01ea:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
  else
  {

    return -1;
 80a01ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
}
 80a01f0:	bd38      	pop	{r3, r4, r5, pc}
 80a01f2:	bf00      	nop
 80a01f4:	080a62d0 	.word	0x080a62d0
 80a01f8:	20000494 	.word	0x20000494
 80a01fc:	080a609e 	.word	0x080a609e
 80a0200:	080a60a2 	.word	0x080a60a2

080a0204 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.6.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a0204:	b510      	push	{r4, lr}
 80a0206:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a0208:	6803      	ldr	r3, [r0, #0]
 80a020a:	689b      	ldr	r3, [r3, #8]
 80a020c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a020e:	68a3      	ldr	r3, [r4, #8]
 80a0210:	3b01      	subs	r3, #1
 80a0212:	60a3      	str	r3, [r4, #8]
 80a0214:	b92b      	cbnz	r3, 80a0222 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.6.constprop.31+0x1e>
            _M_destroy();
 80a0216:	6823      	ldr	r3, [r4, #0]
 80a0218:	4620      	mov	r0, r4
        }
    }
 80a021a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a021e:	68db      	ldr	r3, [r3, #12]
 80a0220:	4718      	bx	r3
 80a0222:	bd10      	pop	{r4, pc}

080a0224 <_Z22garageDoorNotificationv>:
 * Description    : Notifies user about a left open garage door (see threshold)
 * Input          : None
 * Output         : None
 *******************************************************************************/
void garageDoorNotification()
{
 80a0224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a0226:	4b0a      	ldr	r3, [pc, #40]	; (80a0250 <_Z22garageDoorNotificationv+0x2c>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0228:	a802      	add	r0, sp, #8
 80a022a:	781b      	ldrb	r3, [r3, #0]
 80a022c:	4a09      	ldr	r2, [pc, #36]	; (80a0254 <_Z22garageDoorNotificationv+0x30>)
 80a022e:	f88d 3000 	strb.w	r3, [sp]
 80a0232:	4909      	ldr	r1, [pc, #36]	; (80a0258 <_Z22garageDoorNotificationv+0x34>)
 80a0234:	233c      	movs	r3, #60	; 0x3c
 80a0236:	f001 fbb1 	bl	80a199c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a023a:	9803      	ldr	r0, [sp, #12]
 80a023c:	b128      	cbz	r0, 80a024a <_Z22garageDoorNotificationv+0x26>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a023e:	6843      	ldr	r3, [r0, #4]
 80a0240:	3b01      	subs	r3, #1
 80a0242:	6043      	str	r3, [r0, #4]
 80a0244:	b90b      	cbnz	r3, 80a024a <_Z22garageDoorNotificationv+0x26>
 80a0246:	f7ff ffdd 	bl	80a0204 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.6.constprop.31>

  Particle.publish("GarageDoor", "Alert");
}
 80a024a:	b005      	add	sp, #20
 80a024c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0250:	200003d8 	.word	0x200003d8
 80a0254:	080a60a9 	.word	0x080a60a9
 80a0258:	080a60af 	.word	0x080a60af

080a025c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a025c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a025e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0260:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0262:	b113      	cbz	r3, 80a026a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0264:	2203      	movs	r2, #3
 80a0266:	4601      	mov	r1, r0
 80a0268:	4798      	blx	r3
    }
 80a026a:	4620      	mov	r0, r4
 80a026c:	bd10      	pop	{r4, pc}

080a026e <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
 80a026e:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 80a0270:	6880      	ldr	r0, [r0, #8]
 80a0272:	2300      	movs	r3, #0
 80a0274:	b138      	cbz	r0, 80a0286 <_ZN5Timer5_stopEjb+0x18>
 80a0276:	e88d 000a 	stmia.w	sp, {r1, r3}
 80a027a:	2102      	movs	r1, #2
 80a027c:	f000 ff82 	bl	80a1184 <os_timer_change>
 80a0280:	fab0 f080 	clz	r0, r0
 80a0284:	0940      	lsrs	r0, r0, #5
    }
 80a0286:	b003      	add	sp, #12
 80a0288:	f85d fb04 	ldr.w	pc, [sp], #4

080a028c <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80a028c:	b538      	push	{r3, r4, r5, lr}
 80a028e:	4b10      	ldr	r3, [pc, #64]	; (80a02d0 <_ZN5TimerD1Ev+0x44>)
 80a0290:	4604      	mov	r4, r0
 80a0292:	6003      	str	r3, [r0, #0]
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle) {
 80a0294:	6883      	ldr	r3, [r0, #8]
 80a0296:	b1a3      	cbz	r3, 80a02c2 <_ZN5TimerD1Ev+0x36>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80a0298:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80a029c:	2200      	movs	r2, #0
 80a029e:	f7ff ffe6 	bl	80a026e <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
 80a02a2:	2100      	movs	r1, #0
 80a02a4:	68a0      	ldr	r0, [r4, #8]
 80a02a6:	f000 ff7d 	bl	80a11a4 <os_timer_set_id>
            while (running) {
 80a02aa:	7923      	ldrb	r3, [r4, #4]
 80a02ac:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80a02b0:	b113      	cbz	r3, 80a02b8 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
 80a02b2:	f000 ff3f 	bl	80a1134 <os_thread_yield>
 80a02b6:	e7f8      	b.n	80a02aa <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
 80a02b8:	4629      	mov	r1, r5
 80a02ba:	68a0      	ldr	r0, [r4, #8]
 80a02bc:	f000 ff52 	bl	80a1164 <os_timer_destroy>
            handle = nullptr;
 80a02c0:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a02c2:	f104 000c 	add.w	r0, r4, #12
 80a02c6:	f7ff ffc9 	bl	80a025c <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80a02ca:	4620      	mov	r0, r4
 80a02cc:	bd38      	pop	{r3, r4, r5, pc}
 80a02ce:	bf00      	nop
 80a02d0:	080a605c 	.word	0x080a605c

080a02d4 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80a02d4:	b510      	push	{r4, lr}
 80a02d6:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80a02d8:	f7ff ffd8 	bl	80a028c <_ZN5TimerD1Ev>
 80a02dc:	4620      	mov	r0, r4
 80a02de:	211c      	movs	r1, #28
 80a02e0:	f002 fc23 	bl	80a2b2a <_ZdlPvj>
 80a02e4:	4620      	mov	r0, r4
 80a02e6:	bd10      	pop	{r4, pc}

080a02e8 <_Z19readGarageDoorStatev>:
 * Description    : Reads the state of the garage door
 * Input          : None
 * Output         : None
 *******************************************************************************/
void readGarageDoorState()
{
 80a02e8:	b537      	push	{r0, r1, r2, r4, r5, lr}

  int doorSwitchOpen = digitalRead(doorSensor1);
 80a02ea:	2000      	movs	r0, #0
 80a02ec:	f002 fbaa 	bl	80a2a44 <digitalRead>
 80a02f0:	4605      	mov	r5, r0
  int doorSwitchClosed = digitalRead(doorSensor2);
 80a02f2:	2001      	movs	r0, #1
 80a02f4:	f002 fba6 	bl	80a2a44 <digitalRead>

  if (doorSwitchOpen == HIGH && doorSwitchClosed == LOW && garageDoorState > 1)
 80a02f8:	2d01      	cmp	r5, #1
 *******************************************************************************/
void readGarageDoorState()
{

  int doorSwitchOpen = digitalRead(doorSensor1);
  int doorSwitchClosed = digitalRead(doorSensor2);
 80a02fa:	4604      	mov	r4, r0

  if (doorSwitchOpen == HIGH && doorSwitchClosed == LOW && garageDoorState > 1)
 80a02fc:	d122      	bne.n	80a0344 <_Z19readGarageDoorStatev+0x5c>
 80a02fe:	2800      	cmp	r0, #0
 80a0300:	d149      	bne.n	80a0396 <_Z19readGarageDoorStatev+0xae>
 80a0302:	4b2e      	ldr	r3, [pc, #184]	; (80a03bc <_Z19readGarageDoorStatev+0xd4>)
 80a0304:	681a      	ldr	r2, [r3, #0]
 80a0306:	2a01      	cmp	r2, #1
 80a0308:	dd56      	ble.n	80a03b8 <_Z19readGarageDoorStatev+0xd0>
  {
    // garage door open

    garageDoorState = 1; // 1 = garage door open
 80a030a:	601d      	str	r5, [r3, #0]
    garageDoorStateCloud = "open";
 80a030c:	492c      	ldr	r1, [pc, #176]	; (80a03c0 <_Z19readGarageDoorStatev+0xd8>)
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80a030e:	4d2d      	ldr	r5, [pc, #180]	; (80a03c4 <_Z19readGarageDoorStatev+0xdc>)
 80a0310:	482d      	ldr	r0, [pc, #180]	; (80a03c8 <_Z19readGarageDoorStatev+0xe0>)
 80a0312:	f002 f868 	bl	80a23e6 <_ZN6StringaSEPKc>
    Serial.println("Garage door open");
 80a0316:	f002 f9e9 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a031a:	492c      	ldr	r1, [pc, #176]	; (80a03cc <_Z19readGarageDoorStatev+0xe4>)
 80a031c:	f001 fe6d 	bl	80a1ffa <_ZN5Print7printlnEPKc>
 80a0320:	4622      	mov	r2, r4
 80a0322:	4621      	mov	r1, r4
 80a0324:	4628      	mov	r0, r5
 80a0326:	f7ff ffa2 	bl	80a026e <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 80a032a:	68a8      	ldr	r0, [r5, #8]
 80a032c:	2800      	cmp	r0, #0
 80a032e:	d043      	beq.n	80a03b8 <_Z19readGarageDoorStatev+0xd0>
 80a0330:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80a0334:	9300      	str	r3, [sp, #0]
 80a0336:	9401      	str	r4, [sp, #4]
 80a0338:	4623      	mov	r3, r4
 80a033a:	4622      	mov	r2, r4
 80a033c:	4621      	mov	r1, r4
 80a033e:	f000 ff21 	bl	80a1184 <os_timer_change>
 80a0342:	e039      	b.n	80a03b8 <_Z19readGarageDoorStatev+0xd0>

    // start timer for notification threshold
    garageDoorTimer.start();
  }
  else if (doorSwitchOpen == LOW && doorSwitchClosed == LOW && garageDoorState != 2)
 80a0344:	2d00      	cmp	r5, #0
 80a0346:	d137      	bne.n	80a03b8 <_Z19readGarageDoorStatev+0xd0>
 80a0348:	b9a8      	cbnz	r0, 80a0376 <_Z19readGarageDoorStatev+0x8e>
 80a034a:	4b1c      	ldr	r3, [pc, #112]	; (80a03bc <_Z19readGarageDoorStatev+0xd4>)
 80a034c:	681a      	ldr	r2, [r3, #0]
 80a034e:	2a02      	cmp	r2, #2
 80a0350:	d032      	beq.n	80a03b8 <_Z19readGarageDoorStatev+0xd0>
  {
    // garage door in transition

    garageDoorState = 2; // 2 = garage door in transition
 80a0352:	2202      	movs	r2, #2
    garageDoorStateCloud = "transition";
 80a0354:	491e      	ldr	r1, [pc, #120]	; (80a03d0 <_Z19readGarageDoorStatev+0xe8>)
 80a0356:	481c      	ldr	r0, [pc, #112]	; (80a03c8 <_Z19readGarageDoorStatev+0xe0>)
  }
  else if (doorSwitchOpen == LOW && doorSwitchClosed == LOW && garageDoorState != 2)
  {
    // garage door in transition

    garageDoorState = 2; // 2 = garage door in transition
 80a0358:	601a      	str	r2, [r3, #0]
    garageDoorStateCloud = "transition";
 80a035a:	f002 f844 	bl	80a23e6 <_ZN6StringaSEPKc>
    Serial.println("Garage door in transition");
 80a035e:	f002 f9c5 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a0362:	491c      	ldr	r1, [pc, #112]	; (80a03d4 <_Z19readGarageDoorStatev+0xec>)
 80a0364:	f001 fe49 	bl	80a1ffa <_ZN5Print7printlnEPKc>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80a0368:	4622      	mov	r2, r4
 80a036a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80a036e:	4815      	ldr	r0, [pc, #84]	; (80a03c4 <_Z19readGarageDoorStatev+0xdc>)
 80a0370:	f7ff ff7d 	bl	80a026e <_ZN5Timer5_stopEjb>
 80a0374:	e020      	b.n	80a03b8 <_Z19readGarageDoorStatev+0xd0>

    // stop timer for notification threshold
    garageDoorTimer.stop();
  }
  else if (doorSwitchOpen == LOW && doorSwitchClosed == HIGH && garageDoorState < 3)
 80a0376:	2801      	cmp	r0, #1
 80a0378:	d11e      	bne.n	80a03b8 <_Z19readGarageDoorStatev+0xd0>
 80a037a:	4b10      	ldr	r3, [pc, #64]	; (80a03bc <_Z19readGarageDoorStatev+0xd4>)
 80a037c:	681a      	ldr	r2, [r3, #0]
 80a037e:	2a02      	cmp	r2, #2
 80a0380:	dc1a      	bgt.n	80a03b8 <_Z19readGarageDoorStatev+0xd0>
  {
    // garage door closed

    garageDoorState = 3; // 3 = garage door closed
 80a0382:	2203      	movs	r2, #3
    garageDoorStateCloud = "closed";
 80a0384:	4914      	ldr	r1, [pc, #80]	; (80a03d8 <_Z19readGarageDoorStatev+0xf0>)
 80a0386:	4810      	ldr	r0, [pc, #64]	; (80a03c8 <_Z19readGarageDoorStatev+0xe0>)
  }
  else if (doorSwitchOpen == LOW && doorSwitchClosed == HIGH && garageDoorState < 3)
  {
    // garage door closed

    garageDoorState = 3; // 3 = garage door closed
 80a0388:	601a      	str	r2, [r3, #0]
    garageDoorStateCloud = "closed";
 80a038a:	f002 f82c 	bl	80a23e6 <_ZN6StringaSEPKc>
    Serial.println("Garage door closed");
 80a038e:	f002 f9ad 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a0392:	4912      	ldr	r1, [pc, #72]	; (80a03dc <_Z19readGarageDoorStatev+0xf4>)
 80a0394:	e00b      	b.n	80a03ae <_Z19readGarageDoorStatev+0xc6>
  }
  else if (doorSwitchOpen == HIGH && doorSwitchClosed == HIGH)
 80a0396:	2801      	cmp	r0, #1
 80a0398:	d10e      	bne.n	80a03b8 <_Z19readGarageDoorStatev+0xd0>
  {
    // Sensor failure

    bAutomaticDoorOperation = false; // deactivating automatic door mode, to be activated manually afterwards
 80a039a:	4b11      	ldr	r3, [pc, #68]	; (80a03e0 <_Z19readGarageDoorStatev+0xf8>)
 80a039c:	2200      	movs	r2, #0
    garageDoorStateCloud = "Sensor failure";
 80a039e:	4911      	ldr	r1, [pc, #68]	; (80a03e4 <_Z19readGarageDoorStatev+0xfc>)
 80a03a0:	4809      	ldr	r0, [pc, #36]	; (80a03c8 <_Z19readGarageDoorStatev+0xe0>)
  }
  else if (doorSwitchOpen == HIGH && doorSwitchClosed == HIGH)
  {
    // Sensor failure

    bAutomaticDoorOperation = false; // deactivating automatic door mode, to be activated manually afterwards
 80a03a2:	701a      	strb	r2, [r3, #0]
    garageDoorStateCloud = "Sensor failure";
 80a03a4:	f002 f81f 	bl	80a23e6 <_ZN6StringaSEPKc>
    // Error treatment to be defined
    Serial.println("Garage door failure!");
 80a03a8:	f002 f9a0 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a03ac:	490e      	ldr	r1, [pc, #56]	; (80a03e8 <_Z19readGarageDoorStatev+0x100>)
  }
}
 80a03ae:	b003      	add	sp, #12
 80a03b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    // Sensor failure

    bAutomaticDoorOperation = false; // deactivating automatic door mode, to be activated manually afterwards
    garageDoorStateCloud = "Sensor failure";
    // Error treatment to be defined
    Serial.println("Garage door failure!");
 80a03b4:	f001 be21 	b.w	80a1ffa <_ZN5Print7printlnEPKc>
  }
}
 80a03b8:	b003      	add	sp, #12
 80a03ba:	bd30      	pop	{r4, r5, pc}
 80a03bc:	20000314 	.word	0x20000314
 80a03c0:	080a60c6 	.word	0x080a60c6
 80a03c4:	20000498 	.word	0x20000498
 80a03c8:	200003f4 	.word	0x200003f4
 80a03cc:	080a60ba 	.word	0x080a60ba
 80a03d0:	080a60da 	.word	0x080a60da
 80a03d4:	080a60cb 	.word	0x080a60cb
 80a03d8:	080a60f1 	.word	0x080a60f1
 80a03dc:	080a60e5 	.word	0x080a60e5
 80a03e0:	20000494 	.word	0x20000494
 80a03e4:	080a60f8 	.word	0x080a60f8
 80a03e8:	080a6107 	.word	0x080a6107

080a03ec <_Z23temperatureNotificationv>:
 * Description    : Notifies user about low temperature (see threshold)
 * Input          : None
 * Output         : None
 *******************************************************************************/
void temperatureNotification()
{
 80a03ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a03ee:	4b0a      	ldr	r3, [pc, #40]	; (80a0418 <_Z23temperatureNotificationv+0x2c>)
 80a03f0:	a802      	add	r0, sp, #8
 80a03f2:	781b      	ldrb	r3, [r3, #0]
 80a03f4:	4a09      	ldr	r2, [pc, #36]	; (80a041c <_Z23temperatureNotificationv+0x30>)
 80a03f6:	f88d 3000 	strb.w	r3, [sp]
 80a03fa:	4909      	ldr	r1, [pc, #36]	; (80a0420 <_Z23temperatureNotificationv+0x34>)
 80a03fc:	233c      	movs	r3, #60	; 0x3c
 80a03fe:	f001 facd 	bl	80a199c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0402:	9803      	ldr	r0, [sp, #12]
 80a0404:	b128      	cbz	r0, 80a0412 <_Z23temperatureNotificationv+0x26>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0406:	6843      	ldr	r3, [r0, #4]
 80a0408:	3b01      	subs	r3, #1
 80a040a:	6043      	str	r3, [r0, #4]
 80a040c:	b90b      	cbnz	r3, 80a0412 <_Z23temperatureNotificationv+0x26>
 80a040e:	f7ff fef9 	bl	80a0204 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.6.constprop.31>

  Particle.publish("Temperature", "Alert");
}
 80a0412:	b005      	add	sp, #20
 80a0414:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0418:	200003d8 	.word	0x200003d8
 80a041c:	080a60a9 	.word	0x080a60a9
 80a0420:	080a611c 	.word	0x080a611c

080a0424 <_Z13readTempHumidv>:
 * Description    : Reads Temperature and Humidity of Sensor DHT22
 * Input          : None
 * Output         : None
 *******************************************************************************/
void readTempHumid()
{
 80a0424:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0428:	f000 fedc 	bl	80a11e4 <HAL_Timer_Get_Milli_Seconds>

  // Check if we need to start the next sample
  if (millis() > DHTnextSampleTime)
 80a042c:	4e8a      	ldr	r6, [pc, #552]	; (80a0658 <_Z13readTempHumidv+0x234>)
 80a042e:	6833      	ldr	r3, [r6, #0]
 80a0430:	4283      	cmp	r3, r0
 80a0432:	f080 810d 	bcs.w	80a0650 <_Z13readTempHumidv+0x22c>
  {
    if (!bDHTstarted)
 80a0436:	4c89      	ldr	r4, [pc, #548]	; (80a065c <_Z13readTempHumidv+0x238>)
 80a0438:	7823      	ldrb	r3, [r4, #0]
 80a043a:	b973      	cbnz	r3, 80a045a <_Z13readTempHumidv+0x36>
    { // start the sample
      Serial.print("\n\n");
 80a043c:	f002 f956 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a0440:	4987      	ldr	r1, [pc, #540]	; (80a0660 <_Z13readTempHumidv+0x23c>)
 80a0442:	f001 fdc7 	bl	80a1fd4 <_ZN5Print5printEPKc>
      Serial.print("Retrieving information from sensor. ");
 80a0446:	f002 f951 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a044a:	4986      	ldr	r1, [pc, #536]	; (80a0664 <_Z13readTempHumidv+0x240>)
 80a044c:	f001 fdc2 	bl	80a1fd4 <_ZN5Print5printEPKc>
      DHT.acquire();
 80a0450:	4885      	ldr	r0, [pc, #532]	; (80a0668 <_Z13readTempHumidv+0x244>)
 80a0452:	f000 fbfd 	bl	80a0c50 <_ZN14PietteTech_DHT7acquireEv>
      bDHTstarted = true;
 80a0456:	2301      	movs	r3, #1
 80a0458:	7023      	strb	r3, [r4, #0]
    }

    if (!DHT.acquiring())
 80a045a:	4883      	ldr	r0, [pc, #524]	; (80a0668 <_Z13readTempHumidv+0x244>)
 80a045c:	f000 fcc4 	bl	80a0de8 <_ZN14PietteTech_DHT9acquiringEv>
 80a0460:	4f82      	ldr	r7, [pc, #520]	; (80a066c <_Z13readTempHumidv+0x248>)
 80a0462:	2800      	cmp	r0, #0
 80a0464:	f040 80cd 	bne.w	80a0602 <_Z13readTempHumidv+0x1de>
    { // has sample completed?

      // get DHT status
      int result = DHT.getStatus();
 80a0468:	487f      	ldr	r0, [pc, #508]	; (80a0668 <_Z13readTempHumidv+0x244>)
 80a046a:	f000 fcc9 	bl	80a0e00 <_ZN14PietteTech_DHT9getStatusEv>
 80a046e:	4605      	mov	r5, r0

      Serial.print("Read sensor: ");
 80a0470:	f002 f93c 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a0474:	497e      	ldr	r1, [pc, #504]	; (80a0670 <_Z13readTempHumidv+0x24c>)
 80a0476:	f001 fdad 	bl	80a1fd4 <_ZN5Print5printEPKc>

      switch (result)
 80a047a:	1de8      	adds	r0, r5, #7
 80a047c:	2807      	cmp	r0, #7
 80a047e:	d83d      	bhi.n	80a04fc <_Z13readTempHumidv+0xd8>
 80a0480:	e8df f000 	tbb	[pc, r0]
 80a0484:	20272e35 	.word	0x20272e35
 80a0488:	040b1219 	.word	0x040b1219
      {

      case DHTLIB_OK:
        Serial.println("OK");
 80a048c:	f002 f92e 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a0490:	4978      	ldr	r1, [pc, #480]	; (80a0674 <_Z13readTempHumidv+0x250>)
 80a0492:	f001 fdb2 	bl	80a1ffa <_ZN5Print7printlnEPKc>
        sensorStatus = "OK";
 80a0496:	4977      	ldr	r1, [pc, #476]	; (80a0674 <_Z13readTempHumidv+0x250>)
 80a0498:	e036      	b.n	80a0508 <_Z13readTempHumidv+0xe4>
        break;

      case DHTLIB_ERROR_CHECKSUM:
        Serial.println("Error\n\r\tChecksum error");
 80a049a:	f002 f927 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a049e:	4976      	ldr	r1, [pc, #472]	; (80a0678 <_Z13readTempHumidv+0x254>)
 80a04a0:	f001 fdab 	bl	80a1ffa <_ZN5Print7printlnEPKc>
        sensorStatus = "Error\n\r\tChecksum error";
 80a04a4:	4974      	ldr	r1, [pc, #464]	; (80a0678 <_Z13readTempHumidv+0x254>)
 80a04a6:	e02f      	b.n	80a0508 <_Z13readTempHumidv+0xe4>
        break;

      case DHTLIB_ERROR_ISR_TIMEOUT:
        Serial.println("Error\n\r\tISR time out error");
 80a04a8:	f002 f920 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a04ac:	4973      	ldr	r1, [pc, #460]	; (80a067c <_Z13readTempHumidv+0x258>)
 80a04ae:	f001 fda4 	bl	80a1ffa <_ZN5Print7printlnEPKc>
        sensorStatus = "Error\n\r\tISR time out error";
 80a04b2:	4972      	ldr	r1, [pc, #456]	; (80a067c <_Z13readTempHumidv+0x258>)
 80a04b4:	e028      	b.n	80a0508 <_Z13readTempHumidv+0xe4>
        break;

      case DHTLIB_ERROR_RESPONSE_TIMEOUT:
        Serial.println("Error\n\r\tResponse time out error");
 80a04b6:	f002 f919 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a04ba:	4971      	ldr	r1, [pc, #452]	; (80a0680 <_Z13readTempHumidv+0x25c>)
 80a04bc:	f001 fd9d 	bl	80a1ffa <_ZN5Print7printlnEPKc>
        sensorStatus = "Error\n\r\tResponse time out error";
 80a04c0:	496f      	ldr	r1, [pc, #444]	; (80a0680 <_Z13readTempHumidv+0x25c>)
 80a04c2:	e021      	b.n	80a0508 <_Z13readTempHumidv+0xe4>
        break;

      case DHTLIB_ERROR_DATA_TIMEOUT:
        Serial.println("Error\n\r\tData time out error");
 80a04c4:	f002 f912 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a04c8:	496e      	ldr	r1, [pc, #440]	; (80a0684 <_Z13readTempHumidv+0x260>)
 80a04ca:	f001 fd96 	bl	80a1ffa <_ZN5Print7printlnEPKc>
        sensorStatus = "Error\n\r\tData time out error";
 80a04ce:	496d      	ldr	r1, [pc, #436]	; (80a0684 <_Z13readTempHumidv+0x260>)
 80a04d0:	e01a      	b.n	80a0508 <_Z13readTempHumidv+0xe4>
        break;

      case DHTLIB_ERROR_ACQUIRING:
        Serial.println("Error\n\r\tAcquiring");
 80a04d2:	f002 f90b 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a04d6:	496c      	ldr	r1, [pc, #432]	; (80a0688 <_Z13readTempHumidv+0x264>)
 80a04d8:	f001 fd8f 	bl	80a1ffa <_ZN5Print7printlnEPKc>
        sensorStatus = "Error\n\r\tAcquiring";
 80a04dc:	496a      	ldr	r1, [pc, #424]	; (80a0688 <_Z13readTempHumidv+0x264>)
 80a04de:	e013      	b.n	80a0508 <_Z13readTempHumidv+0xe4>
        break;

      case DHTLIB_ERROR_DELTA:
        Serial.println("Error\n\r\tDelta time to small");
 80a04e0:	f002 f904 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a04e4:	4969      	ldr	r1, [pc, #420]	; (80a068c <_Z13readTempHumidv+0x268>)
 80a04e6:	f001 fd88 	bl	80a1ffa <_ZN5Print7printlnEPKc>
        sensorStatus = "Error\n\r\tDelta time to small";
 80a04ea:	4968      	ldr	r1, [pc, #416]	; (80a068c <_Z13readTempHumidv+0x268>)
 80a04ec:	e00c      	b.n	80a0508 <_Z13readTempHumidv+0xe4>
        break;

      case DHTLIB_ERROR_NOTSTARTED:
        Serial.println("Error\n\r\tNot started");
 80a04ee:	f002 f8fd 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a04f2:	4967      	ldr	r1, [pc, #412]	; (80a0690 <_Z13readTempHumidv+0x26c>)
 80a04f4:	f001 fd81 	bl	80a1ffa <_ZN5Print7printlnEPKc>
        sensorStatus = "Error\n\r\tNot started";
 80a04f8:	4965      	ldr	r1, [pc, #404]	; (80a0690 <_Z13readTempHumidv+0x26c>)
 80a04fa:	e005      	b.n	80a0508 <_Z13readTempHumidv+0xe4>
        break;

      default:
        Serial.println("Unknown error");
 80a04fc:	f002 f8f6 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a0500:	4964      	ldr	r1, [pc, #400]	; (80a0694 <_Z13readTempHumidv+0x270>)
 80a0502:	f001 fd7a 	bl	80a1ffa <_ZN5Print7printlnEPKc>
        sensorStatus = "Unknown error";
 80a0506:	4963      	ldr	r1, [pc, #396]	; (80a0694 <_Z13readTempHumidv+0x270>)
 80a0508:	4863      	ldr	r0, [pc, #396]	; (80a0698 <_Z13readTempHumidv+0x274>)
 80a050a:	f001 ff6c 	bl	80a23e6 <_ZN6StringaSEPKc>
        break;
      }

      Serial.print("Humidity (%): ");
 80a050e:	f002 f8ed 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a0512:	4962      	ldr	r1, [pc, #392]	; (80a069c <_Z13readTempHumidv+0x278>)
 80a0514:	f001 fd5e 	bl	80a1fd4 <_ZN5Print5printEPKc>
      Serial.println(DHT.getHumidity(), 1);
 80a0518:	f002 f8e8 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a051c:	4680      	mov	r8, r0
 80a051e:	4852      	ldr	r0, [pc, #328]	; (80a0668 <_Z13readTempHumidv+0x244>)
 80a0520:	f000 fc8a 	bl	80a0e38 <_ZN14PietteTech_DHT11getHumidityEv>
 80a0524:	f004 fa32 	bl	80a498c <__aeabi_f2d>
 80a0528:	2501      	movs	r5, #1
 80a052a:	4602      	mov	r2, r0
 80a052c:	460b      	mov	r3, r1
 80a052e:	9500      	str	r5, [sp, #0]
 80a0530:	4640      	mov	r0, r8
 80a0532:	f001 fe69 	bl	80a2208 <_ZN5Print7printlnEdi>
      //Particle.publish("Humidity (%)", String(DHT.getHumidity(), 1));
      dHumidity = (double)(roundf((10.0 * DHT.getHumidity())) / 10.0);
 80a0536:	484c      	ldr	r0, [pc, #304]	; (80a0668 <_Z13readTempHumidv+0x244>)
 80a0538:	f000 fc7e 	bl	80a0e38 <_ZN14PietteTech_DHT11getHumidityEv>
 80a053c:	4958      	ldr	r1, [pc, #352]	; (80a06a0 <_Z13readTempHumidv+0x27c>)
 80a053e:	f004 fecf 	bl	80a52e0 <__aeabi_fmul>
 80a0542:	f002 fc3f 	bl	80a2dc4 <roundf>
 80a0546:	f004 fa21 	bl	80a498c <__aeabi_f2d>
 80a054a:	2200      	movs	r2, #0
 80a054c:	4b55      	ldr	r3, [pc, #340]	; (80a06a4 <_Z13readTempHumidv+0x280>)
 80a054e:	f004 fb9b 	bl	80a4c88 <__aeabi_ddiv>
 80a0552:	4b55      	ldr	r3, [pc, #340]	; (80a06a8 <_Z13readTempHumidv+0x284>)
 80a0554:	e9c3 0100 	strd	r0, r1, [r3]

      Serial.print("Temperature (°C): ");
 80a0558:	f002 f8c8 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a055c:	4953      	ldr	r1, [pc, #332]	; (80a06ac <_Z13readTempHumidv+0x288>)
 80a055e:	f001 fd39 	bl	80a1fd4 <_ZN5Print5printEPKc>
      Serial.println((DHT.getCelsius() - tempOffset), 1);
 80a0562:	f002 f8c3 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a0566:	4680      	mov	r8, r0
 80a0568:	483f      	ldr	r0, [pc, #252]	; (80a0668 <_Z13readTempHumidv+0x244>)
 80a056a:	f000 fc4b 	bl	80a0e04 <_ZN14PietteTech_DHT10getCelsiusEv>
 80a056e:	4950      	ldr	r1, [pc, #320]	; (80a06b0 <_Z13readTempHumidv+0x28c>)
 80a0570:	f004 fdac 	bl	80a50cc <__aeabi_fsub>
 80a0574:	f004 fa0a 	bl	80a498c <__aeabi_f2d>
 80a0578:	9500      	str	r5, [sp, #0]
 80a057a:	4602      	mov	r2, r0
 80a057c:	460b      	mov	r3, r1
 80a057e:	4640      	mov	r0, r8
 80a0580:	f001 fe42 	bl	80a2208 <_ZN5Print7printlnEdi>
      //Particle.publish("Temperature (°C)", String((DHT.getCelsius()-tempOffset), 1));
      dTemperature = (double)(roundf((10.0 * (DHT.getCelsius() - tempOffset))) / 10.0);
 80a0584:	4838      	ldr	r0, [pc, #224]	; (80a0668 <_Z13readTempHumidv+0x244>)
 80a0586:	f000 fc3d 	bl	80a0e04 <_ZN14PietteTech_DHT10getCelsiusEv>
 80a058a:	4949      	ldr	r1, [pc, #292]	; (80a06b0 <_Z13readTempHumidv+0x28c>)
 80a058c:	f004 fd9e 	bl	80a50cc <__aeabi_fsub>
 80a0590:	4943      	ldr	r1, [pc, #268]	; (80a06a0 <_Z13readTempHumidv+0x27c>)
 80a0592:	f004 fea5 	bl	80a52e0 <__aeabi_fmul>
 80a0596:	f002 fc15 	bl	80a2dc4 <roundf>
 80a059a:	f004 f9f7 	bl	80a498c <__aeabi_f2d>
 80a059e:	2200      	movs	r2, #0
 80a05a0:	4b40      	ldr	r3, [pc, #256]	; (80a06a4 <_Z13readTempHumidv+0x280>)
 80a05a2:	f004 fb71 	bl	80a4c88 <__aeabi_ddiv>
 80a05a6:	e9c7 0100 	strd	r0, r1, [r7]
      //Serial.println(DHT.getFahrenheit(), 1);

      //Serial.print("Temperature (K): ");
      //Serial.println(DHT.getKelvin(), 1);

      Serial.print("Dew Point (°C): ");
 80a05aa:	f002 f89f 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a05ae:	4941      	ldr	r1, [pc, #260]	; (80a06b4 <_Z13readTempHumidv+0x290>)
 80a05b0:	f001 fd10 	bl	80a1fd4 <_ZN5Print5printEPKc>
      Serial.println(DHT.getDewPoint());
 80a05b4:	f002 f89a 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a05b8:	4680      	mov	r8, r0
 80a05ba:	482b      	ldr	r0, [pc, #172]	; (80a0668 <_Z13readTempHumidv+0x244>)
 80a05bc:	f000 fc58 	bl	80a0e70 <_ZN14PietteTech_DHT11getDewPointEv>
 80a05c0:	2502      	movs	r5, #2
 80a05c2:	4602      	mov	r2, r0
 80a05c4:	460b      	mov	r3, r1
 80a05c6:	4640      	mov	r0, r8
 80a05c8:	9500      	str	r5, [sp, #0]
 80a05ca:	f001 fe1d 	bl	80a2208 <_ZN5Print7printlnEdi>

      Serial.print("Dew Point Slow (°C): ");
 80a05ce:	f002 f88d 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a05d2:	4939      	ldr	r1, [pc, #228]	; (80a06b8 <_Z13readTempHumidv+0x294>)
 80a05d4:	f001 fcfe 	bl	80a1fd4 <_ZN5Print5printEPKc>
      Serial.println(DHT.getDewPointSlow());
 80a05d8:	f002 f888 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a05dc:	4680      	mov	r8, r0
 80a05de:	4822      	ldr	r0, [pc, #136]	; (80a0668 <_Z13readTempHumidv+0x244>)
 80a05e0:	f000 fcae 	bl	80a0f40 <_ZN14PietteTech_DHT15getDewPointSlowEv>
 80a05e4:	9500      	str	r5, [sp, #0]
 80a05e6:	4602      	mov	r2, r0
 80a05e8:	460b      	mov	r3, r1
 80a05ea:	4640      	mov	r0, r8
 80a05ec:	f001 fe0c 	bl	80a2208 <_ZN5Print7printlnEdi>

      bDHTstarted = false;                                // reset the sample flag so we can take another
 80a05f0:	2300      	movs	r3, #0
 80a05f2:	7023      	strb	r3, [r4, #0]
 80a05f4:	f000 fdf6 	bl	80a11e4 <HAL_Timer_Get_Milli_Seconds>
      DHTnextSampleTime = millis() + DHT_SAMPLE_INTERVAL; // set the time for next sample
 80a05f8:	f500 2012 	add.w	r0, r0, #598016	; 0x92000
 80a05fc:	f500 60f8 	add.w	r0, r0, #1984	; 0x7c0
 80a0600:	6030      	str	r0, [r6, #0]
    }

    // Manage alerts for low temperature
    if (dTemperature < 3.0 && bTempAlert == false)
 80a0602:	e9d7 4500 	ldrd	r4, r5, [r7]
 80a0606:	2200      	movs	r2, #0
 80a0608:	4b2c      	ldr	r3, [pc, #176]	; (80a06bc <_Z13readTempHumidv+0x298>)
 80a060a:	4620      	mov	r0, r4
 80a060c:	4629      	mov	r1, r5
 80a060e:	f004 fc83 	bl	80a4f18 <__aeabi_dcmplt>
 80a0612:	b138      	cbz	r0, 80a0624 <_Z13readTempHumidv+0x200>
 80a0614:	4e2a      	ldr	r6, [pc, #168]	; (80a06c0 <_Z13readTempHumidv+0x29c>)
 80a0616:	7833      	ldrb	r3, [r6, #0]
 80a0618:	b993      	cbnz	r3, 80a0640 <_Z13readTempHumidv+0x21c>
    {

      temperatureNotification();
 80a061a:	f7ff fee7 	bl	80a03ec <_Z23temperatureNotificationv>
      bTempAlert = true;
 80a061e:	2301      	movs	r3, #1
 80a0620:	7033      	strb	r3, [r6, #0]
 80a0622:	e015      	b.n	80a0650 <_Z13readTempHumidv+0x22c>
    }
    else if (dTemperature >= 5.0 && bTempAlert == true)
 80a0624:	2200      	movs	r2, #0
 80a0626:	4b27      	ldr	r3, [pc, #156]	; (80a06c4 <_Z13readTempHumidv+0x2a0>)
 80a0628:	4620      	mov	r0, r4
 80a062a:	4629      	mov	r1, r5
 80a062c:	f004 fc88 	bl	80a4f40 <__aeabi_dcmpge>
 80a0630:	b170      	cbz	r0, 80a0650 <_Z13readTempHumidv+0x22c>
 80a0632:	4b23      	ldr	r3, [pc, #140]	; (80a06c0 <_Z13readTempHumidv+0x29c>)
 80a0634:	781b      	ldrb	r3, [r3, #0]
 80a0636:	b15b      	cbz	r3, 80a0650 <_Z13readTempHumidv+0x22c>
    {

      bTempAlert = false;
 80a0638:	4b21      	ldr	r3, [pc, #132]	; (80a06c0 <_Z13readTempHumidv+0x29c>)
 80a063a:	2200      	movs	r2, #0
 80a063c:	701a      	strb	r2, [r3, #0]
    }
  }
}
 80a063e:	e007      	b.n	80a0650 <_Z13readTempHumidv+0x22c>
    {

      temperatureNotification();
      bTempAlert = true;
    }
    else if (dTemperature >= 5.0 && bTempAlert == true)
 80a0640:	2200      	movs	r2, #0
 80a0642:	4b20      	ldr	r3, [pc, #128]	; (80a06c4 <_Z13readTempHumidv+0x2a0>)
 80a0644:	4620      	mov	r0, r4
 80a0646:	4629      	mov	r1, r5
 80a0648:	f004 fc7a 	bl	80a4f40 <__aeabi_dcmpge>
 80a064c:	2800      	cmp	r0, #0
 80a064e:	d1f3      	bne.n	80a0638 <_Z13readTempHumidv+0x214>
    {

      bTempAlert = false;
    }
  }
}
 80a0650:	b002      	add	sp, #8
 80a0652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0656:	bf00      	nop
 80a0658:	200003dc 	.word	0x200003dc
 80a065c:	20000410 	.word	0x20000410
 80a0660:	080a6128 	.word	0x080a6128
 80a0664:	080a612b 	.word	0x080a612b
 80a0668:	20000438 	.word	0x20000438
 80a066c:	20000300 	.word	0x20000300
 80a0670:	080a6150 	.word	0x080a6150
 80a0674:	080a615e 	.word	0x080a615e
 80a0678:	080a6161 	.word	0x080a6161
 80a067c:	080a6178 	.word	0x080a6178
 80a0680:	080a6193 	.word	0x080a6193
 80a0684:	080a61b3 	.word	0x080a61b3
 80a0688:	080a61cf 	.word	0x080a61cf
 80a068c:	080a61e1 	.word	0x080a61e1
 80a0690:	080a61fd 	.word	0x080a61fd
 80a0694:	080a6211 	.word	0x080a6211
 80a0698:	20000424 	.word	0x20000424
 80a069c:	080a621f 	.word	0x080a621f
 80a06a0:	41200000 	.word	0x41200000
 80a06a4:	40240000 	.word	0x40240000
 80a06a8:	20000308 	.word	0x20000308
 80a06ac:	080a622e 	.word	0x080a622e
 80a06b0:	40966666 	.word	0x40966666
 80a06b4:	080a6242 	.word	0x080a6242
 80a06b8:	080a6254 	.word	0x080a6254
 80a06bc:	40080000 	.word	0x40080000
 80a06c0:	20000434 	.word	0x20000434
 80a06c4:	40140000 	.word	0x40140000

080a06c8 <_Z10updateTimev>:
 * Description    : Request time synchronization from the Particle Cloud once a day
 * Input          : None
 * Output         : None
 *******************************************************************************/
void updateTime()
{
 80a06c8:	b530      	push	{r4, r5, lr}
 80a06ca:	b085      	sub	sp, #20
 80a06cc:	f000 fd8a 	bl	80a11e4 <HAL_Timer_Get_Milli_Seconds>

  if (millis() - lastSync > ONE_DAY_MILLIS)
 80a06d0:	4c10      	ldr	r4, [pc, #64]	; (80a0714 <_Z10updateTimev+0x4c>)
 80a06d2:	6823      	ldr	r3, [r4, #0]
 80a06d4:	1ac0      	subs	r0, r0, r3
 80a06d6:	4b10      	ldr	r3, [pc, #64]	; (80a0718 <_Z10updateTimev+0x50>)
 80a06d8:	681b      	ldr	r3, [r3, #0]
 80a06da:	4298      	cmp	r0, r3
 80a06dc:	d917      	bls.n	80a070e <_Z10updateTimev+0x46>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        return CLOUD_FN(spark_sync_time(NULL), false);
 80a06de:	2000      	movs	r0, #0
 80a06e0:	f000 ff16 	bl	80a1510 <spark_sync_time>
  {

    // Request time synchronization from the Particle Cloud
    Particle.syncTime();
    Serial.printf("Time updated at %s...", Time.timeStr().c_str());
 80a06e4:	f002 f802 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a06e8:	4605      	mov	r5, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 80a06ea:	f001 fefc 	bl	80a24e6 <_ZN9TimeClass3nowEv>
 80a06ee:	4601      	mov	r1, r0
 80a06f0:	4668      	mov	r0, sp
 80a06f2:	f001 feb5 	bl	80a2460 <_ZN9TimeClass7timeStrEl>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80a06f6:	9b00      	ldr	r3, [sp, #0]
 80a06f8:	4a08      	ldr	r2, [pc, #32]	; (80a071c <_Z10updateTimev+0x54>)
 80a06fa:	2100      	movs	r1, #0
 80a06fc:	4628      	mov	r0, r5
 80a06fe:	f001 fd91 	bl	80a2224 <_ZN5Print11printf_implEbPKcz>
 80a0702:	4668      	mov	r0, sp
 80a0704:	f001 fdfb 	bl	80a22fe <_ZN6StringD1Ev>
 80a0708:	f000 fd6c 	bl	80a11e4 <HAL_Timer_Get_Milli_Seconds>
    lastSync = millis();
 80a070c:	6020      	str	r0, [r4, #0]
  }
}
 80a070e:	b005      	add	sp, #20
 80a0710:	bd30      	pop	{r4, r5, pc}
 80a0712:	bf00      	nop
 80a0714:	20000408 	.word	0x20000408
 80a0718:	20000310 	.word	0x20000310
 80a071c:	080a626b 	.word	0x080a626b

080a0720 <_Z8blinkLEDiii>:
 * Description    : Blinks any LED as disired w/o delay
 * Input          : LED Pin defintion, Off-Time (ms), On-Time (ms)
 * Output         : None
 *******************************************************************************/
void blinkLED(int pin, int off, int on)
{
 80a0720:	b570      	push	{r4, r5, r6, lr}
 80a0722:	460e      	mov	r6, r1
 80a0724:	4614      	mov	r4, r2
 80a0726:	4605      	mov	r5, r0
 80a0728:	f000 fd5c 	bl	80a11e4 <HAL_Timer_Get_Milli_Seconds>

  int blinkPhase = millis() % (off + on);

  if (blinkPhase < off)
 80a072c:	1932      	adds	r2, r6, r4
 80a072e:	fbb0 f3f2 	udiv	r3, r0, r2
 80a0732:	fb03 0012 	mls	r0, r3, r2, r0
 80a0736:	4286      	cmp	r6, r0
  {

    digitalWrite(pin, LOW);
 80a0738:	bfc8      	it	gt
 80a073a:	2100      	movgt	r1, #0
 80a073c:	b2a8      	uxth	r0, r5
  }
  else
  {

    digitalWrite(pin, HIGH);
 80a073e:	bfd8      	it	le
 80a0740:	2101      	movle	r1, #1
  }
}
 80a0742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(pin, LOW);
  }
  else
  {

    digitalWrite(pin, HIGH);
 80a0746:	f002 b964 	b.w	80a2a12 <digitalWrite>
	...

080a074c <_Z16checkCloudStatusv>:
 * Description    : Checks if Particle cloud is connected
 * Input          : None
 * Output         : None
 *******************************************************************************/
void checkCloudStatus()
{
 80a074c:	b510      	push	{r4, lr}
 80a074e:	4c0e      	ldr	r4, [pc, #56]	; (80a0788 <_Z16checkCloudStatusv+0x3c>)
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0750:	2200      	movs	r2, #0
 80a0752:	4611      	mov	r1, r2
 80a0754:	6860      	ldr	r0, [r4, #4]
 80a0756:	f000 ff0b 	bl	80a1570 <network_ready>

  if (WiFi.ready())
 80a075a:	4602      	mov	r2, r0
 80a075c:	b130      	cbz	r0, 80a076c <_Z16checkCloudStatusv+0x20>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a075e:	f000 fec7 	bl	80a14f0 <spark_cloud_flag_connected>
  {

    if (Particle.connected())
 80a0762:	b980      	cbnz	r0, 80a0786 <_Z16checkCloudStatusv+0x3a>
    }
    else
    {

      // connection to particle backend not established
      blinkLED(statusLEDParticle, 1000, 100);
 80a0764:	2264      	movs	r2, #100	; 0x64
 80a0766:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80a076a:	e007      	b.n	80a077c <_Z16checkCloudStatusv+0x30>
 80a076c:	4601      	mov	r1, r0
 80a076e:	6860      	ldr	r0, [r4, #4]
 80a0770:	f000 fefe 	bl	80a1570 <network_ready>
    }
  }
  else if (!WiFi.ready())
 80a0774:	b938      	cbnz	r0, 80a0786 <_Z16checkCloudStatusv+0x3a>
  {

    // wifi connection not established
    blinkLED(statusLEDParticle, 500, 500);
 80a0776:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80a077a:	4611      	mov	r1, r2
  }
 80a077c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }
  else if (!WiFi.ready())
  {

    // wifi connection not established
    blinkLED(statusLEDParticle, 500, 500);
 80a0780:	2006      	movs	r0, #6
 80a0782:	f7ff bfcd 	b.w	80a0720 <_Z8blinkLEDiii>
 80a0786:	bd10      	pop	{r4, pc}
 80a0788:	200009a0 	.word	0x200009a0

080a078c <loop>:
 * Description    : Loop
 * Input          : None
 * Output         : None
 *******************************************************************************/
void loop()
{
 80a078c:	b508      	push	{r3, lr}

  // checks status if patricle is connected to cloud
  checkCloudStatus();
 80a078e:	f7ff ffdd 	bl	80a074c <_Z16checkCloudStatusv>

  // reads temperature and humidity of sensor
  readTempHumid();
 80a0792:	f7ff fe47 	bl	80a0424 <_Z13readTempHumidv>

  // reads garage door state
  readGarageDoorState();
 80a0796:	f7ff fda7 	bl	80a02e8 <_Z19readGarageDoorStatev>
  // reads vehicle state
  // readVehicleState();  // feature currently not used

  // updates the time from the internet if necessary
  updateTime();
}
 80a079a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  // reads vehicle state
  // readVehicleState();  // feature currently not used

  // updates the time from the internet if necessary
  updateTime();
 80a079e:	f7ff bf93 	b.w	80a06c8 <_Z10updateTimev>
	...

080a07a4 <_ZN10CloudClass8variableIA13_cI6StringEEEbRKT_DpRKT0_>:
};

class CloudClass {
  public:
    template <typename T, class ... Types>
    static inline bool variable(const T &name, const Types& ... args)
 80a07a4:	b507      	push	{r0, r1, r2, lr}

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra;
        extra.size = sizeof(extra);
 80a07a6:	2308      	movs	r3, #8
 80a07a8:	f8ad 3000 	strh.w	r3, [sp]
        extra.update = update_string_variable;
 80a07ac:	4b04      	ldr	r3, [pc, #16]	; (80a07c0 <_ZN10CloudClass8variableIA13_cI6StringEEEbRKT_DpRKT0_+0x1c>)
        return CLOUD_FN(spark_variable(varKey, userVar, CloudVariableTypeString::value(), &extra), false);
 80a07ae:	2204      	movs	r2, #4
    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra;
        extra.size = sizeof(extra);
        extra.update = update_string_variable;
 80a07b0:	9301      	str	r3, [sp, #4]
        return CLOUD_FN(spark_variable(varKey, userVar, CloudVariableTypeString::value(), &extra), false);
 80a07b2:	466b      	mov	r3, sp
 80a07b4:	f000 fe84 	bl	80a14c0 <spark_variable>
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_VAR_KEY_LENGTH + 1,
            "\n\nIn Particle.variable, name must be " __XSTRING(USER_VAR_KEY_LENGTH) " characters or less\n\n");

        return _variable(name, args...);
    }
 80a07b8:	b003      	add	sp, #12
 80a07ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80a07be:	bf00      	nop
 80a07c0:	080a00b3 	.word	0x080a00b3

080a07c4 <setup>:
 * Description    : Setup
 * Input          : None
 * Output         : None
 *******************************************************************************/
void setup()
{
 80a07c4:	b510      	push	{r4, lr}
 80a07c6:	b08c      	sub	sp, #48	; 0x30

  // serial communications
  Serial.begin(9600);
 80a07c8:	f001 ff90 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a07cc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a07d0:	f001 ff72 	bl	80a26b8 <_ZN9USBSerial5beginEl>
  // Wait for a USB serial connection for up to 3 seconds
  //waitFor(Serial.isConnected, 3000);
  Serial.printlnf("System version: %s", System.version().c_str());
 80a07d4:	f001 ff8a 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a07d8:	4604      	mov	r4, r0
#define SYSTEM_VERSION_121RC1
#define SYSTEM_VERSION_121RC2
#define SYSTEM_VERSION_121RC3
#define SYSTEM_VERSION_121

typedef struct __attribute__((packed)) SystemVersionInfo
 80a07da:	231c      	movs	r3, #28
 80a07dc:	a80c      	add	r0, sp, #48	; 0x30
 80a07de:	f820 3d1c 	strh.w	r3, [r0, #-28]!
    static bool enableFeature(const WiFiTesterFeature feature);

    String version()
    {
        SystemVersionInfo info;
        system_version_info(&info, nullptr);
 80a07e2:	2100      	movs	r1, #0
 80a07e4:	f000 fe38 	bl	80a1458 <system_version_info>
        return String(info.versionString);
 80a07e8:	a907      	add	r1, sp, #28
 80a07ea:	a801      	add	r0, sp, #4
 80a07ec:	f001 fdce 	bl	80a238c <_ZN6StringC1EPK19__FlashStringHelper>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 80a07f0:	9b01      	ldr	r3, [sp, #4]
 80a07f2:	4a32      	ldr	r2, [pc, #200]	; (80a08bc <setup+0xf8>)
 80a07f4:	2101      	movs	r1, #1
 80a07f6:	4620      	mov	r0, r4
 80a07f8:	4c31      	ldr	r4, [pc, #196]	; (80a08c0 <setup+0xfc>)
 80a07fa:	f001 fd13 	bl	80a2224 <_ZN5Print11printf_implEbPKcz>
 80a07fe:	a801      	add	r0, sp, #4
 80a0800:	f001 fd7d 	bl	80a22fe <_ZN6StringD1Ev>
  Serial.printlnf("Firmware version: %s", firmwareVersion.c_str());
 80a0804:	f001 ff72 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a0808:	6823      	ldr	r3, [r4, #0]
 80a080a:	4a2e      	ldr	r2, [pc, #184]	; (80a08c4 <setup+0x100>)
 80a080c:	2101      	movs	r1, #1
 80a080e:	f001 fd09 	bl	80a2224 <_ZN5Print11printf_implEbPKcz>
  Serial.println("---------------");
 80a0812:	f001 ff6b 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a0816:	492c      	ldr	r1, [pc, #176]	; (80a08c8 <setup+0x104>)
 80a0818:	f001 fbef 	bl	80a1ffa <_ZN5Print7printlnEPKc>

  // particle variables
  Particle.variable("FW-Version", firmwareVersion);
 80a081c:	4621      	mov	r1, r4
 80a081e:	482b      	ldr	r0, [pc, #172]	; (80a08cc <setup+0x108>)
 80a0820:	f7ff ffc0 	bl	80a07a4 <_ZN10CloudClass8variableIA13_cI6StringEEEbRKT_DpRKT0_>
  Particle.variable("TempStatus", sensorStatus);
 80a0824:	492a      	ldr	r1, [pc, #168]	; (80a08d0 <setup+0x10c>)
 80a0826:	482b      	ldr	r0, [pc, #172]	; (80a08d4 <setup+0x110>)
 80a0828:	f7ff ffbc 	bl	80a07a4 <_ZN10CloudClass8variableIA13_cI6StringEEEbRKT_DpRKT0_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80a082c:	2300      	movs	r3, #0
 80a082e:	2209      	movs	r2, #9
 80a0830:	4929      	ldr	r1, [pc, #164]	; (80a08d8 <setup+0x114>)
 80a0832:	482a      	ldr	r0, [pc, #168]	; (80a08dc <setup+0x118>)
 80a0834:	f000 fe44 	bl	80a14c0 <spark_variable>
 80a0838:	2300      	movs	r3, #0
 80a083a:	2209      	movs	r2, #9
 80a083c:	4928      	ldr	r1, [pc, #160]	; (80a08e0 <setup+0x11c>)
 80a083e:	4829      	ldr	r0, [pc, #164]	; (80a08e4 <setup+0x120>)
 80a0840:	f000 fe3e 	bl	80a14c0 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a0844:	4c28      	ldr	r4, [pc, #160]	; (80a08e8 <setup+0x124>)
  Particle.variable("Temperature", &dTemperature, DOUBLE);
  Particle.variable("Humidity", &dHumidity, DOUBLE);
  Particle.variable("garageDoorState", garageDoorStateCloud);
 80a0846:	4929      	ldr	r1, [pc, #164]	; (80a08ec <setup+0x128>)
 80a0848:	4829      	ldr	r0, [pc, #164]	; (80a08f0 <setup+0x12c>)
 80a084a:	f7ff ffab 	bl	80a07a4 <_ZN10CloudClass8variableIA13_cI6StringEEEbRKT_DpRKT0_>
  Particle.variable("vehicleState", vehicleInGarageCloud);
 80a084e:	4929      	ldr	r1, [pc, #164]	; (80a08f4 <setup+0x130>)
 80a0850:	4829      	ldr	r0, [pc, #164]	; (80a08f8 <setup+0x134>)
 80a0852:	f7ff ffa7 	bl	80a07a4 <_ZN10CloudClass8variableIA13_cI6StringEEEbRKT_DpRKT0_>
 80a0856:	4a29      	ldr	r2, [pc, #164]	; (80a08fc <setup+0x138>)
 80a0858:	4929      	ldr	r1, [pc, #164]	; (80a0900 <setup+0x13c>)
 80a085a:	4620      	mov	r0, r4
 80a085c:	f000 ff66 	bl	80a172c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0860:	4a28      	ldr	r2, [pc, #160]	; (80a0904 <setup+0x140>)
 80a0862:	4929      	ldr	r1, [pc, #164]	; (80a0908 <setup+0x144>)
 80a0864:	4620      	mov	r0, r4
 80a0866:	f000 ff61 	bl	80a172c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  // particle functions
  Particle.function("garageTrigger", triggerGarage);
  Particle.function("automaticMode", automaticMode);

  // Definition of I/O-Pins
  pinMode(garageTrigger, OUTPUT);
 80a086a:	2101      	movs	r1, #1
 80a086c:	200a      	movs	r0, #10
 80a086e:	f002 f8bf 	bl	80a29f0 <pinMode>
  pinMode(statusLEDVehicle, OUTPUT);
 80a0872:	2101      	movs	r1, #1
 80a0874:	2007      	movs	r0, #7
 80a0876:	f002 f8bb 	bl	80a29f0 <pinMode>
  pinMode(statusLEDParticle, OUTPUT);
 80a087a:	2101      	movs	r1, #1
 80a087c:	2006      	movs	r0, #6
 80a087e:	f002 f8b7 	bl	80a29f0 <pinMode>

  // setting trigger and echo pin
  pinMode(usTrigger, OUTPUT);
 80a0882:	2101      	movs	r1, #1
 80a0884:	2003      	movs	r0, #3
 80a0886:	f002 f8b3 	bl	80a29f0 <pinMode>
  pinMode(usEcho, INPUT);
 80a088a:	2100      	movs	r1, #0
 80a088c:	2004      	movs	r0, #4
 80a088e:	f002 f8af 	bl	80a29f0 <pinMode>

  //setting door sensor pins
  pinMode(doorSensor1, INPUT_PULLDOWN);
 80a0892:	2103      	movs	r1, #3
 80a0894:	2000      	movs	r0, #0
 80a0896:	f002 f8ab 	bl	80a29f0 <pinMode>
  pinMode(doorSensor2, INPUT_PULLDOWN);
 80a089a:	2103      	movs	r1, #3
 80a089c:	2001      	movs	r0, #1
 80a089e:	f002 f8a7 	bl	80a29f0 <pinMode>

  // setting trigger pins to low during initialization
  digitalWrite(garageTrigger, LOW);
 80a08a2:	2100      	movs	r1, #0
 80a08a4:	200a      	movs	r0, #10
 80a08a6:	f002 f8b4 	bl	80a2a12 <digitalWrite>
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a08aa:	4b18      	ldr	r3, [pc, #96]	; (80a090c <setup+0x148>)
 80a08ac:	681b      	ldr	r3, [r3, #0]
 80a08ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80a08b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80a08b4:	8353      	strh	r3, [r2, #26]
  digitalWriteFast(usTrigger, LOW);
}
 80a08b6:	b00c      	add	sp, #48	; 0x30
 80a08b8:	bd10      	pop	{r4, pc}
 80a08ba:	bf00      	nop
 80a08bc:	080a6290 	.word	0x080a6290
 80a08c0:	20000414 	.word	0x20000414
 80a08c4:	080a62a3 	.word	0x080a62a3
 80a08c8:	080a62b8 	.word	0x080a62b8
 80a08cc:	080a62c8 	.word	0x080a62c8
 80a08d0:	20000424 	.word	0x20000424
 80a08d4:	080a62d3 	.word	0x080a62d3
 80a08d8:	20000300 	.word	0x20000300
 80a08dc:	080a611c 	.word	0x080a611c
 80a08e0:	20000308 	.word	0x20000308
 80a08e4:	080a62de 	.word	0x080a62de
 80a08e8:	080a1701 	.word	0x080a1701
 80a08ec:	200003f4 	.word	0x200003f4
 80a08f0:	080a62e7 	.word	0x080a62e7
 80a08f4:	200003e4 	.word	0x200003e4
 80a08f8:	080a62f7 	.word	0x080a62f7
 80a08fc:	080a6304 	.word	0x080a6304
 80a0900:	080a0129 	.word	0x080a0129
 80a0904:	080a6312 	.word	0x080a6312
 80a0908:	080a01b5 	.word	0x080a01b5
 80a090c:	2000040c 	.word	0x2000040c

080a0910 <_GLOBAL__sub_I_sensorStatus>:
  {

    // wifi connection not established
    blinkLED(statusLEDParticle, 500, 500);
  }
 80a0910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0914:	4b3f      	ldr	r3, [pc, #252]	; (80a0a14 <_GLOBAL__sub_I_sensorStatus+0x104>)
 80a0916:	b088      	sub	sp, #32
 80a0918:	2700      	movs	r7, #0
 80a091a:	701f      	strb	r7, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a091c:	f000 fc7a 	bl	80a1214 <HAL_Pin_Map>
 * Author   : Tim Hornikel
 * License  : GNU General Public License v3+
*******************************************************************************/

// Particle Cloud Variables
String sensorStatus = "Initialization";
 80a0920:	4e3d      	ldr	r6, [pc, #244]	; (80a0a18 <_GLOBAL__sub_I_sensorStatus+0x108>)
 80a0922:	4b3e      	ldr	r3, [pc, #248]	; (80a0a1c <_GLOBAL__sub_I_sensorStatus+0x10c>)
 80a0924:	f8df 8138 	ldr.w	r8, [pc, #312]	; 80a0a60 <_GLOBAL__sub_I_sensorStatus+0x150>
 80a0928:	6018      	str	r0, [r3, #0]
 80a092a:	4d3d      	ldr	r5, [pc, #244]	; (80a0a20 <_GLOBAL__sub_I_sensorStatus+0x110>)
 80a092c:	4c3d      	ldr	r4, [pc, #244]	; (80a0a24 <_GLOBAL__sub_I_sensorStatus+0x114>)
 80a092e:	4631      	mov	r1, r6
 80a0930:	4640      	mov	r0, r8
 80a0932:	f001 fd2b 	bl	80a238c <_ZN6StringC1EPK19__FlashStringHelper>
 80a0936:	4640      	mov	r0, r8
String firmwareVersion = "v0.3.1"; // Version MAJOR.MINOR.PATCH
 80a0938:	f8df 8128 	ldr.w	r8, [pc, #296]	; 80a0a64 <_GLOBAL__sub_I_sensorStatus+0x154>
 * Author   : Tim Hornikel
 * License  : GNU General Public License v3+
*******************************************************************************/

// Particle Cloud Variables
String sensorStatus = "Initialization";
 80a093c:	462a      	mov	r2, r5
 80a093e:	4621      	mov	r1, r4
 80a0940:	f002 f8ee 	bl	80a2b20 <__aeabi_atexit>
String firmwareVersion = "v0.3.1"; // Version MAJOR.MINOR.PATCH
 80a0944:	4938      	ldr	r1, [pc, #224]	; (80a0a28 <_GLOBAL__sub_I_sensorStatus+0x118>)
 80a0946:	4640      	mov	r0, r8
 80a0948:	f001 fd20 	bl	80a238c <_ZN6StringC1EPK19__FlashStringHelper>
 80a094c:	4640      	mov	r0, r8
String vehicleInGarageCloud = "Initialization";
 80a094e:	f8df 8118 	ldr.w	r8, [pc, #280]	; 80a0a68 <_GLOBAL__sub_I_sensorStatus+0x158>
 * License  : GNU General Public License v3+
*******************************************************************************/

// Particle Cloud Variables
String sensorStatus = "Initialization";
String firmwareVersion = "v0.3.1"; // Version MAJOR.MINOR.PATCH
 80a0952:	462a      	mov	r2, r5
 80a0954:	4621      	mov	r1, r4
 80a0956:	f002 f8e3 	bl	80a2b20 <__aeabi_atexit>
String vehicleInGarageCloud = "Initialization";
 80a095a:	4631      	mov	r1, r6
 80a095c:	4640      	mov	r0, r8
 80a095e:	f001 fd15 	bl	80a238c <_ZN6StringC1EPK19__FlashStringHelper>
 80a0962:	4640      	mov	r0, r8
String garageDoorStateCloud = "Initialization";
 80a0964:	f8df 8104 	ldr.w	r8, [pc, #260]	; 80a0a6c <_GLOBAL__sub_I_sensorStatus+0x15c>
*******************************************************************************/

// Particle Cloud Variables
String sensorStatus = "Initialization";
String firmwareVersion = "v0.3.1"; // Version MAJOR.MINOR.PATCH
String vehicleInGarageCloud = "Initialization";
 80a0968:	462a      	mov	r2, r5
 80a096a:	4621      	mov	r1, r4
 80a096c:	f002 f8d8 	bl	80a2b20 <__aeabi_atexit>
String garageDoorStateCloud = "Initialization";
 80a0970:	4631      	mov	r1, r6
 80a0972:	4640      	mov	r0, r8
 80a0974:	f001 fd0a 	bl	80a238c <_ZN6StringC1EPK19__FlashStringHelper>
 80a0978:	462a      	mov	r2, r5
 80a097a:	4621      	mov	r1, r4
 80a097c:	4640      	mov	r0, r8
 80a097e:	f002 f8cf 	bl	80a2b20 <__aeabi_atexit>
 *******************************************************************************/
void dht_wrapper(); // must be declared before the lib initialization

// Lib instantiate
// ref: https://www.sparkfun.com/datasheets/Sensors/Temperature/DHT22.pdf
PietteTech_DHT DHT(DHTPIN, DHTTYPE, dht_wrapper);
 80a0982:	2216      	movs	r2, #22
 80a0984:	2102      	movs	r1, #2
 80a0986:	4b29      	ldr	r3, [pc, #164]	; (80a0a2c <_GLOBAL__sub_I_sensorStatus+0x11c>)
 80a0988:	4829      	ldr	r0, [pc, #164]	; (80a0a30 <_GLOBAL__sub_I_sensorStatus+0x120>)
 80a098a:	f000 f956 	bl	80a0c3a <_ZN14PietteTech_DHTC1EhhPFvvE>
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

    int selectAntenna(WLanSelectAntenna_TypeDef antenna) {
        return wlan_select_antenna(antenna);
 80a098e:	2001      	movs	r0, #1
 80a0990:	f000 fd42 	bl	80a1418 <wlan_select_antenna>
 80a0994:	f000 fc26 	bl	80a11e4 <HAL_Timer_Get_Milli_Seconds>
const int statusLEDVehicle = D7;  // status LED for signalling if vehcile detected with sensor 1

const float tempOffset = 4.7; // temperat offset

// Declaration of time variables
unsigned long lastSync = millis();              // last synchronization of time in internet
 80a0998:	4b26      	ldr	r3, [pc, #152]	; (80a0a34 <_GLOBAL__sub_I_sensorStatus+0x124>)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a099a:	ae04      	add	r6, sp, #16
 80a099c:	6018      	str	r0, [r3, #0]
 80a099e:	f000 fc21 	bl	80a11e4 <HAL_Timer_Get_Milli_Seconds>
unsigned long previousMillisVehicle = millis(); // stores last time vehicle was detected
 80a09a2:	4b25      	ldr	r3, [pc, #148]	; (80a0a38 <_GLOBAL__sub_I_sensorStatus+0x128>)
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 80a09a4:	4c25      	ldr	r4, [pc, #148]	; (80a0a3c <_GLOBAL__sub_I_sensorStatus+0x12c>)
 80a09a6:	6018      	str	r0, [r3, #0]
 80a09a8:	f000 fc1c 	bl	80a11e4 <HAL_Timer_Get_Milli_Seconds>
unsigned long previousMillisUs = millis();      // stores last time ultrasonic sensors were updated
 80a09ac:	4b24      	ldr	r3, [pc, #144]	; (80a0a40 <_GLOBAL__sub_I_sensorStatus+0x130>)
 80a09ae:	aa02      	add	r2, sp, #8
 80a09b0:	6018      	str	r0, [r3, #0]
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a09b2:	4b24      	ldr	r3, [pc, #144]	; (80a0a44 <_GLOBAL__sub_I_sensorStatus+0x134>)
 80a09b4:	7127      	strb	r7, [r4, #4]
 80a09b6:	9304      	str	r3, [sp, #16]
 80a09b8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80a09bc:	4b22      	ldr	r3, [pc, #136]	; (80a0a48 <_GLOBAL__sub_I_sensorStatus+0x138>)
 80a09be:	e882 0003 	stmia.w	r2, {r0, r1}
 80a09c2:	6023      	str	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a09c4:	f104 030c 	add.w	r3, r4, #12
 80a09c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a09cc:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a09d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80a09d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80a09d8:	4b1c      	ldr	r3, [pc, #112]	; (80a0a4c <_GLOBAL__sub_I_sensorStatus+0x13c>)
 80a09da:	60a7      	str	r7, [r4, #8]
 80a09dc:	6163      	str	r3, [r4, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a09de:	69a3      	ldr	r3, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 80a09e0:	4a1b      	ldr	r2, [pc, #108]	; (80a0a50 <_GLOBAL__sub_I_sensorStatus+0x140>)
 80a09e2:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
 80a09e4:	4b1b      	ldr	r3, [pc, #108]	; (80a0a54 <_GLOBAL__sub_I_sensorStatus+0x144>)
 80a09e6:	491c      	ldr	r1, [pc, #112]	; (80a0a58 <_GLOBAL__sub_I_sensorStatus+0x148>)
 80a09e8:	61a3      	str	r3, [r4, #24]
 80a09ea:	2301      	movs	r3, #1
 80a09ec:	9300      	str	r3, [sp, #0]
 80a09ee:	9701      	str	r7, [sp, #4]
 80a09f0:	4623      	mov	r3, r4
 80a09f2:	f104 0008 	add.w	r0, r4, #8
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a09f6:	9706      	str	r7, [sp, #24]
 80a09f8:	f000 fbac 	bl	80a1154 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a09fc:	4630      	mov	r0, r6
 80a09fe:	f7ff fc2d 	bl	80a025c <_ZNSt14_Function_baseD1Ev>
// Declaration of time constants
unsigned long ONE_DAY_MILLIS(24 * 60 * 60 * 1000);  // 24 hours
unsigned long vehicleDetectionThreshold(60 * 1000); // threshold of 60s for vehicle detection

// Setup of timer for garage door notification
Timer garageDoorTimer(15 * 60 * 1000, garageDoorNotification, true); // notification after 15 min
 80a0a02:	462a      	mov	r2, r5
 80a0a04:	4915      	ldr	r1, [pc, #84]	; (80a0a5c <_GLOBAL__sub_I_sensorStatus+0x14c>)
 80a0a06:	4620      	mov	r0, r4
 80a0a08:	f002 f88a 	bl	80a2b20 <__aeabi_atexit>
  {

    // wifi connection not established
    blinkLED(statusLEDParticle, 500, 500);
  }
 80a0a0c:	b008      	add	sp, #32
 80a0a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0a12:	bf00      	nop
 80a0a14:	200003d8 	.word	0x200003d8
 80a0a18:	080a6320 	.word	0x080a6320
 80a0a1c:	2000040c 	.word	0x2000040c
 80a0a20:	200003d4 	.word	0x200003d4
 80a0a24:	080a22ff 	.word	0x080a22ff
 80a0a28:	080a632f 	.word	0x080a632f
 80a0a2c:	080a00d5 	.word	0x080a00d5
 80a0a30:	20000438 	.word	0x20000438
 80a0a34:	20000408 	.word	0x20000408
 80a0a38:	200003e0 	.word	0x200003e0
 80a0a3c:	20000498 	.word	0x20000498
 80a0a40:	20000404 	.word	0x20000404
 80a0a44:	080a0225 	.word	0x080a0225
 80a0a48:	080a605c 	.word	0x080a605c
 80a0a4c:	080a00bb 	.word	0x080a00bb
 80a0a50:	080a00ed 	.word	0x080a00ed
 80a0a54:	080a00b7 	.word	0x080a00b7
 80a0a58:	000dbba0 	.word	0x000dbba0
 80a0a5c:	080a028d 	.word	0x080a028d
 80a0a60:	20000424 	.word	0x20000424
 80a0a64:	20000414 	.word	0x20000414
 80a0a68:	200003e4 	.word	0x200003e4
 80a0a6c:	200003f4 	.word	0x200003f4

080a0a70 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE9_M_invokeERKSt9_Any_data>:
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0a70:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a0a72:	685a      	ldr	r2, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0a74:	6898      	ldr	r0, [r3, #8]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a0a76:	f012 0f01 	tst.w	r2, #1
 80a0a7a:	ea4f 0262 	mov.w	r2, r2, asr #1
 80a0a7e:	bf18      	it	ne
 80a0a80:	5881      	ldrne	r1, [r0, r2]
 80a0a82:	681b      	ldr	r3, [r3, #0]
 80a0a84:	4410      	add	r0, r2
 80a0a86:	bf18      	it	ne
 80a0a88:	58cb      	ldrne	r3, [r1, r3]
 80a0a8a:	4718      	bx	r3

080a0a8c <_ZN14PietteTech_DHT12_isrCallbackEv>:
 * NOTE:  isrCallback is only here for backwards compatibility with v0.3 and earlier
 *        it is no longer used or needed
 */
void PietteTech_DHT::isrCallback() { }

void PietteTech_DHT::_isrCallback() {
 80a0a8c:	b570      	push	{r4, r5, r6, lr}
 80a0a8e:	4604      	mov	r4, r0
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0a90:	f000 fba0 	bl	80a11d4 <HAL_Timer_Get_Micro_Seconds>
  unsigned long newUs = micros();
  unsigned long delta = (newUs - _us);
  _us = newUs;

  if (delta > 6000) {
 80a0a94:	f241 7270 	movw	r2, #6000	; 0x1770
 */
void PietteTech_DHT::isrCallback() { }

void PietteTech_DHT::_isrCallback() {
  unsigned long newUs = micros();
  unsigned long delta = (newUs - _us);
 80a0a98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  _us = newUs;
 80a0a9a:	63a0      	str	r0, [r4, #56]	; 0x38
 */
void PietteTech_DHT::isrCallback() { }

void PietteTech_DHT::_isrCallback() {
  unsigned long newUs = micros();
  unsigned long delta = (newUs - _us);
 80a0a9c:	1ac3      	subs	r3, r0, r3
  _us = newUs;

  if (delta > 6000) {
 80a0a9e:	4293      	cmp	r3, r2
 80a0aa0:	d90b      	bls.n	80a0aba <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
    _status = DHTLIB_ERROR_ISR_TIMEOUT;
 80a0aa2:	f06f 0301 	mvn.w	r3, #1
 80a0aa6:	62e3      	str	r3, [r4, #44]	; 0x2c
    _state = STOPPED;
 80a0aa8:	2303      	movs	r3, #3
 80a0aaa:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    detachInterrupt(_sigPin);
 80a0aae:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
    }
    break;
  default:
    break;
  }
}
 80a0ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _us = newUs;

  if (delta > 6000) {
    _status = DHTLIB_ERROR_ISR_TIMEOUT;
    _state = STOPPED;
    detachInterrupt(_sigPin);
 80a0ab6:	f001 b923 	b.w	80a1d00 <_Z15detachInterruptt>
    return;
  }
  switch (_state) {
 80a0aba:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 80a0abe:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 80a0ac2:	b112      	cbz	r2, 80a0aca <_ZN14PietteTech_DHT12_isrCallbackEv+0x3e>
 80a0ac4:	2901      	cmp	r1, #1
 80a0ac6:	d020      	beq.n	80a0b0a <_ZN14PietteTech_DHT12_isrCallbackEv+0x7e>
 80a0ac8:	bd70      	pop	{r4, r5, r6, pc}
  case RESPONSE:            // Spec: 80us LOW followed by 80us HIGH
    if (delta < 65) {      // Spec: 20-200us to first falling edge of response
 80a0aca:	2b40      	cmp	r3, #64	; 0x40
 80a0acc:	d803      	bhi.n	80a0ad6 <_ZN14PietteTech_DHT12_isrCallbackEv+0x4a>
      _us -= delta;
 80a0ace:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80a0ad0:	1ad3      	subs	r3, r2, r3
 80a0ad2:	63a3      	str	r3, [r4, #56]	; 0x38
      break; //do nothing, it started the response signal
 80a0ad4:	bd70      	pop	{r4, r5, r6, pc}
    } if (125 < delta && delta < 200) {
 80a0ad6:	f1a3 027e 	sub.w	r2, r3, #126	; 0x7e
 80a0ada:	2a49      	cmp	r2, #73	; 0x49
 80a0adc:	b2dd      	uxtb	r5, r3
 80a0ade:	d805      	bhi.n	80a0aec <_ZN14PietteTech_DHT12_isrCallbackEv+0x60>
#if defined(DHT_DEBUG_TIMING)
      *_e++ = delta;  // record the edge -> edge time
 80a0ae0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80a0ae2:	1c5a      	adds	r2, r3, #1
 80a0ae4:	6422      	str	r2, [r4, #64]	; 0x40
 80a0ae6:	701d      	strb	r5, [r3, #0]
#endif
      _state = DATA;
 80a0ae8:	2301      	movs	r3, #1
 80a0aea:	e071      	b.n	80a0bd0 <_ZN14PietteTech_DHT12_isrCallbackEv+0x144>
    }
    else {
      detachInterrupt(_sigPin);
 80a0aec:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80a0af0:	f001 f906 	bl	80a1d00 <_Z15detachInterruptt>
      _status = DHTLIB_ERROR_RESPONSE_TIMEOUT;
      _state = STOPPED;
#if defined(DHT_DEBUG_TIMING)
      *_e++ = delta;  // record the edge -> edge time
 80a0af4:	6c22      	ldr	r2, [r4, #64]	; 0x40
#endif
      _state = DATA;
    }
    else {
      detachInterrupt(_sigPin);
      _status = DHTLIB_ERROR_RESPONSE_TIMEOUT;
 80a0af6:	f06f 0302 	mvn.w	r3, #2
 80a0afa:	62e3      	str	r3, [r4, #44]	; 0x2c
      _state = STOPPED;
 80a0afc:	2303      	movs	r3, #3
 80a0afe:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
#if defined(DHT_DEBUG_TIMING)
      *_e++ = delta;  // record the edge -> edge time
 80a0b02:	1c53      	adds	r3, r2, #1
 80a0b04:	6423      	str	r3, [r4, #64]	; 0x40
 80a0b06:	7015      	strb	r5, [r2, #0]
 80a0b08:	bd70      	pop	{r4, r5, r6, pc}
#endif
    }
    break;
  case DATA:          // Spec: 50us low followed by high of 26-28us = 0, 70us = 1
    if (60 < delta && delta < 155) { //valid in timing
 80a0b0a:	f1a3 023d 	sub.w	r2, r3, #61	; 0x3d
 80a0b0e:	2a5d      	cmp	r2, #93	; 0x5d
 80a0b10:	d84f      	bhi.n	80a0bb2 <_ZN14PietteTech_DHT12_isrCallbackEv+0x126>
      _bits[_idx] <<= 1; // shift the data
 80a0b12:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
      if (delta > 110) //is a one
 80a0b16:	2b6e      	cmp	r3, #110	; 0x6e
#endif
    }
    break;
  case DATA:          // Spec: 50us low followed by high of 26-28us = 0, 70us = 1
    if (60 < delta && delta < 155) { //valid in timing
      _bits[_idx] <<= 1; // shift the data
 80a0b18:	4421      	add	r1, r4
 80a0b1a:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 80a0b1e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a0b22:	b2d2      	uxtb	r2, r2
 80a0b24:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
      if (delta > 110) //is a one
 80a0b28:	d908      	bls.n	80a0b3c <_ZN14PietteTech_DHT12_isrCallbackEv+0xb0>
        _bits[_idx] |= 1;
 80a0b2a:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 80a0b2e:	4422      	add	r2, r4
 80a0b30:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
 80a0b34:	f041 0101 	orr.w	r1, r1, #1
 80a0b38:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
#if defined(DHT_DEBUG_TIMING)
      *_e++ = delta;  // record the edge -> edge time
 80a0b3c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a0b3e:	b2db      	uxtb	r3, r3
 80a0b40:	1c51      	adds	r1, r2, #1
 80a0b42:	6421      	str	r1, [r4, #64]	; 0x40
 80a0b44:	7013      	strb	r3, [r2, #0]
#endif
      if (_cnt == 0) { // we have completed the byte, go to next
 80a0b46:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80a0b4a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80a0b4e:	bb4b      	cbnz	r3, 80a0ba4 <_ZN14PietteTech_DHT12_isrCallbackEv+0x118>
        _cnt = 7; // restart at MSB
 80a0b50:	2307      	movs	r3, #7
 80a0b52:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if (++_idx == 5) { // go to next byte, if we have got 5 bytes stop.
 80a0b56:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80a0b5a:	3301      	adds	r3, #1
 80a0b5c:	b2db      	uxtb	r3, r3
 80a0b5e:	2b05      	cmp	r3, #5
 80a0b60:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 80a0b64:	d136      	bne.n	80a0bd4 <_ZN14PietteTech_DHT12_isrCallbackEv+0x148>
          detachInterrupt(_sigPin);
 80a0b66:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80a0b6a:	f001 f8c9 	bl	80a1d00 <_Z15detachInterruptt>
          // Verify checksum
          uint8_t sum = _bits[0] + _bits[1] + _bits[2] + _bits[3];
 80a0b6e:	f894 6030 	ldrb.w	r6, [r4, #48]	; 0x30
 80a0b72:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80a0b76:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
          if (_bits[4] != sum) {
 80a0b7a:	4432      	add	r2, r6
      if (_cnt == 0) { // we have completed the byte, go to next
        _cnt = 7; // restart at MSB
        if (++_idx == 5) { // go to next byte, if we have got 5 bytes stop.
          detachInterrupt(_sigPin);
          // Verify checksum
          uint8_t sum = _bits[0] + _bits[1] + _bits[2] + _bits[3];
 80a0b7c:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
          if (_bits[4] != sum) {
 80a0b80:	4413      	add	r3, r2
 80a0b82:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 80a0b86:	4403      	add	r3, r0
 80a0b88:	b2db      	uxtb	r3, r3
 80a0b8a:	428b      	cmp	r3, r1
 80a0b8c:	d002      	beq.n	80a0b94 <_ZN14PietteTech_DHT12_isrCallbackEv+0x108>
            _status = DHTLIB_ERROR_CHECKSUM;
 80a0b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a0b92:	e01b      	b.n	80a0bcc <_ZN14PietteTech_DHT12_isrCallbackEv+0x140>
            _state = STOPPED;
          }
          else {
            _status = DHTLIB_OK;
            _state = ACQUIRED;
 80a0b94:	2302      	movs	r3, #2
          if (_bits[4] != sum) {
            _status = DHTLIB_ERROR_CHECKSUM;
            _state = STOPPED;
          }
          else {
            _status = DHTLIB_OK;
 80a0b96:	62e5      	str	r5, [r4, #44]	; 0x2c
            _state = ACQUIRED;
 80a0b98:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
            _convert = true;
 80a0b9c:	2301      	movs	r3, #1
 80a0b9e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80a0ba2:	bd70      	pop	{r4, r5, r6, pc}
          }
          break;
        }
      }
      else _cnt--;
 80a0ba4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80a0ba8:	3b01      	subs	r3, #1
 80a0baa:	b2db      	uxtb	r3, r3
 80a0bac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 80a0bb0:	bd70      	pop	{r4, r5, r6, pc}
 80a0bb2:	6c60      	ldr	r0, [r4, #68]	; 0x44
    }
    else if (delta < 10) {
 80a0bb4:	2b09      	cmp	r3, #9
      detachInterrupt(_sigPin);
 80a0bb6:	b280      	uxth	r0, r0
          break;
        }
      }
      else _cnt--;
    }
    else if (delta < 10) {
 80a0bb8:	d804      	bhi.n	80a0bc4 <_ZN14PietteTech_DHT12_isrCallbackEv+0x138>
      detachInterrupt(_sigPin);
 80a0bba:	f001 f8a1 	bl	80a1d00 <_Z15detachInterruptt>
      _status = DHTLIB_ERROR_DELTA;
 80a0bbe:	f06f 0305 	mvn.w	r3, #5
 80a0bc2:	e003      	b.n	80a0bcc <_ZN14PietteTech_DHT12_isrCallbackEv+0x140>
      _state = STOPPED;
    }
    else {
      detachInterrupt(_sigPin);
 80a0bc4:	f001 f89c 	bl	80a1d00 <_Z15detachInterruptt>
      _status = DHTLIB_ERROR_DATA_TIMEOUT;
 80a0bc8:	f06f 0303 	mvn.w	r3, #3
 80a0bcc:	62e3      	str	r3, [r4, #44]	; 0x2c
      _state = STOPPED;
 80a0bce:	2303      	movs	r3, #3
 80a0bd0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 80a0bd4:	bd70      	pop	{r4, r5, r6, pc}

080a0bd6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0bd6:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0bd8:	b538      	push	{r3, r4, r5, lr}
 80a0bda:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0bdc:	d005      	beq.n	80a0bea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
 80a0bde:	2a03      	cmp	r2, #3
 80a0be0:	d00f      	beq.n	80a0c02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2c>
 80a0be2:	2a01      	cmp	r2, #1
 80a0be4:	d111      	bne.n	80a0c0a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0be6:	680b      	ldr	r3, [r1, #0]
 80a0be8:	e009      	b.n	80a0bfe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0bea:	200c      	movs	r0, #12
 80a0bec:	680d      	ldr	r5, [r1, #0]
 80a0bee:	f7ff fa54 	bl	80a009a <_Znwj>
 80a0bf2:	4603      	mov	r3, r0
 80a0bf4:	b118      	cbz	r0, 80a0bfe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
 80a0bf6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80a0bfa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80a0bfe:	6023      	str	r3, [r4, #0]
 80a0c00:	e003      	b.n	80a0c0a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0c02:	210c      	movs	r1, #12
 80a0c04:	6800      	ldr	r0, [r0, #0]
 80a0c06:	f001 ff90 	bl	80a2b2a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0c0a:	2000      	movs	r0, #0
 80a0c0c:	bd38      	pop	{r3, r4, r5, pc}

080a0c0e <_ZN14PietteTech_DHT5beginEhhPFvvE>:

/*
 * NOTE:  callback_wrapper is only here for backwards compatibility with v0.3 and earlier
 *        it is no longer used or needed
 */
void PietteTech_DHT::begin(uint8_t sigPin, uint8_t dht_type, void(*callback_wrapper)()) {
 80a0c0e:	b538      	push	{r3, r4, r5, lr}
 80a0c10:	4604      	mov	r4, r0
  _sigPin = sigPin;
  _type = dht_type;

  pinMode(sigPin, OUTPUT);
 80a0c12:	b28d      	uxth	r5, r1
/*
 * NOTE:  callback_wrapper is only here for backwards compatibility with v0.3 and earlier
 *        it is no longer used or needed
 */
void PietteTech_DHT::begin(uint8_t sigPin, uint8_t dht_type, void(*callback_wrapper)()) {
  _sigPin = sigPin;
 80a0c14:	6441      	str	r1, [r0, #68]	; 0x44
  _type = dht_type;
 80a0c16:	6482      	str	r2, [r0, #72]	; 0x48

  pinMode(sigPin, OUTPUT);
 80a0c18:	2101      	movs	r1, #1
 80a0c1a:	4628      	mov	r0, r5
 80a0c1c:	f001 fee8 	bl	80a29f0 <pinMode>
  digitalWrite(sigPin, HIGH);
 80a0c20:	2101      	movs	r1, #1
 80a0c22:	4628      	mov	r0, r5
 80a0c24:	f001 fef5 	bl	80a2a12 <digitalWrite>
  _lastreadtime = 0;
 80a0c28:	2300      	movs	r3, #0
 80a0c2a:	64e3      	str	r3, [r4, #76]	; 0x4c
  _state = STOPPED;
 80a0c2c:	2303      	movs	r3, #3
 80a0c2e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  _status = DHTLIB_ERROR_NOTSTARTED;
 80a0c32:	f06f 0306 	mvn.w	r3, #6
 80a0c36:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a0c38:	bd38      	pop	{r3, r4, r5, pc}

080a0c3a <_ZN14PietteTech_DHTC1EhhPFvvE>:

/*
 * NOTE:  callback_wrapper is only here for backwards compatibility with v0.3 and earlier
 *        it is no longer used or needed
 */
PietteTech_DHT::PietteTech_DHT(uint8_t sigPin, uint8_t dht_type, void(*callback_wrapper)()) {
 80a0c3a:	b510      	push	{r4, lr}
 80a0c3c:	4604      	mov	r4, r0
  begin(sigPin, dht_type);
 80a0c3e:	2300      	movs	r3, #0
 80a0c40:	f7ff ffe5 	bl	80a0c0e <_ZN14PietteTech_DHT5beginEhhPFvvE>
  _firstreading = true;
 80a0c44:	2301      	movs	r3, #1
 80a0c46:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80a0c4a:	4620      	mov	r0, r4
 80a0c4c:	bd10      	pop	{r4, pc}
	...

080a0c50 <_ZN14PietteTech_DHT7acquireEv>:
  _lastreadtime = 0;
  _state = STOPPED;
  _status = DHTLIB_ERROR_NOTSTARTED;
}

int PietteTech_DHT::acquire() {
 80a0c50:	b570      	push	{r4, r5, r6, lr}
 80a0c52:	4604      	mov	r4, r0
 80a0c54:	b086      	sub	sp, #24
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0c56:	f000 fac5 	bl	80a11e4 <HAL_Timer_Get_Milli_Seconds>
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading
  unsigned long currenttime = millis();
  if (!_firstreading && ((currenttime - _lastreadtime) < 2000)) {
 80a0c5a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80a0c5e:	b923      	cbnz	r3, 80a0c6a <_ZN14PietteTech_DHT7acquireEv+0x1a>
 80a0c60:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80a0c62:	1ac3      	subs	r3, r0, r3
 80a0c64:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80a0c68:	d30a      	bcc.n	80a0c80 <_ZN14PietteTech_DHT7acquireEv+0x30>
    // return last correct measurement, (this read time - last read time) < device limit
    return DHTLIB_ACQUIRED;
  }

  if (_state == STOPPED || _state == ACQUIRED) {
 80a0c6a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80a0c6e:	2b03      	cmp	r3, #3
 80a0c70:	d008      	beq.n	80a0c84 <_ZN14PietteTech_DHT7acquireEv+0x34>
 80a0c72:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80a0c76:	2b02      	cmp	r3, #2
 80a0c78:	d004      	beq.n	80a0c84 <_ZN14PietteTech_DHT7acquireEv+0x34>
    attachInterrupt(_sigPin, &PietteTech_DHT::_isrCallback, this, FALLING);

    return DHTLIB_ACQUIRING;
  }
  else
    return DHTLIB_ERROR_ACQUIRING;
 80a0c7a:	f06f 0004 	mvn.w	r0, #4
 80a0c7e:	e05f      	b.n	80a0d40 <_ZN14PietteTech_DHT7acquireEv+0xf0>
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading
  unsigned long currenttime = millis();
  if (!_firstreading && ((currenttime - _lastreadtime) < 2000)) {
    // return last correct measurement, (this read time - last read time) < device limit
    return DHTLIB_ACQUIRED;
 80a0c80:	2002      	movs	r0, #2
 80a0c82:	e05d      	b.n	80a0d40 <_ZN14PietteTech_DHT7acquireEv+0xf0>

  if (_state == STOPPED || _state == ACQUIRED) {
    /*
     * Setup the initial state machine
     */
    _firstreading = false;
 80a0c84:	2300      	movs	r3, #0

#if defined(DHT_DEBUG_TIMING)
    /*
     * Clear the debug timings array
     */
    for (int i = 0; i < 41; i++) _edges[i] = 0;
 80a0c86:	461a      	mov	r2, r3

  if (_state == STOPPED || _state == ACQUIRED) {
    /*
     * Setup the initial state machine
     */
    _firstreading = false;
 80a0c88:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    _lastreadtime = currenttime;
 80a0c8c:	64e0      	str	r0, [r4, #76]	; 0x4c
    _state = RESPONSE;
 80a0c8e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29

#if defined(DHT_DEBUG_TIMING)
    /*
     * Clear the debug timings array
     */
    for (int i = 0; i < 41; i++) _edges[i] = 0;
 80a0c92:	54e2      	strb	r2, [r4, r3]
 80a0c94:	3301      	adds	r3, #1
 80a0c96:	2b29      	cmp	r3, #41	; 0x29
 80a0c98:	f04f 0500 	mov.w	r5, #0
 80a0c9c:	d1f9      	bne.n	80a0c92 <_ZN14PietteTech_DHT7acquireEv+0x42>

    /*
     * Set the initial values in the buffer and variables
     */
    for (int i = 0; i < 5; i++) _bits[i] = 0;
    _cnt = 7;
 80a0c9e:	2307      	movs	r3, #7
#endif

    /*
     * Set the initial values in the buffer and variables
     */
    for (int i = 0; i < 5; i++) _bits[i] = 0;
 80a0ca0:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
 80a0ca4:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 80a0ca8:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
 80a0cac:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
 80a0cb0:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    _cnt = 7;
 80a0cb4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    _idx = 0;
    _hum = 0;
 80a0cb8:	2300      	movs	r3, #0
 80a0cba:	6563      	str	r3, [r4, #84]	; 0x54
    _temp = 0;
 80a0cbc:	65a3      	str	r3, [r4, #88]	; 0x58

    /*
     * Toggle the digital output to trigger the DHT device
     * to send us temperature and humidity data
     */
    pinMode(_sigPin, OUTPUT);
 80a0cbe:	2101      	movs	r1, #1
 80a0cc0:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
#if defined(DHT_DEBUG_TIMING)
    /*
     * Clear the debug timings array
     */
    for (int i = 0; i < 41; i++) _edges[i] = 0;
    _e = &_edges[0];
 80a0cc4:	6424      	str	r4, [r4, #64]	; 0x40
    /*
     * Set the initial values in the buffer and variables
     */
    for (int i = 0; i < 5; i++) _bits[i] = 0;
    _cnt = 7;
    _idx = 0;
 80a0cc6:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36

    /*
     * Toggle the digital output to trigger the DHT device
     * to send us temperature and humidity data
     */
    pinMode(_sigPin, OUTPUT);
 80a0cca:	f001 fe91 	bl	80a29f0 <pinMode>
    digitalWrite(_sigPin, LOW);
 80a0cce:	4629      	mov	r1, r5
 80a0cd0:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80a0cd4:	f001 fe9d 	bl	80a2a12 <digitalWrite>
    if (_type == DHT11)
 80a0cd8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80a0cda:	2b0b      	cmp	r3, #11
 80a0cdc:	d103      	bne.n	80a0ce6 <_ZN14PietteTech_DHT7acquireEv+0x96>
      delay(18);                  // DHT11 Spec: 18ms min
 80a0cde:	2012      	movs	r0, #18
 80a0ce0:	f000 fcc6 	bl	80a1670 <delay>
 80a0ce4:	e003      	b.n	80a0cee <_ZN14PietteTech_DHT7acquireEv+0x9e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a0ce6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80a0cea:	f000 fa6b 	bl	80a11c4 <HAL_Delay_Microseconds>
    else
      delayMicroseconds(1500);    // DHT22 Spec: 0.8-20ms, 1ms typ
    pinMode(_sigPin, INPUT);        // Note Hi-Z mode with pullup resistor
 80a0cee:	2100      	movs	r1, #0
 80a0cf0:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80a0cf4:	f001 fe7c 	bl	80a29f0 <pinMode>

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0cf8:	f000 fa6c 	bl	80a11d4 <HAL_Timer_Get_Micro_Seconds>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0cfc:	2500      	movs	r5, #0
                                    // will keep this high until the DHT responds.
    /*
     * Attach the interrupt handler to receive the data once the DHT
     * starts to send us data
     */
    _us = micros();
 80a0cfe:	63a0      	str	r0, [r4, #56]	; 0x38
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0d00:	200c      	movs	r0, #12
    attachInterrupt(_sigPin, &PietteTech_DHT::_isrCallback, this, FALLING);
 80a0d02:	f8b4 6044 	ldrh.w	r6, [r4, #68]	; 0x44
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0d06:	9504      	str	r5, [sp, #16]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0d08:	f7ff f9c7 	bl	80a009a <_Znwj>
 80a0d0c:	b118      	cbz	r0, 80a0d16 <_ZN14PietteTech_DHT7acquireEv+0xc6>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 80a0d0e:	4b0d      	ldr	r3, [pc, #52]	; (80a0d44 <_ZN14PietteTech_DHT7acquireEv+0xf4>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0d10:	6084      	str	r4, [r0, #8]
 80a0d12:	e880 0028 	stmia.w	r0, {r3, r5}
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0d16:	4b0c      	ldr	r3, [pc, #48]	; (80a0d48 <_ZN14PietteTech_DHT7acquireEv+0xf8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0d18:	9002      	str	r0, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0d1a:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80a0d1c:	4b0b      	ldr	r3, [pc, #44]	; (80a0d4c <_ZN14PietteTech_DHT7acquireEv+0xfc>)
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
 80a0d1e:	2202      	movs	r2, #2
 80a0d20:	9304      	str	r3, [sp, #16]
 80a0d22:	2300      	movs	r3, #0
 80a0d24:	9300      	str	r3, [sp, #0]
 80a0d26:	a902      	add	r1, sp, #8
 80a0d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a0d2c:	4630      	mov	r0, r6
 80a0d2e:	f001 f82b 	bl	80a1d88 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a0d32:	9b04      	ldr	r3, [sp, #16]
 80a0d34:	b11b      	cbz	r3, 80a0d3e <_ZN14PietteTech_DHT7acquireEv+0xee>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0d36:	a902      	add	r1, sp, #8
 80a0d38:	2203      	movs	r2, #3
 80a0d3a:	4608      	mov	r0, r1
 80a0d3c:	4798      	blx	r3
 80a0d3e:	2001      	movs	r0, #1

    return DHTLIB_ACQUIRING;
  }
  else
    return DHTLIB_ERROR_ACQUIRING;
}
 80a0d40:	b006      	add	sp, #24
 80a0d42:	bd70      	pop	{r4, r5, r6, pc}
 80a0d44:	080a0a8d 	.word	0x080a0a8d
 80a0d48:	080a0a71 	.word	0x080a0a71
 80a0d4c:	080a0bd7 	.word	0x080a0bd7

080a0d50 <_ZN14PietteTech_DHT11isrCallbackEv>:

/*
 * NOTE:  isrCallback is only here for backwards compatibility with v0.3 and earlier
 *        it is no longer used or needed
 */
void PietteTech_DHT::isrCallback() { }
 80a0d50:	4770      	bx	lr
 80a0d52:	0000      	movs	r0, r0
 80a0d54:	0000      	movs	r0, r0
	...

080a0d58 <_ZN14PietteTech_DHT7convertEv>:
  default:
    break;
  }
}

void PietteTech_DHT::convert() {
 80a0d58:	b510      	push	{r4, lr}
  // Calculate the temperature and humidity based on the sensor type
  switch (_type) {
 80a0d5a:	6c83      	ldr	r3, [r0, #72]	; 0x48
  default:
    break;
  }
}

void PietteTech_DHT::convert() {
 80a0d5c:	4604      	mov	r4, r0
  // Calculate the temperature and humidity based on the sensor type
  switch (_type) {
 80a0d5e:	2b0b      	cmp	r3, #11
 80a0d60:	d030      	beq.n	80a0dc4 <_ZN14PietteTech_DHT7convertEv+0x6c>
 80a0d62:	db39      	blt.n	80a0dd8 <_ZN14PietteTech_DHT7convertEv+0x80>
 80a0d64:	3b15      	subs	r3, #21
 80a0d66:	2b01      	cmp	r3, #1
 80a0d68:	d836      	bhi.n	80a0dd8 <_ZN14PietteTech_DHT7convertEv+0x80>
    _hum = _bits[0];
    _temp = _bits[2];
    break;
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
 80a0d6a:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 80a0d6e:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80a0d72:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80a0d76:	b280      	uxth	r0, r0
 80a0d78:	f003 fdf6 	bl	80a4968 <__aeabi_i2d>
 80a0d7c:	a318      	add	r3, pc, #96	; (adr r3, 80a0de0 <_ZN14PietteTech_DHT7convertEv+0x88>)
 80a0d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0d82:	f003 fe57 	bl	80a4a34 <__aeabi_dmul>
 80a0d86:	f004 f94d 	bl	80a5024 <__aeabi_d2f>
    _temp = (_bits[2] & 0x80 ?
 80a0d8a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    _hum = _bits[0];
    _temp = _bits[2];
    break;
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
 80a0d8e:	6560      	str	r0, [r4, #84]	; 0x54
    _temp = (_bits[2] & 0x80 ?
      -word(_bits[2] & 0x7F, _bits[3]) :
 80a0d90:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
      word(_bits[2], _bits[3])) * 0.1;
 80a0d94:	f013 0f80 	tst.w	r3, #128	; 0x80
    break;
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
    _temp = (_bits[2] & 0x80 ?
      -word(_bits[2] & 0x7F, _bits[3]) :
 80a0d98:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
      word(_bits[2], _bits[3])) * 0.1;
 80a0d9c:	bf1b      	ittet	ne
 80a0d9e:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
 80a0da2:	eb03 2000 	addne.w	r0, r3, r0, lsl #8
 80a0da6:	eb03 2000 	addeq.w	r0, r3, r0, lsl #8
 80a0daa:	4240      	negne	r0, r0
 80a0dac:	bf08      	it	eq
 80a0dae:	b280      	uxtheq	r0, r0
 80a0db0:	f003 fdda 	bl	80a4968 <__aeabi_i2d>
 80a0db4:	a30a      	add	r3, pc, #40	; (adr r3, 80a0de0 <_ZN14PietteTech_DHT7convertEv+0x88>)
 80a0db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0dba:	f003 fe3b 	bl	80a4a34 <__aeabi_dmul>
 80a0dbe:	f004 f931 	bl	80a5024 <__aeabi_d2f>
 80a0dc2:	e008      	b.n	80a0dd6 <_ZN14PietteTech_DHT7convertEv+0x7e>

void PietteTech_DHT::convert() {
  // Calculate the temperature and humidity based on the sensor type
  switch (_type) {
  case DHT11:
    _hum = _bits[0];
 80a0dc4:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 80a0dc8:	f004 fa32 	bl	80a5230 <__aeabi_ui2f>
 80a0dcc:	6560      	str	r0, [r4, #84]	; 0x54
    _temp = _bits[2];
 80a0dce:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 80a0dd2:	f004 fa2d 	bl	80a5230 <__aeabi_ui2f>
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
    _temp = (_bits[2] & 0x80 ?
      -word(_bits[2] & 0x7F, _bits[3]) :
      word(_bits[2], _bits[3])) * 0.1;
 80a0dd6:	65a0      	str	r0, [r4, #88]	; 0x58
    break;
  }
  _convert = false;
 80a0dd8:	2300      	movs	r3, #0
 80a0dda:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80a0dde:	bd10      	pop	{r4, pc}
 80a0de0:	9999999a 	.word	0x9999999a
 80a0de4:	3fb99999 	.word	0x3fb99999

080a0de8 <_ZN14PietteTech_DHT9acquiringEv>:
}

bool PietteTech_DHT::acquiring() {
  if (_state != ACQUIRED && _state != STOPPED)
 80a0de8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a0dec:	2b02      	cmp	r3, #2
 80a0dee:	d005      	beq.n	80a0dfc <_ZN14PietteTech_DHT9acquiringEv+0x14>
 80a0df0:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 80a0df4:	3803      	subs	r0, #3
 80a0df6:	bf18      	it	ne
 80a0df8:	2001      	movne	r0, #1
 80a0dfa:	4770      	bx	lr
    return true;
  return false;
 80a0dfc:	2000      	movs	r0, #0
}
 80a0dfe:	4770      	bx	lr

080a0e00 <_ZN14PietteTech_DHT9getStatusEv>:

int PietteTech_DHT::getStatus() {
  return _status;
 80a0e00:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
 80a0e02:	4770      	bx	lr

080a0e04 <_ZN14PietteTech_DHT10getCelsiusEv>:

float PietteTech_DHT::getCelsius() {
 80a0e04:	b510      	push	{r4, lr}
  DHT_CHECK_STATE;
 80a0e06:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29

int PietteTech_DHT::getStatus() {
  return _status;
}

float PietteTech_DHT::getCelsius() {
 80a0e0a:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80a0e0c:	2b03      	cmp	r3, #3
 80a0e0e:	d103      	bne.n	80a0e18 <_ZN14PietteTech_DHT10getCelsiusEv+0x14>
 80a0e10:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a0e12:	f004 fa11 	bl	80a5238 <__aeabi_i2f>
 80a0e16:	bd10      	pop	{r4, pc}
 80a0e18:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a0e1c:	2b02      	cmp	r3, #2
 80a0e1e:	d106      	bne.n	80a0e2e <_ZN14PietteTech_DHT10getCelsiusEv+0x2a>
 80a0e20:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80a0e24:	b10b      	cbz	r3, 80a0e2a <_ZN14PietteTech_DHT10getCelsiusEv+0x26>
 80a0e26:	f7ff ff97 	bl	80a0d58 <_ZN14PietteTech_DHT7convertEv>
  return _temp;
 80a0e2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80a0e2c:	bd10      	pop	{r4, pc}
int PietteTech_DHT::getStatus() {
  return _status;
}

float PietteTech_DHT::getCelsius() {
  DHT_CHECK_STATE;
 80a0e2e:	4801      	ldr	r0, [pc, #4]	; (80a0e34 <_ZN14PietteTech_DHT10getCelsiusEv+0x30>)
  return _temp;
}
 80a0e30:	bd10      	pop	{r4, pc}
 80a0e32:	bf00      	nop
 80a0e34:	c0a00000 	.word	0xc0a00000

080a0e38 <_ZN14PietteTech_DHT11getHumidityEv>:

float PietteTech_DHT::getHumidity() {
 80a0e38:	b510      	push	{r4, lr}
  DHT_CHECK_STATE;
 80a0e3a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
float PietteTech_DHT::getCelsius() {
  DHT_CHECK_STATE;
  return _temp;
}

float PietteTech_DHT::getHumidity() {
 80a0e3e:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80a0e40:	2b03      	cmp	r3, #3
 80a0e42:	d103      	bne.n	80a0e4c <_ZN14PietteTech_DHT11getHumidityEv+0x14>
 80a0e44:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a0e46:	f004 f9f7 	bl	80a5238 <__aeabi_i2f>
 80a0e4a:	bd10      	pop	{r4, pc}
 80a0e4c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a0e50:	2b02      	cmp	r3, #2
 80a0e52:	d106      	bne.n	80a0e62 <_ZN14PietteTech_DHT11getHumidityEv+0x2a>
 80a0e54:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80a0e58:	b10b      	cbz	r3, 80a0e5e <_ZN14PietteTech_DHT11getHumidityEv+0x26>
 80a0e5a:	f7ff ff7d 	bl	80a0d58 <_ZN14PietteTech_DHT7convertEv>
  return _hum;
 80a0e5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80a0e60:	bd10      	pop	{r4, pc}
  DHT_CHECK_STATE;
  return _temp;
}

float PietteTech_DHT::getHumidity() {
  DHT_CHECK_STATE;
 80a0e62:	4801      	ldr	r0, [pc, #4]	; (80a0e68 <_ZN14PietteTech_DHT11getHumidityEv+0x30>)
  return _hum;
}
 80a0e64:	bd10      	pop	{r4, pc}
 80a0e66:	bf00      	nop
 80a0e68:	c0a00000 	.word	0xc0a00000
 80a0e6c:	00000000 	.word	0x00000000

080a0e70 <_ZN14PietteTech_DHT11getDewPointEv>:
}

// delta max = 0.6544 wrt dewPoint()
// 5x faster than dewPoint()
// reference: http://en.wikipedia.org/wiki/Dew_point
double PietteTech_DHT::getDewPoint() {
 80a0e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  DHT_CHECK_STATE;
 80a0e74:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
}

// delta max = 0.6544 wrt dewPoint()
// 5x faster than dewPoint()
// reference: http://en.wikipedia.org/wiki/Dew_point
double PietteTech_DHT::getDewPoint() {
 80a0e78:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80a0e7a:	2b03      	cmp	r3, #3
 80a0e7c:	d104      	bne.n	80a0e88 <_ZN14PietteTech_DHT11getDewPointEv+0x18>
 80a0e7e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a0e80:	f003 fd72 	bl	80a4968 <__aeabi_i2d>
 80a0e84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a0e88:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a0e8c:	2b02      	cmp	r3, #2
 80a0e8e:	d146      	bne.n	80a0f1e <_ZN14PietteTech_DHT11getDewPointEv+0xae>
 80a0e90:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80a0e94:	b10b      	cbz	r3, 80a0e9a <_ZN14PietteTech_DHT11getDewPointEv+0x2a>
 80a0e96:	f7ff ff5f 	bl	80a0d58 <_ZN14PietteTech_DHT7convertEv>
  double a = 17.271;
  double b = 237.7;
  double temp_ = (a * (double)_temp) / (b + (double)_temp) + log((double)_hum / 100);
 80a0e9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80a0e9c:	f003 fd76 	bl	80a498c <__aeabi_f2d>
 80a0ea0:	4606      	mov	r6, r0
 80a0ea2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80a0ea4:	460f      	mov	r7, r1
 80a0ea6:	f003 fd71 	bl	80a498c <__aeabi_f2d>
 80a0eaa:	2200      	movs	r2, #0
 80a0eac:	4b22      	ldr	r3, [pc, #136]	; (80a0f38 <_ZN14PietteTech_DHT11getDewPointEv+0xc8>)
 80a0eae:	f003 feeb 	bl	80a4c88 <__aeabi_ddiv>
 80a0eb2:	f001 ffab 	bl	80a2e0c <log>
 80a0eb6:	a31c      	add	r3, pc, #112	; (adr r3, 80a0f28 <_ZN14PietteTech_DHT11getDewPointEv+0xb8>)
 80a0eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0ebc:	4604      	mov	r4, r0
 80a0ebe:	460d      	mov	r5, r1
 80a0ec0:	4630      	mov	r0, r6
 80a0ec2:	4639      	mov	r1, r7
 80a0ec4:	f003 fdb6 	bl	80a4a34 <__aeabi_dmul>
 80a0ec8:	a319      	add	r3, pc, #100	; (adr r3, 80a0f30 <_ZN14PietteTech_DHT11getDewPointEv+0xc0>)
 80a0eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0ece:	4680      	mov	r8, r0
 80a0ed0:	4689      	mov	r9, r1
 80a0ed2:	4630      	mov	r0, r6
 80a0ed4:	4639      	mov	r1, r7
 80a0ed6:	f003 fbfb 	bl	80a46d0 <__adddf3>
 80a0eda:	4602      	mov	r2, r0
 80a0edc:	460b      	mov	r3, r1
 80a0ede:	4640      	mov	r0, r8
 80a0ee0:	4649      	mov	r1, r9
 80a0ee2:	f003 fed1 	bl	80a4c88 <__aeabi_ddiv>
 80a0ee6:	4622      	mov	r2, r4
 80a0ee8:	462b      	mov	r3, r5
 80a0eea:	f003 fbf1 	bl	80a46d0 <__adddf3>
  double Td = (b * temp_) / (a - temp_);
 80a0eee:	a310      	add	r3, pc, #64	; (adr r3, 80a0f30 <_ZN14PietteTech_DHT11getDewPointEv+0xc0>)
 80a0ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
// reference: http://en.wikipedia.org/wiki/Dew_point
double PietteTech_DHT::getDewPoint() {
  DHT_CHECK_STATE;
  double a = 17.271;
  double b = 237.7;
  double temp_ = (a * (double)_temp) / (b + (double)_temp) + log((double)_hum / 100);
 80a0ef4:	4606      	mov	r6, r0
 80a0ef6:	460f      	mov	r7, r1
  double Td = (b * temp_) / (a - temp_);
 80a0ef8:	f003 fd9c 	bl	80a4a34 <__aeabi_dmul>
 80a0efc:	4632      	mov	r2, r6
 80a0efe:	4604      	mov	r4, r0
 80a0f00:	460d      	mov	r5, r1
 80a0f02:	a109      	add	r1, pc, #36	; (adr r1, 80a0f28 <_ZN14PietteTech_DHT11getDewPointEv+0xb8>)
 80a0f04:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a0f08:	463b      	mov	r3, r7
 80a0f0a:	f003 fbdf 	bl	80a46cc <__aeabi_dsub>
 80a0f0e:	4602      	mov	r2, r0
 80a0f10:	460b      	mov	r3, r1
 80a0f12:	4620      	mov	r0, r4
 80a0f14:	4629      	mov	r1, r5
 80a0f16:	f003 feb7 	bl	80a4c88 <__aeabi_ddiv>
  return Td;
 80a0f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

// delta max = 0.6544 wrt dewPoint()
// 5x faster than dewPoint()
// reference: http://en.wikipedia.org/wiki/Dew_point
double PietteTech_DHT::getDewPoint() {
  DHT_CHECK_STATE;
 80a0f1e:	2000      	movs	r0, #0
 80a0f20:	4906      	ldr	r1, [pc, #24]	; (80a0f3c <_ZN14PietteTech_DHT11getDewPointEv+0xcc>)
  double a = 17.271;
  double b = 237.7;
  double temp_ = (a * (double)_temp) / (b + (double)_temp) + log((double)_hum / 100);
  double Td = (b * temp_) / (a - temp_);
  return Td;
}
 80a0f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a0f26:	bf00      	nop
 80a0f28:	4189374c 	.word	0x4189374c
 80a0f2c:	40314560 	.word	0x40314560
 80a0f30:	66666666 	.word	0x66666666
 80a0f34:	406db666 	.word	0x406db666
 80a0f38:	40590000 	.word	0x40590000
 80a0f3c:	c0140000 	.word	0xc0140000

080a0f40 <_ZN14PietteTech_DHT15getDewPointSlowEv>:

// dewPoint function NOAA
// reference: http://wahiduddin.net/calc/density_algorithms.htm
double PietteTech_DHT::getDewPointSlow() {
 80a0f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  DHT_CHECK_STATE;
 80a0f44:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
  return Td;
}

// dewPoint function NOAA
// reference: http://wahiduddin.net/calc/density_algorithms.htm
double PietteTech_DHT::getDewPointSlow() {
 80a0f48:	4682      	mov	sl, r0
  DHT_CHECK_STATE;
 80a0f4a:	2b03      	cmp	r3, #3
 80a0f4c:	d104      	bne.n	80a0f58 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x18>
 80a0f4e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a0f50:	f003 fd0a 	bl	80a4968 <__aeabi_i2d>
 80a0f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0f58:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a0f5c:	2b02      	cmp	r3, #2
 80a0f5e:	f040 80ab 	bne.w	80a10b8 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x178>
 80a0f62:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80a0f66:	b10b      	cbz	r3, 80a0f6c <_ZN14PietteTech_DHT15getDewPointSlowEv+0x2c>
 80a0f68:	f7ff fef6 	bl	80a0d58 <_ZN14PietteTech_DHT7convertEv>
  double a0 = (double) 373.15 / (273.15 + (double)_temp);
 80a0f6c:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 80a0f70:	f003 fd0c 	bl	80a498c <__aeabi_f2d>
 80a0f74:	a352      	add	r3, pc, #328	; (adr r3, 80a10c0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x180>)
 80a0f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0f7a:	f003 fba9 	bl	80a46d0 <__adddf3>
 80a0f7e:	4602      	mov	r2, r0
 80a0f80:	460b      	mov	r3, r1
 80a0f82:	a151      	add	r1, pc, #324	; (adr r1, 80a10c8 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x188>)
 80a0f84:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a0f88:	f003 fe7e 	bl	80a4c88 <__aeabi_ddiv>
  double SUM = (double)-7.90298 * (a0 - 1.0);
 80a0f8c:	2200      	movs	r2, #0
 80a0f8e:	4b64      	ldr	r3, [pc, #400]	; (80a1120 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)

// dewPoint function NOAA
// reference: http://wahiduddin.net/calc/density_algorithms.htm
double PietteTech_DHT::getDewPointSlow() {
  DHT_CHECK_STATE;
  double a0 = (double) 373.15 / (273.15 + (double)_temp);
 80a0f90:	4604      	mov	r4, r0
 80a0f92:	460d      	mov	r5, r1
  double SUM = (double)-7.90298 * (a0 - 1.0);
 80a0f94:	f003 fb9a 	bl	80a46cc <__aeabi_dsub>
 80a0f98:	a34d      	add	r3, pc, #308	; (adr r3, 80a10d0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x190>)
 80a0f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0f9e:	4606      	mov	r6, r0
 80a0fa0:	460f      	mov	r7, r1
 80a0fa2:	f003 fd47 	bl	80a4a34 <__aeabi_dmul>
 80a0fa6:	4680      	mov	r8, r0
 80a0fa8:	4689      	mov	r9, r1
  SUM += 5.02808 * log10(a0);
 80a0faa:	4620      	mov	r0, r4
 80a0fac:	4629      	mov	r1, r5
 80a0fae:	f001 ffad 	bl	80a2f0c <log10>
 80a0fb2:	a349      	add	r3, pc, #292	; (adr r3, 80a10d8 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x198>)
 80a0fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0fb8:	f003 fd3c 	bl	80a4a34 <__aeabi_dmul>
 80a0fbc:	4642      	mov	r2, r8
 80a0fbe:	464b      	mov	r3, r9
 80a0fc0:	f003 fb86 	bl	80a46d0 <__adddf3>
  SUM += -1.3816e-7 * (pow(10, (11.344*(1 - 1 / a0))) - 1);
 80a0fc4:	4622      	mov	r2, r4
// reference: http://wahiduddin.net/calc/density_algorithms.htm
double PietteTech_DHT::getDewPointSlow() {
  DHT_CHECK_STATE;
  double a0 = (double) 373.15 / (273.15 + (double)_temp);
  double SUM = (double)-7.90298 * (a0 - 1.0);
  SUM += 5.02808 * log10(a0);
 80a0fc6:	4680      	mov	r8, r0
 80a0fc8:	4689      	mov	r9, r1
  SUM += -1.3816e-7 * (pow(10, (11.344*(1 - 1 / a0))) - 1);
 80a0fca:	462b      	mov	r3, r5
 80a0fcc:	2000      	movs	r0, #0
 80a0fce:	4954      	ldr	r1, [pc, #336]	; (80a1120 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
 80a0fd0:	f003 fe5a 	bl	80a4c88 <__aeabi_ddiv>
 80a0fd4:	4602      	mov	r2, r0
 80a0fd6:	460b      	mov	r3, r1
 80a0fd8:	2000      	movs	r0, #0
 80a0fda:	4951      	ldr	r1, [pc, #324]	; (80a1120 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
 80a0fdc:	f003 fb76 	bl	80a46cc <__aeabi_dsub>
 80a0fe0:	a33f      	add	r3, pc, #252	; (adr r3, 80a10e0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1a0>)
 80a0fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0fe6:	f003 fd25 	bl	80a4a34 <__aeabi_dmul>
 80a0fea:	4602      	mov	r2, r0
 80a0fec:	460b      	mov	r3, r1
 80a0fee:	2000      	movs	r0, #0
 80a0ff0:	494c      	ldr	r1, [pc, #304]	; (80a1124 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e4>)
 80a0ff2:	f002 f80d 	bl	80a3010 <pow>
 80a0ff6:	2200      	movs	r2, #0
 80a0ff8:	4b49      	ldr	r3, [pc, #292]	; (80a1120 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
 80a0ffa:	f003 fb67 	bl	80a46cc <__aeabi_dsub>
 80a0ffe:	a33a      	add	r3, pc, #232	; (adr r3, 80a10e8 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1a8>)
 80a1000:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1004:	f003 fd16 	bl	80a4a34 <__aeabi_dmul>
 80a1008:	4642      	mov	r2, r8
 80a100a:	464b      	mov	r3, r9
 80a100c:	f003 fb60 	bl	80a46d0 <__adddf3>
  SUM += 8.1328e-3 * (pow(10, (-3.49149*(a0 - 1))) - 1);
 80a1010:	a337      	add	r3, pc, #220	; (adr r3, 80a10f0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1b0>)
 80a1012:	e9d3 2300 	ldrd	r2, r3, [r3]
double PietteTech_DHT::getDewPointSlow() {
  DHT_CHECK_STATE;
  double a0 = (double) 373.15 / (273.15 + (double)_temp);
  double SUM = (double)-7.90298 * (a0 - 1.0);
  SUM += 5.02808 * log10(a0);
  SUM += -1.3816e-7 * (pow(10, (11.344*(1 - 1 / a0))) - 1);
 80a1016:	4604      	mov	r4, r0
 80a1018:	460d      	mov	r5, r1
  SUM += 8.1328e-3 * (pow(10, (-3.49149*(a0 - 1))) - 1);
 80a101a:	4630      	mov	r0, r6
 80a101c:	4639      	mov	r1, r7
 80a101e:	f003 fd09 	bl	80a4a34 <__aeabi_dmul>
 80a1022:	4602      	mov	r2, r0
 80a1024:	460b      	mov	r3, r1
 80a1026:	2000      	movs	r0, #0
 80a1028:	493e      	ldr	r1, [pc, #248]	; (80a1124 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e4>)
 80a102a:	f001 fff1 	bl	80a3010 <pow>
 80a102e:	2200      	movs	r2, #0
 80a1030:	4b3b      	ldr	r3, [pc, #236]	; (80a1120 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
 80a1032:	f003 fb4b 	bl	80a46cc <__aeabi_dsub>
 80a1036:	a330      	add	r3, pc, #192	; (adr r3, 80a10f8 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1b8>)
 80a1038:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a103c:	f003 fcfa 	bl	80a4a34 <__aeabi_dmul>
 80a1040:	4622      	mov	r2, r4
 80a1042:	462b      	mov	r3, r5
 80a1044:	f003 fb44 	bl	80a46d0 <__adddf3>
  SUM += log10(1013.246);
  double VP = pow(10, SUM - 3) * (double)_hum;
 80a1048:	a32d      	add	r3, pc, #180	; (adr r3, 80a1100 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1c0>)
 80a104a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a104e:	f003 fb3f 	bl	80a46d0 <__adddf3>
 80a1052:	2200      	movs	r2, #0
 80a1054:	4b34      	ldr	r3, [pc, #208]	; (80a1128 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e8>)
 80a1056:	f003 fb39 	bl	80a46cc <__aeabi_dsub>
 80a105a:	4602      	mov	r2, r0
 80a105c:	460b      	mov	r3, r1
 80a105e:	2000      	movs	r0, #0
 80a1060:	4930      	ldr	r1, [pc, #192]	; (80a1124 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e4>)
 80a1062:	f001 ffd5 	bl	80a3010 <pow>
 80a1066:	4604      	mov	r4, r0
 80a1068:	460d      	mov	r5, r1
  double T = log(VP / 0.61078); // temp var
 80a106a:	f8da 0054 	ldr.w	r0, [sl, #84]	; 0x54
 80a106e:	f003 fc8d 	bl	80a498c <__aeabi_f2d>
 80a1072:	4622      	mov	r2, r4
 80a1074:	462b      	mov	r3, r5
 80a1076:	f003 fcdd 	bl	80a4a34 <__aeabi_dmul>
 80a107a:	a323      	add	r3, pc, #140	; (adr r3, 80a1108 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1c8>)
 80a107c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1080:	f003 fe02 	bl	80a4c88 <__aeabi_ddiv>
 80a1084:	f001 fec2 	bl	80a2e0c <log>
  return (241.88 * T) / (17.558 - T);
 80a1088:	a321      	add	r3, pc, #132	; (adr r3, 80a1110 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1d0>)
 80a108a:	e9d3 2300 	ldrd	r2, r3, [r3]
  SUM += 5.02808 * log10(a0);
  SUM += -1.3816e-7 * (pow(10, (11.344*(1 - 1 / a0))) - 1);
  SUM += 8.1328e-3 * (pow(10, (-3.49149*(a0 - 1))) - 1);
  SUM += log10(1013.246);
  double VP = pow(10, SUM - 3) * (double)_hum;
  double T = log(VP / 0.61078); // temp var
 80a108e:	4606      	mov	r6, r0
 80a1090:	460f      	mov	r7, r1
  return (241.88 * T) / (17.558 - T);
 80a1092:	f003 fccf 	bl	80a4a34 <__aeabi_dmul>
 80a1096:	4632      	mov	r2, r6
 80a1098:	4604      	mov	r4, r0
 80a109a:	460d      	mov	r5, r1
 80a109c:	a11e      	add	r1, pc, #120	; (adr r1, 80a1118 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1d8>)
 80a109e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a10a2:	463b      	mov	r3, r7
 80a10a4:	f003 fb12 	bl	80a46cc <__aeabi_dsub>
 80a10a8:	4602      	mov	r2, r0
 80a10aa:	460b      	mov	r3, r1
 80a10ac:	4620      	mov	r0, r4
 80a10ae:	4629      	mov	r1, r5
 80a10b0:	f003 fdea 	bl	80a4c88 <__aeabi_ddiv>
 80a10b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
}

// dewPoint function NOAA
// reference: http://wahiduddin.net/calc/density_algorithms.htm
double PietteTech_DHT::getDewPointSlow() {
  DHT_CHECK_STATE;
 80a10b8:	2000      	movs	r0, #0
 80a10ba:	491c      	ldr	r1, [pc, #112]	; (80a112c <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1ec>)
  SUM += 8.1328e-3 * (pow(10, (-3.49149*(a0 - 1))) - 1);
  SUM += log10(1013.246);
  double VP = pow(10, SUM - 3) * (double)_hum;
  double T = log(VP / 0.61078); // temp var
  return (241.88 * T) / (17.558 - T);
}
 80a10bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a10c0:	66666666 	.word	0x66666666
 80a10c4:	40711266 	.word	0x40711266
 80a10c8:	66666666 	.word	0x66666666
 80a10cc:	40775266 	.word	0x40775266
 80a10d0:	ca03c4b1 	.word	0xca03c4b1
 80a10d4:	c01f9ca6 	.word	0xc01f9ca6
 80a10d8:	00e6afcd 	.word	0x00e6afcd
 80a10dc:	40141cc1 	.word	0x40141cc1
 80a10e0:	c49ba5e3 	.word	0xc49ba5e3
 80a10e4:	4026b020 	.word	0x4026b020
 80a10e8:	36423db1 	.word	0x36423db1
 80a10ec:	be828b24 	.word	0xbe828b24
 80a10f0:	4f227d03 	.word	0x4f227d03
 80a10f4:	c00bee92 	.word	0xc00bee92
 80a10f8:	f0330363 	.word	0xf0330363
 80a10fc:	3f80a7ed 	.word	0x3f80a7ed
 80a1100:	409e541b 	.word	0x409e541b
 80a1104:	40080bb4 	.word	0x40080bb4
 80a1108:	7fa1a0cf 	.word	0x7fa1a0cf
 80a110c:	3fe38b82 	.word	0x3fe38b82
 80a1110:	f5c28f5c 	.word	0xf5c28f5c
 80a1114:	406e3c28 	.word	0x406e3c28
 80a1118:	16872b02 	.word	0x16872b02
 80a111c:	40318ed9 	.word	0x40318ed9
 80a1120:	3ff00000 	.word	0x3ff00000
 80a1124:	40240000 	.word	0x40240000
 80a1128:	40080000 	.word	0x40080000
 80a112c:	c0140000 	.word	0xc0140000

080a1130 <_GLOBAL__sub_I__Z4wordhh>:
 80a1130:	f000 b870 	b.w	80a1214 <HAL_Pin_Map>

080a1134 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 80a1134:	b508      	push	{r3, lr}
 80a1136:	4b02      	ldr	r3, [pc, #8]	; (80a1140 <os_thread_yield+0xc>)
 80a1138:	681b      	ldr	r3, [r3, #0]
 80a113a:	68db      	ldr	r3, [r3, #12]
 80a113c:	9301      	str	r3, [sp, #4]
 80a113e:	bd08      	pop	{r3, pc}
 80a1140:	080601d0 	.word	0x080601d0

080a1144 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 80a1144:	b508      	push	{r3, lr}
 80a1146:	4b02      	ldr	r3, [pc, #8]	; (80a1150 <os_thread_scheduling+0xc>)
 80a1148:	681b      	ldr	r3, [r3, #0]
 80a114a:	69db      	ldr	r3, [r3, #28]
 80a114c:	9301      	str	r3, [sp, #4]
 80a114e:	bd08      	pop	{r3, pc}
 80a1150:	080601d0 	.word	0x080601d0

080a1154 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 80a1154:	b508      	push	{r3, lr}
 80a1156:	4b02      	ldr	r3, [pc, #8]	; (80a1160 <os_timer_create+0xc>)
 80a1158:	681b      	ldr	r3, [r3, #0]
 80a115a:	6a1b      	ldr	r3, [r3, #32]
 80a115c:	9301      	str	r3, [sp, #4]
 80a115e:	bd08      	pop	{r3, pc}
 80a1160:	080601d0 	.word	0x080601d0

080a1164 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 80a1164:	b508      	push	{r3, lr}
 80a1166:	4b02      	ldr	r3, [pc, #8]	; (80a1170 <os_timer_destroy+0xc>)
 80a1168:	681b      	ldr	r3, [r3, #0]
 80a116a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a116c:	9301      	str	r3, [sp, #4]
 80a116e:	bd08      	pop	{r3, pc}
 80a1170:	080601d0 	.word	0x080601d0

080a1174 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 80a1174:	b508      	push	{r3, lr}
 80a1176:	4b02      	ldr	r3, [pc, #8]	; (80a1180 <os_timer_get_id+0xc>)
 80a1178:	681b      	ldr	r3, [r3, #0]
 80a117a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a117c:	9301      	str	r3, [sp, #4]
 80a117e:	bd08      	pop	{r3, pc}
 80a1180:	080601d0 	.word	0x080601d0

080a1184 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 80a1184:	b508      	push	{r3, lr}
 80a1186:	4b02      	ldr	r3, [pc, #8]	; (80a1190 <os_timer_change+0xc>)
 80a1188:	681b      	ldr	r3, [r3, #0]
 80a118a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a118c:	9301      	str	r3, [sp, #4]
 80a118e:	bd08      	pop	{r3, pc}
 80a1190:	080601d0 	.word	0x080601d0

080a1194 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1194:	b508      	push	{r3, lr}
 80a1196:	4b02      	ldr	r3, [pc, #8]	; (80a11a0 <os_mutex_create+0xc>)
 80a1198:	681b      	ldr	r3, [r3, #0]
 80a119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a119c:	9301      	str	r3, [sp, #4]
 80a119e:	bd08      	pop	{r3, pc}
 80a11a0:	080601d0 	.word	0x080601d0

080a11a4 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
 80a11a4:	b508      	push	{r3, lr}
 80a11a6:	4b02      	ldr	r3, [pc, #8]	; (80a11b0 <os_timer_set_id+0xc>)
 80a11a8:	681b      	ldr	r3, [r3, #0]
 80a11aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a11ac:	9301      	str	r3, [sp, #4]
 80a11ae:	bd08      	pop	{r3, pc}
 80a11b0:	080601d0 	.word	0x080601d0

080a11b4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a11b4:	b508      	push	{r3, lr}
 80a11b6:	4b02      	ldr	r3, [pc, #8]	; (80a11c0 <HAL_RNG_GetRandomNumber+0xc>)
 80a11b8:	681b      	ldr	r3, [r3, #0]
 80a11ba:	685b      	ldr	r3, [r3, #4]
 80a11bc:	9301      	str	r3, [sp, #4]
 80a11be:	bd08      	pop	{r3, pc}
 80a11c0:	0806019c 	.word	0x0806019c

080a11c4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a11c4:	b508      	push	{r3, lr}
 80a11c6:	4b02      	ldr	r3, [pc, #8]	; (80a11d0 <HAL_Delay_Microseconds+0xc>)
 80a11c8:	681b      	ldr	r3, [r3, #0]
 80a11ca:	68db      	ldr	r3, [r3, #12]
 80a11cc:	9301      	str	r3, [sp, #4]
 80a11ce:	bd08      	pop	{r3, pc}
 80a11d0:	0806019c 	.word	0x0806019c

080a11d4 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a11d4:	b508      	push	{r3, lr}
 80a11d6:	4b02      	ldr	r3, [pc, #8]	; (80a11e0 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a11d8:	681b      	ldr	r3, [r3, #0]
 80a11da:	691b      	ldr	r3, [r3, #16]
 80a11dc:	9301      	str	r3, [sp, #4]
 80a11de:	bd08      	pop	{r3, pc}
 80a11e0:	0806019c 	.word	0x0806019c

080a11e4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a11e4:	b508      	push	{r3, lr}
 80a11e6:	4b02      	ldr	r3, [pc, #8]	; (80a11f0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a11e8:	681b      	ldr	r3, [r3, #0]
 80a11ea:	695b      	ldr	r3, [r3, #20]
 80a11ec:	9301      	str	r3, [sp, #4]
 80a11ee:	bd08      	pop	{r3, pc}
 80a11f0:	0806019c 	.word	0x0806019c

080a11f4 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a11f4:	b508      	push	{r3, lr}
 80a11f6:	4b02      	ldr	r3, [pc, #8]	; (80a1200 <HAL_RTC_Get_UnixTime+0xc>)
 80a11f8:	681b      	ldr	r3, [r3, #0]
 80a11fa:	69db      	ldr	r3, [r3, #28]
 80a11fc:	9301      	str	r3, [sp, #4]
 80a11fe:	bd08      	pop	{r3, pc}
 80a1200:	0806019c 	.word	0x0806019c

080a1204 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a1204:	b508      	push	{r3, lr}
 80a1206:	4b02      	ldr	r3, [pc, #8]	; (80a1210 <HAL_RTC_Time_Is_Valid+0xc>)
 80a1208:	681b      	ldr	r3, [r3, #0]
 80a120a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a120c:	9301      	str	r3, [sp, #4]
 80a120e:	bd08      	pop	{r3, pc}
 80a1210:	0806019c 	.word	0x0806019c

080a1214 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a1214:	b508      	push	{r3, lr}
 80a1216:	4b02      	ldr	r3, [pc, #8]	; (80a1220 <HAL_Pin_Map+0xc>)
 80a1218:	681b      	ldr	r3, [r3, #0]
 80a121a:	681b      	ldr	r3, [r3, #0]
 80a121c:	9301      	str	r3, [sp, #4]
 80a121e:	bd08      	pop	{r3, pc}
 80a1220:	080601b0 	.word	0x080601b0

080a1224 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1224:	b508      	push	{r3, lr}
 80a1226:	4b02      	ldr	r3, [pc, #8]	; (80a1230 <HAL_Pin_Mode+0xc>)
 80a1228:	681b      	ldr	r3, [r3, #0]
 80a122a:	689b      	ldr	r3, [r3, #8]
 80a122c:	9301      	str	r3, [sp, #4]
 80a122e:	bd08      	pop	{r3, pc}
 80a1230:	080601b0 	.word	0x080601b0

080a1234 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1234:	b508      	push	{r3, lr}
 80a1236:	4b02      	ldr	r3, [pc, #8]	; (80a1240 <HAL_Get_Pin_Mode+0xc>)
 80a1238:	681b      	ldr	r3, [r3, #0]
 80a123a:	68db      	ldr	r3, [r3, #12]
 80a123c:	9301      	str	r3, [sp, #4]
 80a123e:	bd08      	pop	{r3, pc}
 80a1240:	080601b0 	.word	0x080601b0

080a1244 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1244:	b508      	push	{r3, lr}
 80a1246:	4b02      	ldr	r3, [pc, #8]	; (80a1250 <HAL_GPIO_Write+0xc>)
 80a1248:	681b      	ldr	r3, [r3, #0]
 80a124a:	691b      	ldr	r3, [r3, #16]
 80a124c:	9301      	str	r3, [sp, #4]
 80a124e:	bd08      	pop	{r3, pc}
 80a1250:	080601b0 	.word	0x080601b0

080a1254 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1254:	b508      	push	{r3, lr}
 80a1256:	4b02      	ldr	r3, [pc, #8]	; (80a1260 <HAL_GPIO_Read+0xc>)
 80a1258:	681b      	ldr	r3, [r3, #0]
 80a125a:	695b      	ldr	r3, [r3, #20]
 80a125c:	9301      	str	r3, [sp, #4]
 80a125e:	bd08      	pop	{r3, pc}
 80a1260:	080601b0 	.word	0x080601b0

080a1264 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a1264:	b508      	push	{r3, lr}
 80a1266:	4b02      	ldr	r3, [pc, #8]	; (80a1270 <HAL_Interrupts_Attach+0xc>)
 80a1268:	681b      	ldr	r3, [r3, #0]
 80a126a:	699b      	ldr	r3, [r3, #24]
 80a126c:	9301      	str	r3, [sp, #4]
 80a126e:	bd08      	pop	{r3, pc}
 80a1270:	080601b0 	.word	0x080601b0

080a1274 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 80a1274:	b508      	push	{r3, lr}
 80a1276:	4b02      	ldr	r3, [pc, #8]	; (80a1280 <HAL_Interrupts_Detach+0xc>)
 80a1278:	681b      	ldr	r3, [r3, #0]
 80a127a:	69db      	ldr	r3, [r3, #28]
 80a127c:	9301      	str	r3, [sp, #4]
 80a127e:	bd08      	pop	{r3, pc}
 80a1280:	080601b0 	.word	0x080601b0

080a1284 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1284:	b508      	push	{r3, lr}
 80a1286:	4b02      	ldr	r3, [pc, #8]	; (80a1290 <HAL_I2C_Write_Data+0xc>)
 80a1288:	681b      	ldr	r3, [r3, #0]
 80a128a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a128c:	9301      	str	r3, [sp, #4]
 80a128e:	bd08      	pop	{r3, pc}
 80a1290:	080601ac 	.word	0x080601ac

080a1294 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1294:	b508      	push	{r3, lr}
 80a1296:	4b02      	ldr	r3, [pc, #8]	; (80a12a0 <HAL_I2C_Available_Data+0xc>)
 80a1298:	681b      	ldr	r3, [r3, #0]
 80a129a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a129c:	9301      	str	r3, [sp, #4]
 80a129e:	bd08      	pop	{r3, pc}
 80a12a0:	080601ac 	.word	0x080601ac

080a12a4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a12a4:	b508      	push	{r3, lr}
 80a12a6:	4b02      	ldr	r3, [pc, #8]	; (80a12b0 <HAL_I2C_Read_Data+0xc>)
 80a12a8:	681b      	ldr	r3, [r3, #0]
 80a12aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a12ac:	9301      	str	r3, [sp, #4]
 80a12ae:	bd08      	pop	{r3, pc}
 80a12b0:	080601ac 	.word	0x080601ac

080a12b4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a12b4:	b508      	push	{r3, lr}
 80a12b6:	4b02      	ldr	r3, [pc, #8]	; (80a12c0 <HAL_I2C_Peek_Data+0xc>)
 80a12b8:	681b      	ldr	r3, [r3, #0]
 80a12ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a12bc:	9301      	str	r3, [sp, #4]
 80a12be:	bd08      	pop	{r3, pc}
 80a12c0:	080601ac 	.word	0x080601ac

080a12c4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a12c4:	b508      	push	{r3, lr}
 80a12c6:	4b02      	ldr	r3, [pc, #8]	; (80a12d0 <HAL_I2C_Flush_Data+0xc>)
 80a12c8:	681b      	ldr	r3, [r3, #0]
 80a12ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a12cc:	9301      	str	r3, [sp, #4]
 80a12ce:	bd08      	pop	{r3, pc}
 80a12d0:	080601ac 	.word	0x080601ac

080a12d4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a12d4:	b508      	push	{r3, lr}
 80a12d6:	4b02      	ldr	r3, [pc, #8]	; (80a12e0 <HAL_I2C_Is_Enabled+0xc>)
 80a12d8:	681b      	ldr	r3, [r3, #0]
 80a12da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a12dc:	9301      	str	r3, [sp, #4]
 80a12de:	bd08      	pop	{r3, pc}
 80a12e0:	080601ac 	.word	0x080601ac

080a12e4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a12e4:	b508      	push	{r3, lr}
 80a12e6:	4b03      	ldr	r3, [pc, #12]	; (80a12f4 <HAL_I2C_Init+0x10>)
 80a12e8:	681b      	ldr	r3, [r3, #0]
 80a12ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a12ee:	9301      	str	r3, [sp, #4]
 80a12f0:	bd08      	pop	{r3, pc}
 80a12f2:	0000      	.short	0x0000
 80a12f4:	080601ac 	.word	0x080601ac

080a12f8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a12f8:	b508      	push	{r3, lr}
 80a12fa:	4b02      	ldr	r3, [pc, #8]	; (80a1304 <HAL_SPI_Init+0xc>)
 80a12fc:	681b      	ldr	r3, [r3, #0]
 80a12fe:	69db      	ldr	r3, [r3, #28]
 80a1300:	9301      	str	r3, [sp, #4]
 80a1302:	bd08      	pop	{r3, pc}
 80a1304:	080601b4 	.word	0x080601b4

080a1308 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1308:	b508      	push	{r3, lr}
 80a130a:	4b02      	ldr	r3, [pc, #8]	; (80a1314 <HAL_SPI_Is_Enabled+0xc>)
 80a130c:	681b      	ldr	r3, [r3, #0]
 80a130e:	6a1b      	ldr	r3, [r3, #32]
 80a1310:	9301      	str	r3, [sp, #4]
 80a1312:	bd08      	pop	{r3, pc}
 80a1314:	080601b4 	.word	0x080601b4

080a1318 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1318:	b508      	push	{r3, lr}
 80a131a:	4b02      	ldr	r3, [pc, #8]	; (80a1324 <HAL_USART_Init+0xc>)
 80a131c:	681b      	ldr	r3, [r3, #0]
 80a131e:	699b      	ldr	r3, [r3, #24]
 80a1320:	9301      	str	r3, [sp, #4]
 80a1322:	bd08      	pop	{r3, pc}
 80a1324:	080601c4 	.word	0x080601c4

080a1328 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1328:	b508      	push	{r3, lr}
 80a132a:	4b02      	ldr	r3, [pc, #8]	; (80a1334 <HAL_USART_Write_Data+0xc>)
 80a132c:	681b      	ldr	r3, [r3, #0]
 80a132e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1330:	9301      	str	r3, [sp, #4]
 80a1332:	bd08      	pop	{r3, pc}
 80a1334:	080601c4 	.word	0x080601c4

080a1338 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1338:	b508      	push	{r3, lr}
 80a133a:	4b02      	ldr	r3, [pc, #8]	; (80a1344 <HAL_USART_Available_Data+0xc>)
 80a133c:	681b      	ldr	r3, [r3, #0]
 80a133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1340:	9301      	str	r3, [sp, #4]
 80a1342:	bd08      	pop	{r3, pc}
 80a1344:	080601c4 	.word	0x080601c4

080a1348 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1348:	b508      	push	{r3, lr}
 80a134a:	4b02      	ldr	r3, [pc, #8]	; (80a1354 <HAL_USART_Read_Data+0xc>)
 80a134c:	681b      	ldr	r3, [r3, #0]
 80a134e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1350:	9301      	str	r3, [sp, #4]
 80a1352:	bd08      	pop	{r3, pc}
 80a1354:	080601c4 	.word	0x080601c4

080a1358 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1358:	b508      	push	{r3, lr}
 80a135a:	4b02      	ldr	r3, [pc, #8]	; (80a1364 <HAL_USART_Peek_Data+0xc>)
 80a135c:	681b      	ldr	r3, [r3, #0]
 80a135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1360:	9301      	str	r3, [sp, #4]
 80a1362:	bd08      	pop	{r3, pc}
 80a1364:	080601c4 	.word	0x080601c4

080a1368 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1368:	b508      	push	{r3, lr}
 80a136a:	4b02      	ldr	r3, [pc, #8]	; (80a1374 <HAL_USART_Flush_Data+0xc>)
 80a136c:	681b      	ldr	r3, [r3, #0]
 80a136e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1370:	9301      	str	r3, [sp, #4]
 80a1372:	bd08      	pop	{r3, pc}
 80a1374:	080601c4 	.word	0x080601c4

080a1378 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1378:	b508      	push	{r3, lr}
 80a137a:	4b02      	ldr	r3, [pc, #8]	; (80a1384 <HAL_USART_Is_Enabled+0xc>)
 80a137c:	681b      	ldr	r3, [r3, #0]
 80a137e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1380:	9301      	str	r3, [sp, #4]
 80a1382:	bd08      	pop	{r3, pc}
 80a1384:	080601c4 	.word	0x080601c4

080a1388 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1388:	b508      	push	{r3, lr}
 80a138a:	4b02      	ldr	r3, [pc, #8]	; (80a1394 <HAL_USART_Available_Data_For_Write+0xc>)
 80a138c:	681b      	ldr	r3, [r3, #0]
 80a138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1390:	9301      	str	r3, [sp, #4]
 80a1392:	bd08      	pop	{r3, pc}
 80a1394:	080601c4 	.word	0x080601c4

080a1398 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1398:	b508      	push	{r3, lr}
 80a139a:	4b02      	ldr	r3, [pc, #8]	; (80a13a4 <HAL_USB_USART_Init+0xc>)
 80a139c:	681b      	ldr	r3, [r3, #0]
 80a139e:	681b      	ldr	r3, [r3, #0]
 80a13a0:	9301      	str	r3, [sp, #4]
 80a13a2:	bd08      	pop	{r3, pc}
 80a13a4:	080601d8 	.word	0x080601d8

080a13a8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a13a8:	b508      	push	{r3, lr}
 80a13aa:	4b02      	ldr	r3, [pc, #8]	; (80a13b4 <HAL_USB_USART_Begin+0xc>)
 80a13ac:	681b      	ldr	r3, [r3, #0]
 80a13ae:	685b      	ldr	r3, [r3, #4]
 80a13b0:	9301      	str	r3, [sp, #4]
 80a13b2:	bd08      	pop	{r3, pc}
 80a13b4:	080601d8 	.word	0x080601d8

080a13b8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a13b8:	b508      	push	{r3, lr}
 80a13ba:	4b02      	ldr	r3, [pc, #8]	; (80a13c4 <HAL_USB_USART_Available_Data+0xc>)
 80a13bc:	681b      	ldr	r3, [r3, #0]
 80a13be:	691b      	ldr	r3, [r3, #16]
 80a13c0:	9301      	str	r3, [sp, #4]
 80a13c2:	bd08      	pop	{r3, pc}
 80a13c4:	080601d8 	.word	0x080601d8

080a13c8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a13c8:	b508      	push	{r3, lr}
 80a13ca:	4b02      	ldr	r3, [pc, #8]	; (80a13d4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a13cc:	681b      	ldr	r3, [r3, #0]
 80a13ce:	695b      	ldr	r3, [r3, #20]
 80a13d0:	9301      	str	r3, [sp, #4]
 80a13d2:	bd08      	pop	{r3, pc}
 80a13d4:	080601d8 	.word	0x080601d8

080a13d8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a13d8:	b508      	push	{r3, lr}
 80a13da:	4b02      	ldr	r3, [pc, #8]	; (80a13e4 <HAL_USB_USART_Receive_Data+0xc>)
 80a13dc:	681b      	ldr	r3, [r3, #0]
 80a13de:	699b      	ldr	r3, [r3, #24]
 80a13e0:	9301      	str	r3, [sp, #4]
 80a13e2:	bd08      	pop	{r3, pc}
 80a13e4:	080601d8 	.word	0x080601d8

080a13e8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a13e8:	b508      	push	{r3, lr}
 80a13ea:	4b02      	ldr	r3, [pc, #8]	; (80a13f4 <HAL_USB_USART_Send_Data+0xc>)
 80a13ec:	681b      	ldr	r3, [r3, #0]
 80a13ee:	69db      	ldr	r3, [r3, #28]
 80a13f0:	9301      	str	r3, [sp, #4]
 80a13f2:	bd08      	pop	{r3, pc}
 80a13f4:	080601d8 	.word	0x080601d8

080a13f8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a13f8:	b508      	push	{r3, lr}
 80a13fa:	4b02      	ldr	r3, [pc, #8]	; (80a1404 <HAL_USB_USART_Flush_Data+0xc>)
 80a13fc:	681b      	ldr	r3, [r3, #0]
 80a13fe:	6a1b      	ldr	r3, [r3, #32]
 80a1400:	9301      	str	r3, [sp, #4]
 80a1402:	bd08      	pop	{r3, pc}
 80a1404:	080601d8 	.word	0x080601d8

080a1408 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1408:	b508      	push	{r3, lr}
 80a140a:	4b02      	ldr	r3, [pc, #8]	; (80a1414 <inet_gethostbyname+0xc>)
 80a140c:	681b      	ldr	r3, [r3, #0]
 80a140e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1410:	9301      	str	r3, [sp, #4]
 80a1412:	bd08      	pop	{r3, pc}
 80a1414:	080601c0 	.word	0x080601c0

080a1418 <wlan_select_antenna>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
 80a1418:	b508      	push	{r3, lr}
 80a141a:	4b02      	ldr	r3, [pc, #8]	; (80a1424 <wlan_select_antenna+0xc>)
 80a141c:	681b      	ldr	r3, [r3, #0]
 80a141e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a1420:	9301      	str	r3, [sp, #4]
 80a1422:	bd08      	pop	{r3, pc}
 80a1424:	080601c0 	.word	0x080601c0

080a1428 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a1428:	b508      	push	{r3, lr}
 80a142a:	4b02      	ldr	r3, [pc, #8]	; (80a1434 <system_mode+0xc>)
 80a142c:	681b      	ldr	r3, [r3, #0]
 80a142e:	681b      	ldr	r3, [r3, #0]
 80a1430:	9301      	str	r3, [sp, #4]
 80a1432:	bd08      	pop	{r3, pc}
 80a1434:	080601a4 	.word	0x080601a4

080a1438 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1438:	b508      	push	{r3, lr}
 80a143a:	4b02      	ldr	r3, [pc, #8]	; (80a1444 <set_system_mode+0xc>)
 80a143c:	681b      	ldr	r3, [r3, #0]
 80a143e:	685b      	ldr	r3, [r3, #4]
 80a1440:	9301      	str	r3, [sp, #4]
 80a1442:	bd08      	pop	{r3, pc}
 80a1444:	080601a4 	.word	0x080601a4

080a1448 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1448:	b508      	push	{r3, lr}
 80a144a:	4b02      	ldr	r3, [pc, #8]	; (80a1454 <system_delay_ms+0xc>)
 80a144c:	681b      	ldr	r3, [r3, #0]
 80a144e:	695b      	ldr	r3, [r3, #20]
 80a1450:	9301      	str	r3, [sp, #4]
 80a1452:	bd08      	pop	{r3, pc}
 80a1454:	080601a4 	.word	0x080601a4

080a1458 <system_version_info>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
 80a1458:	b508      	push	{r3, lr}
 80a145a:	4b02      	ldr	r3, [pc, #8]	; (80a1464 <system_version_info+0xc>)
 80a145c:	681b      	ldr	r3, [r3, #0]
 80a145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1460:	9301      	str	r3, [sp, #4]
 80a1462:	bd08      	pop	{r3, pc}
 80a1464:	080601a4 	.word	0x080601a4

080a1468 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a1468:	b508      	push	{r3, lr}
 80a146a:	4b02      	ldr	r3, [pc, #8]	; (80a1474 <application_thread_current+0xc>)
 80a146c:	681b      	ldr	r3, [r3, #0]
 80a146e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1470:	9301      	str	r3, [sp, #4]
 80a1472:	bd08      	pop	{r3, pc}
 80a1474:	080601a4 	.word	0x080601a4

080a1478 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a1478:	b508      	push	{r3, lr}
 80a147a:	4b02      	ldr	r3, [pc, #8]	; (80a1484 <application_thread_invoke+0xc>)
 80a147c:	681b      	ldr	r3, [r3, #0]
 80a147e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1480:	9301      	str	r3, [sp, #4]
 80a1482:	bd08      	pop	{r3, pc}
 80a1484:	080601a4 	.word	0x080601a4

080a1488 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a1488:	b508      	push	{r3, lr}
 80a148a:	4b02      	ldr	r3, [pc, #8]	; (80a1494 <system_thread_get_state+0xc>)
 80a148c:	681b      	ldr	r3, [r3, #0]
 80a148e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1490:	9301      	str	r3, [sp, #4]
 80a1492:	bd08      	pop	{r3, pc}
 80a1494:	080601a4 	.word	0x080601a4

080a1498 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1498:	b508      	push	{r3, lr}
 80a149a:	4b03      	ldr	r3, [pc, #12]	; (80a14a8 <system_ctrl_set_app_request_handler+0x10>)
 80a149c:	681b      	ldr	r3, [r3, #0]
 80a149e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a14a2:	9301      	str	r3, [sp, #4]
 80a14a4:	bd08      	pop	{r3, pc}
 80a14a6:	0000      	.short	0x0000
 80a14a8:	080601a4 	.word	0x080601a4

080a14ac <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a14ac:	b508      	push	{r3, lr}
 80a14ae:	4b03      	ldr	r3, [pc, #12]	; (80a14bc <system_ctrl_set_result+0x10>)
 80a14b0:	681b      	ldr	r3, [r3, #0]
 80a14b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a14b6:	9301      	str	r3, [sp, #4]
 80a14b8:	bd08      	pop	{r3, pc}
 80a14ba:	0000      	.short	0x0000
 80a14bc:	080601a4 	.word	0x080601a4

080a14c0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a14c0:	b508      	push	{r3, lr}
 80a14c2:	4b02      	ldr	r3, [pc, #8]	; (80a14cc <spark_variable+0xc>)
 80a14c4:	681b      	ldr	r3, [r3, #0]
 80a14c6:	681b      	ldr	r3, [r3, #0]
 80a14c8:	9301      	str	r3, [sp, #4]
 80a14ca:	bd08      	pop	{r3, pc}
 80a14cc:	080601cc 	.word	0x080601cc

080a14d0 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a14d0:	b508      	push	{r3, lr}
 80a14d2:	4b02      	ldr	r3, [pc, #8]	; (80a14dc <spark_function+0xc>)
 80a14d4:	681b      	ldr	r3, [r3, #0]
 80a14d6:	685b      	ldr	r3, [r3, #4]
 80a14d8:	9301      	str	r3, [sp, #4]
 80a14da:	bd08      	pop	{r3, pc}
 80a14dc:	080601cc 	.word	0x080601cc

080a14e0 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a14e0:	b508      	push	{r3, lr}
 80a14e2:	4b02      	ldr	r3, [pc, #8]	; (80a14ec <spark_process+0xc>)
 80a14e4:	681b      	ldr	r3, [r3, #0]
 80a14e6:	689b      	ldr	r3, [r3, #8]
 80a14e8:	9301      	str	r3, [sp, #4]
 80a14ea:	bd08      	pop	{r3, pc}
 80a14ec:	080601cc 	.word	0x080601cc

080a14f0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a14f0:	b508      	push	{r3, lr}
 80a14f2:	4b02      	ldr	r3, [pc, #8]	; (80a14fc <spark_cloud_flag_connected+0xc>)
 80a14f4:	681b      	ldr	r3, [r3, #0]
 80a14f6:	695b      	ldr	r3, [r3, #20]
 80a14f8:	9301      	str	r3, [sp, #4]
 80a14fa:	bd08      	pop	{r3, pc}
 80a14fc:	080601cc 	.word	0x080601cc

080a1500 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a1500:	b508      	push	{r3, lr}
 80a1502:	4b02      	ldr	r3, [pc, #8]	; (80a150c <spark_send_event+0xc>)
 80a1504:	681b      	ldr	r3, [r3, #0]
 80a1506:	6a1b      	ldr	r3, [r3, #32]
 80a1508:	9301      	str	r3, [sp, #4]
 80a150a:	bd08      	pop	{r3, pc}
 80a150c:	080601cc 	.word	0x080601cc

080a1510 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 80a1510:	b508      	push	{r3, lr}
 80a1512:	4b02      	ldr	r3, [pc, #8]	; (80a151c <spark_sync_time+0xc>)
 80a1514:	681b      	ldr	r3, [r3, #0]
 80a1516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1518:	9301      	str	r3, [sp, #4]
 80a151a:	bd08      	pop	{r3, pc}
 80a151c:	080601cc 	.word	0x080601cc

080a1520 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a1520:	b508      	push	{r3, lr}
 80a1522:	4b02      	ldr	r3, [pc, #8]	; (80a152c <spark_sync_time_pending+0xc>)
 80a1524:	681b      	ldr	r3, [r3, #0]
 80a1526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1528:	9301      	str	r3, [sp, #4]
 80a152a:	bd08      	pop	{r3, pc}
 80a152c:	080601cc 	.word	0x080601cc

080a1530 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1530:	b508      	push	{r3, lr}
 80a1532:	4b02      	ldr	r3, [pc, #8]	; (80a153c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1534:	681b      	ldr	r3, [r3, #0]
 80a1536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1538:	9301      	str	r3, [sp, #4]
 80a153a:	bd08      	pop	{r3, pc}
 80a153c:	080601cc 	.word	0x080601cc

080a1540 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1540:	b508      	push	{r3, lr}
 80a1542:	4b02      	ldr	r3, [pc, #8]	; (80a154c <network_connect+0xc>)
 80a1544:	681b      	ldr	r3, [r3, #0]
 80a1546:	685b      	ldr	r3, [r3, #4]
 80a1548:	9301      	str	r3, [sp, #4]
 80a154a:	bd08      	pop	{r3, pc}
 80a154c:	080601c8 	.word	0x080601c8

080a1550 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1550:	b508      	push	{r3, lr}
 80a1552:	4b02      	ldr	r3, [pc, #8]	; (80a155c <network_connecting+0xc>)
 80a1554:	681b      	ldr	r3, [r3, #0]
 80a1556:	689b      	ldr	r3, [r3, #8]
 80a1558:	9301      	str	r3, [sp, #4]
 80a155a:	bd08      	pop	{r3, pc}
 80a155c:	080601c8 	.word	0x080601c8

080a1560 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1560:	b508      	push	{r3, lr}
 80a1562:	4b02      	ldr	r3, [pc, #8]	; (80a156c <network_disconnect+0xc>)
 80a1564:	681b      	ldr	r3, [r3, #0]
 80a1566:	68db      	ldr	r3, [r3, #12]
 80a1568:	9301      	str	r3, [sp, #4]
 80a156a:	bd08      	pop	{r3, pc}
 80a156c:	080601c8 	.word	0x080601c8

080a1570 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1570:	b508      	push	{r3, lr}
 80a1572:	4b02      	ldr	r3, [pc, #8]	; (80a157c <network_ready+0xc>)
 80a1574:	681b      	ldr	r3, [r3, #0]
 80a1576:	691b      	ldr	r3, [r3, #16]
 80a1578:	9301      	str	r3, [sp, #4]
 80a157a:	bd08      	pop	{r3, pc}
 80a157c:	080601c8 	.word	0x080601c8

080a1580 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1580:	b508      	push	{r3, lr}
 80a1582:	4b02      	ldr	r3, [pc, #8]	; (80a158c <network_on+0xc>)
 80a1584:	681b      	ldr	r3, [r3, #0]
 80a1586:	695b      	ldr	r3, [r3, #20]
 80a1588:	9301      	str	r3, [sp, #4]
 80a158a:	bd08      	pop	{r3, pc}
 80a158c:	080601c8 	.word	0x080601c8

080a1590 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1590:	b508      	push	{r3, lr}
 80a1592:	4b02      	ldr	r3, [pc, #8]	; (80a159c <network_off+0xc>)
 80a1594:	681b      	ldr	r3, [r3, #0]
 80a1596:	699b      	ldr	r3, [r3, #24]
 80a1598:	9301      	str	r3, [sp, #4]
 80a159a:	bd08      	pop	{r3, pc}
 80a159c:	080601c8 	.word	0x080601c8

080a15a0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a15a0:	b508      	push	{r3, lr}
 80a15a2:	4b02      	ldr	r3, [pc, #8]	; (80a15ac <network_listen+0xc>)
 80a15a4:	681b      	ldr	r3, [r3, #0]
 80a15a6:	69db      	ldr	r3, [r3, #28]
 80a15a8:	9301      	str	r3, [sp, #4]
 80a15aa:	bd08      	pop	{r3, pc}
 80a15ac:	080601c8 	.word	0x080601c8

080a15b0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a15b0:	b508      	push	{r3, lr}
 80a15b2:	4b02      	ldr	r3, [pc, #8]	; (80a15bc <network_listening+0xc>)
 80a15b4:	681b      	ldr	r3, [r3, #0]
 80a15b6:	6a1b      	ldr	r3, [r3, #32]
 80a15b8:	9301      	str	r3, [sp, #4]
 80a15ba:	bd08      	pop	{r3, pc}
 80a15bc:	080601c8 	.word	0x080601c8

080a15c0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a15c0:	b508      	push	{r3, lr}
 80a15c2:	4b02      	ldr	r3, [pc, #8]	; (80a15cc <network_set_listen_timeout+0xc>)
 80a15c4:	681b      	ldr	r3, [r3, #0]
 80a15c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a15c8:	9301      	str	r3, [sp, #4]
 80a15ca:	bd08      	pop	{r3, pc}
 80a15cc:	080601c8 	.word	0x080601c8

080a15d0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a15d0:	b508      	push	{r3, lr}
 80a15d2:	4b02      	ldr	r3, [pc, #8]	; (80a15dc <network_get_listen_timeout+0xc>)
 80a15d4:	681b      	ldr	r3, [r3, #0]
 80a15d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a15d8:	9301      	str	r3, [sp, #4]
 80a15da:	bd08      	pop	{r3, pc}
 80a15dc:	080601c8 	.word	0x080601c8

080a15e0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a15e0:	b508      	push	{r3, lr}
 80a15e2:	4b02      	ldr	r3, [pc, #8]	; (80a15ec <malloc+0xc>)
 80a15e4:	681b      	ldr	r3, [r3, #0]
 80a15e6:	681b      	ldr	r3, [r3, #0]
 80a15e8:	9301      	str	r3, [sp, #4]
 80a15ea:	bd08      	pop	{r3, pc}
 80a15ec:	080601a0 	.word	0x080601a0

080a15f0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a15f0:	b508      	push	{r3, lr}
 80a15f2:	4b02      	ldr	r3, [pc, #8]	; (80a15fc <free+0xc>)
 80a15f4:	681b      	ldr	r3, [r3, #0]
 80a15f6:	685b      	ldr	r3, [r3, #4]
 80a15f8:	9301      	str	r3, [sp, #4]
 80a15fa:	bd08      	pop	{r3, pc}
 80a15fc:	080601a0 	.word	0x080601a0

080a1600 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1600:	b508      	push	{r3, lr}
 80a1602:	4b02      	ldr	r3, [pc, #8]	; (80a160c <realloc+0xc>)
 80a1604:	681b      	ldr	r3, [r3, #0]
 80a1606:	689b      	ldr	r3, [r3, #8]
 80a1608:	9301      	str	r3, [sp, #4]
 80a160a:	bd08      	pop	{r3, pc}
 80a160c:	080601a0 	.word	0x080601a0

080a1610 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80a1610:	b508      	push	{r3, lr}
 80a1612:	4b02      	ldr	r3, [pc, #8]	; (80a161c <siprintf+0xc>)
 80a1614:	681b      	ldr	r3, [r3, #0]
 80a1616:	691b      	ldr	r3, [r3, #16]
 80a1618:	9301      	str	r3, [sp, #4]
 80a161a:	bd08      	pop	{r3, pc}
 80a161c:	080601a0 	.word	0x080601a0

080a1620 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a1620:	b508      	push	{r3, lr}
 80a1622:	4b02      	ldr	r3, [pc, #8]	; (80a162c <siscanf+0xc>)
 80a1624:	681b      	ldr	r3, [r3, #0]
 80a1626:	699b      	ldr	r3, [r3, #24]
 80a1628:	9301      	str	r3, [sp, #4]
 80a162a:	bd08      	pop	{r3, pc}
 80a162c:	080601a0 	.word	0x080601a0

080a1630 <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a1630:	b508      	push	{r3, lr}
 80a1632:	4b02      	ldr	r3, [pc, #8]	; (80a163c <vsnprintf+0xc>)
 80a1634:	681b      	ldr	r3, [r3, #0]
 80a1636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1638:	9301      	str	r3, [sp, #4]
 80a163a:	bd08      	pop	{r3, pc}
 80a163c:	080601a0 	.word	0x080601a0

080a1640 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a1640:	b508      	push	{r3, lr}
 80a1642:	4b02      	ldr	r3, [pc, #8]	; (80a164c <abort+0xc>)
 80a1644:	681b      	ldr	r3, [r3, #0]
 80a1646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1648:	9301      	str	r3, [sp, #4]
 80a164a:	bd08      	pop	{r3, pc}
 80a164c:	080601a0 	.word	0x080601a0

080a1650 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a1650:	b508      	push	{r3, lr}
 80a1652:	4b02      	ldr	r3, [pc, #8]	; (80a165c <_malloc_r+0xc>)
 80a1654:	681b      	ldr	r3, [r3, #0]
 80a1656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1658:	9301      	str	r3, [sp, #4]
 80a165a:	bd08      	pop	{r3, pc}
 80a165c:	080601a0 	.word	0x080601a0

080a1660 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a1660:	b508      	push	{r3, lr}
 80a1662:	4b02      	ldr	r3, [pc, #8]	; (80a166c <__errno+0xc>)
 80a1664:	681b      	ldr	r3, [r3, #0]
 80a1666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1668:	9301      	str	r3, [sp, #4]
 80a166a:	bd08      	pop	{r3, pc}
 80a166c:	080601a0 	.word	0x080601a0

080a1670 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1670:	2100      	movs	r1, #0
 80a1672:	f7ff bee9 	b.w	80a1448 <system_delay_ms>

080a1676 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a1676:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1678:	6883      	ldr	r3, [r0, #8]
 80a167a:	4604      	mov	r4, r0
 80a167c:	b90b      	cbnz	r3, 80a1682 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a167e:	f001 fa56 	bl	80a2b2e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1682:	68c3      	ldr	r3, [r0, #12]
 80a1684:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a1686:	68a3      	ldr	r3, [r4, #8]
 80a1688:	b11b      	cbz	r3, 80a1692 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a168a:	2203      	movs	r2, #3
 80a168c:	4621      	mov	r1, r4
 80a168e:	4620      	mov	r0, r4
 80a1690:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1692:	4620      	mov	r0, r4
}
 80a1694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1698:	2110      	movs	r1, #16
 80a169a:	f001 ba46 	b.w	80a2b2a <_ZdlPvj>

080a169e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a169e:	4770      	bx	lr

080a16a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a16a0:	2000      	movs	r0, #0
 80a16a2:	4770      	bx	lr

080a16a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a16a4:	b510      	push	{r4, lr}
 80a16a6:	4604      	mov	r4, r0
 80a16a8:	2110      	movs	r1, #16
 80a16aa:	f001 fa3e 	bl	80a2b2a <_ZdlPvj>
 80a16ae:	4620      	mov	r0, r4
 80a16b0:	bd10      	pop	{r4, pc}

080a16b2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a16b2:	b508      	push	{r3, lr}
      { delete this; }
 80a16b4:	b108      	cbz	r0, 80a16ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a16b6:	f7ff fff5 	bl	80a16a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a16ba:	bd08      	pop	{r3, pc}

080a16bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a16bc:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a16be:	68c4      	ldr	r4, [r0, #12]
 80a16c0:	b1ec      	cbz	r4, 80a16fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a16c2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a16c4:	2b02      	cmp	r3, #2
 80a16c6:	d102      	bne.n	80a16ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a16c8:	68e0      	ldr	r0, [r4, #12]
 80a16ca:	f7ff ff91 	bl	80a15f0 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a16ce:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a16d0:	b135      	cbz	r5, 80a16e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a16d2:	4628      	mov	r0, r5
 80a16d4:	f7fe fdc2 	bl	80a025c <_ZNSt14_Function_baseD1Ev>
 80a16d8:	2110      	movs	r1, #16
 80a16da:	4628      	mov	r0, r5
 80a16dc:	f001 fa25 	bl	80a2b2a <_ZdlPvj>
 80a16e0:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a16e2:	b135      	cbz	r5, 80a16f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
 80a16e4:	4628      	mov	r0, r5
 80a16e6:	f7fe fdb9 	bl	80a025c <_ZNSt14_Function_baseD1Ev>
 80a16ea:	2110      	movs	r1, #16
 80a16ec:	4628      	mov	r0, r5
 80a16ee:	f001 fa1c 	bl	80a2b2a <_ZdlPvj>
 80a16f2:	4620      	mov	r0, r4
 80a16f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a16f8:	2114      	movs	r1, #20
 80a16fa:	f001 ba16 	b.w	80a2b2a <_ZdlPvj>
 80a16fe:	bd38      	pop	{r3, r4, r5, pc}

080a1700 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a1700:	b510      	push	{r4, lr}
 80a1702:	b088      	sub	sp, #32
 80a1704:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a1706:	4668      	mov	r0, sp
 80a1708:	f000 fe40 	bl	80a238c <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a170c:	4669      	mov	r1, sp
 80a170e:	a804      	add	r0, sp, #16
 80a1710:	f000 fe5e 	bl	80a23d0 <_ZN6StringC1ERKS_>
 80a1714:	a804      	add	r0, sp, #16
 80a1716:	47a0      	blx	r4
 80a1718:	4604      	mov	r4, r0
 80a171a:	a804      	add	r0, sp, #16
 80a171c:	f000 fdef 	bl	80a22fe <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a1720:	4668      	mov	r0, sp
 80a1722:	f000 fdec 	bl	80a22fe <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a1726:	4620      	mov	r0, r4
 80a1728:	b008      	add	sp, #32
 80a172a:	bd10      	pop	{r4, pc}

080a172c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a172c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a172e:	4607      	mov	r7, r0
 80a1730:	460e      	mov	r6, r1
 80a1732:	4615      	mov	r5, r2
 80a1734:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 80a1736:	2410      	movs	r4, #16
 80a1738:	4622      	mov	r2, r4
 80a173a:	2100      	movs	r1, #0
 80a173c:	4668      	mov	r0, sp
 80a173e:	f004 f86c 	bl	80a581a <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a1742:	2200      	movs	r2, #0
 80a1744:	4669      	mov	r1, sp
 80a1746:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 80a1748:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 80a174c:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a174e:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a1750:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a1752:	f7ff febd 	bl	80a14d0 <spark_function>
}
 80a1756:	b005      	add	sp, #20
 80a1758:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a175a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a175a:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a175c:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a175e:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a1760:	b17c      	cbz	r4, 80a1782 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a1762:	6863      	ldr	r3, [r4, #4]
 80a1764:	3b01      	subs	r3, #1
 80a1766:	6063      	str	r3, [r4, #4]
 80a1768:	b95b      	cbnz	r3, 80a1782 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a176a:	6823      	ldr	r3, [r4, #0]
 80a176c:	4620      	mov	r0, r4
 80a176e:	689b      	ldr	r3, [r3, #8]
 80a1770:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1772:	68a3      	ldr	r3, [r4, #8]
 80a1774:	3b01      	subs	r3, #1
 80a1776:	60a3      	str	r3, [r4, #8]
 80a1778:	b91b      	cbnz	r3, 80a1782 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a177a:	6823      	ldr	r3, [r4, #0]
 80a177c:	4620      	mov	r0, r4
 80a177e:	68db      	ldr	r3, [r3, #12]
 80a1780:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a1782:	4628      	mov	r0, r5
 80a1784:	bd38      	pop	{r3, r4, r5, pc}

080a1786 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a1786:	b513      	push	{r0, r1, r4, lr}
 80a1788:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a178a:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a178e:	2300      	movs	r3, #0
 80a1790:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1792:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1794:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a1796:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1798:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a179a:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a179c:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a179e:	f7ff ffdc 	bl	80a175a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a17a2:	4620      	mov	r0, r4
 80a17a4:	b002      	add	sp, #8
 80a17a6:	bd10      	pop	{r4, pc}

080a17a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a17a8:	680b      	ldr	r3, [r1, #0]
 80a17aa:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a17ac:	b113      	cbz	r3, 80a17b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a17ae:	685a      	ldr	r2, [r3, #4]
 80a17b0:	3201      	adds	r2, #1
 80a17b2:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a17b4:	4770      	bx	lr

080a17b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a17b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a17b8:	460c      	mov	r4, r1
 80a17ba:	4606      	mov	r6, r0
 80a17bc:	460f      	mov	r7, r1
 80a17be:	f854 3b04 	ldr.w	r3, [r4], #4
 80a17c2:	ad02      	add	r5, sp, #8
 80a17c4:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a17c8:	4621      	mov	r1, r4
 80a17ca:	a801      	add	r0, sp, #4
 80a17cc:	f7ff ffec 	bl	80a17a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a17d0:	4629      	mov	r1, r5
 80a17d2:	4630      	mov	r0, r6
 80a17d4:	f7ff ffd7 	bl	80a1786 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a17d8:	a801      	add	r0, sp, #4
 80a17da:	f7ff ffbe 	bl	80a175a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a17de:	4620      	mov	r0, r4
 80a17e0:	f7ff ffbb 	bl	80a175a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a17e4:	4638      	mov	r0, r7
 80a17e6:	2108      	movs	r1, #8
 80a17e8:	f001 f99f 	bl	80a2b2a <_ZdlPvj>
        return p;
    }
 80a17ec:	4630      	mov	r0, r6
 80a17ee:	b003      	add	sp, #12
 80a17f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a17f2 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a17f2:	b513      	push	{r0, r1, r4, lr}
 80a17f4:	460b      	mov	r3, r1
 80a17f6:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a17f8:	c803      	ldmia	r0, {r0, r1}
 80a17fa:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a17fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a1802:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1806:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a180a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a180e:	b002      	add	sp, #8
 80a1810:	bd10      	pop	{r4, pc}

080a1812 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1812:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a1814:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1816:	b90a      	cbnz	r2, 80a181c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a1818:	f001 f989 	bl	80a2b2e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a181c:	68c3      	ldr	r3, [r0, #12]
    }
 80a181e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1822:	4718      	bx	r3

080a1824 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1824:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1826:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1828:	f100 0110 	add.w	r1, r0, #16
 80a182c:	f7ff fff1 	bl	80a1812 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1830:	bd08      	pop	{r3, pc}

080a1832 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1832:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a1834:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1836:	b90a      	cbnz	r2, 80a183c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a1838:	f001 f979 	bl	80a2b2e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a183c:	68c3      	ldr	r3, [r0, #12]
    }
 80a183e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1842:	4718      	bx	r3

080a1844 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1844:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1846:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1848:	f100 0110 	add.w	r1, r0, #16
 80a184c:	f7ff fff1 	bl	80a1832 <_ZNKSt8functionIFvRKbEEclES1_>
 80a1850:	bd08      	pop	{r3, pc}

080a1852 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1852:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1854:	2300      	movs	r3, #0
 80a1856:	6083      	str	r3, [r0, #8]
 80a1858:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a185a:	4604      	mov	r4, r0
 80a185c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a185e:	b12b      	cbz	r3, 80a186c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1860:	2202      	movs	r2, #2
 80a1862:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1864:	68eb      	ldr	r3, [r5, #12]
 80a1866:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1868:	68ab      	ldr	r3, [r5, #8]
 80a186a:	60a3      	str	r3, [r4, #8]
	}
    }
 80a186c:	4620      	mov	r0, r4
 80a186e:	bd38      	pop	{r3, r4, r5, pc}

080a1870 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a1870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 80a1874:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a1878:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a187a:	f04f 0002 	mov.w	r0, #2
 80a187e:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1880:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1884:	808b      	strh	r3, [r1, #4]
 80a1886:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1888:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a188a:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 80a188e:	600b      	str	r3, [r1, #0]
 80a1890:	e8d4 1f4f 	ldrexb	r1, [r4]
 80a1894:	4299      	cmp	r1, r3
 80a1896:	d103      	bne.n	80a18a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 80a1898:	e8c4 0f45 	strexb	r5, r0, [r4]
 80a189c:	2d00      	cmp	r5, #0
 80a189e:	d1f7      	bne.n	80a1890 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a18a0:	d002      	beq.n	80a18a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 80a18a2:	f88d 1000 	strb.w	r1, [sp]
 80a18a6:	e06c      	b.n	80a1982 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x112>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a18a8:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a18ac:	bf1c      	itt	ne
 80a18ae:	60e7      	strne	r7, [r4, #12]
 80a18b0:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a18b2:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 80a18b6:	bf18      	it	ne
 80a18b8:	461f      	movne	r7, r3
 80a18ba:	2301      	movs	r3, #1
 80a18bc:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a18be:	f3bf 8f5f 	dmb	sy
 80a18c2:	f104 0308 	add.w	r3, r4, #8
 80a18c6:	2000      	movs	r0, #0
 80a18c8:	e853 6f00 	ldrex	r6, [r3]
 80a18cc:	e843 0200 	strex	r2, r0, [r3]
 80a18d0:	2a00      	cmp	r2, #0
 80a18d2:	d1f9      	bne.n	80a18c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 80a18d4:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a18d8:	2e00      	cmp	r6, #0
 80a18da:	d052      	beq.n	80a1982 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x112>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a18dc:	f7ff fdc4 	bl	80a1468 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a18e0:	b120      	cbz	r0, 80a18ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a18e2:	4629      	mov	r1, r5
 80a18e4:	4630      	mov	r0, r6
 80a18e6:	f7ff ff94 	bl	80a1812 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a18ea:	e043      	b.n	80a1974 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a18ec:	4631      	mov	r1, r6
 80a18ee:	4668      	mov	r0, sp
 80a18f0:	f7ff ffaf 	bl	80a1852 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a18f4:	68e0      	ldr	r0, [r4, #12]
 80a18f6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a18fa:	b108      	cbz	r0, 80a1900 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 80a18fc:	f003 ffd0 	bl	80a58a0 <strdup>
 80a1900:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1902:	2010      	movs	r0, #16
 80a1904:	f8ad 5014 	strh.w	r5, [sp, #20]
 80a1908:	f7fe fbc7 	bl	80a009a <_Znwj>
 80a190c:	4605      	mov	r5, r0
 80a190e:	b330      	cbz	r0, 80a195e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1910:	f04f 0800 	mov.w	r8, #0
 80a1914:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1918:	2018      	movs	r0, #24
 80a191a:	f7fe fbbe 	bl	80a009a <_Znwj>
 80a191e:	4604      	mov	r4, r0
 80a1920:	b1c0      	cbz	r0, 80a1954 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1922:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1926:	4601      	mov	r1, r0
 80a1928:	4668      	mov	r0, sp
 80a192a:	f7ff ff62 	bl	80a17f2 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a192e:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a1930:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1932:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1934:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1936:	9202      	str	r2, [sp, #8]
 80a1938:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a193a:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a193c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80a1940:	9203      	str	r2, [sp, #12]
 80a1942:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1944:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a1948:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a194c:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a194e:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1952:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1954:	4b0e      	ldr	r3, [pc, #56]	; (80a1990 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1956:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1958:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a195a:	4b0e      	ldr	r3, [pc, #56]	; (80a1994 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 80a195c:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a195e:	9804      	ldr	r0, [sp, #16]
 80a1960:	f7ff fe46 	bl	80a15f0 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1964:	4668      	mov	r0, sp
 80a1966:	f7fe fc79 	bl	80a025c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a196a:	2200      	movs	r2, #0
 80a196c:	4629      	mov	r1, r5
 80a196e:	480a      	ldr	r0, [pc, #40]	; (80a1998 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x128>)
 80a1970:	f7ff fd82 	bl	80a1478 <application_thread_invoke>
 80a1974:	4630      	mov	r0, r6
 80a1976:	f7fe fc71 	bl	80a025c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a197a:	2110      	movs	r1, #16
 80a197c:	4630      	mov	r0, r6
 80a197e:	f001 f8d4 	bl	80a2b2a <_ZdlPvj>
 80a1982:	4638      	mov	r0, r7
 80a1984:	f7ff fe34 	bl	80a15f0 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 80a1988:	b006      	add	sp, #24
 80a198a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a198e:	bf00      	nop
 80a1990:	080a1825 	.word	0x080a1825
 80a1994:	080a1a85 	.word	0x080a1a85
 80a1998:	080a1677 	.word	0x080a1677

080a199c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a199c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a19a0:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a19a2:	ad07      	add	r5, sp, #28
 80a19a4:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a19a8:	4606      	mov	r6, r0
 80a19aa:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a19ac:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a19ae:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a19b0:	460f      	mov	r7, r1
 80a19b2:	4690      	mov	r8, r2
 80a19b4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a19b8:	f8c5 b004 	str.w	fp, [r5, #4]
 80a19bc:	f8c5 b008 	str.w	fp, [r5, #8]
 80a19c0:	9307      	str	r3, [sp, #28]
 80a19c2:	f7fe fb6a 	bl	80a009a <_Znwj>
 80a19c6:	4604      	mov	r4, r0
 80a19c8:	b138      	cbz	r0, 80a19da <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a19ca:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a19ce:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a19d2:	f8c0 b004 	str.w	fp, [r0, #4]
 80a19d6:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a19da:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a19dc:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a19de:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a19e0:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a19e2:	f7fe fb5a 	bl	80a009a <_Znwj>
 80a19e6:	b128      	cbz	r0, 80a19f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a19e8:	2301      	movs	r3, #1
 80a19ea:	6043      	str	r3, [r0, #4]
 80a19ec:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a19ee:	4b23      	ldr	r3, [pc, #140]	; (80a1a7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 80a19f0:	60c4      	str	r4, [r0, #12]
 80a19f2:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a19f4:	4b22      	ldr	r3, [pc, #136]	; (80a1a80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a19f6:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a19f8:	2008      	movs	r0, #8
 80a19fa:	9308      	str	r3, [sp, #32]
 80a19fc:	f7fe fb4d 	bl	80a009a <_Znwj>
 80a1a00:	4604      	mov	r4, r0
 80a1a02:	b128      	cbz	r0, 80a1a10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1a04:	9b03      	ldr	r3, [sp, #12]
 80a1a06:	a904      	add	r1, sp, #16
 80a1a08:	f840 3b04 	str.w	r3, [r0], #4
 80a1a0c:	f7ff fecc 	bl	80a17a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1a10:	9500      	str	r5, [sp, #0]
 80a1a12:	fa5f f38a 	uxtb.w	r3, sl
 80a1a16:	464a      	mov	r2, r9
 80a1a18:	4641      	mov	r1, r8
 80a1a1a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a1a1c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1a1e:	f7ff fd6f 	bl	80a1500 <spark_send_event>
 80a1a22:	b9b8      	cbnz	r0, 80a1a54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a1a24:	9b03      	ldr	r3, [sp, #12]
 80a1a26:	785b      	ldrb	r3, [r3, #1]
 80a1a28:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1a2c:	b993      	cbnz	r3, 80a1a54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1a2e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a1a32:	a905      	add	r1, sp, #20
 80a1a34:	a803      	add	r0, sp, #12
 80a1a36:	9205      	str	r2, [sp, #20]
 80a1a38:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1a3c:	f7ff ff18 	bl	80a1870 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1a40:	9805      	ldr	r0, [sp, #20]
 80a1a42:	f7ff fdd5 	bl	80a15f0 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1a46:	a805      	add	r0, sp, #20
 80a1a48:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1a4a:	f7ff feb4 	bl	80a17b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1a4e:	a806      	add	r0, sp, #24
 80a1a50:	f7ff fe83 	bl	80a175a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1a54:	9b03      	ldr	r3, [sp, #12]
 80a1a56:	a904      	add	r1, sp, #16
 80a1a58:	a806      	add	r0, sp, #24
 80a1a5a:	9305      	str	r3, [sp, #20]
 80a1a5c:	f7ff fea4 	bl	80a17a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a1a60:	a905      	add	r1, sp, #20
 80a1a62:	4630      	mov	r0, r6
 80a1a64:	f7ff fe8f 	bl	80a1786 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1a68:	a806      	add	r0, sp, #24
 80a1a6a:	f7ff fe76 	bl	80a175a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1a6e:	a804      	add	r0, sp, #16
 80a1a70:	f7ff fe73 	bl	80a175a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a1a74:	4630      	mov	r0, r6
 80a1a76:	b00b      	add	sp, #44	; 0x2c
 80a1a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1a7c:	080a6340 	.word	0x080a6340
 80a1a80:	080a1bf1 	.word	0x080a1bf1

080a1a84 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1a84:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a88:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1a8a:	d006      	beq.n	80a1a9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a1a8c:	2a03      	cmp	r2, #3
 80a1a8e:	d017      	beq.n	80a1ac0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a1a90:	2a01      	cmp	r2, #1
 80a1a92:	d121      	bne.n	80a1ad8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1a94:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1a96:	6003      	str	r3, [r0, #0]
	      break;
 80a1a98:	e01e      	b.n	80a1ad8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1a9a:	2018      	movs	r0, #24
 80a1a9c:	680e      	ldr	r6, [r1, #0]
 80a1a9e:	f7fe fafc 	bl	80a009a <_Znwj>
 80a1aa2:	4605      	mov	r5, r0
 80a1aa4:	b150      	cbz	r0, 80a1abc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1aa6:	4631      	mov	r1, r6
 80a1aa8:	f7ff fed3 	bl	80a1852 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1aac:	6930      	ldr	r0, [r6, #16]
 80a1aae:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1ab2:	b108      	cbz	r0, 80a1ab8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a1ab4:	f003 fef4 	bl	80a58a0 <strdup>
 80a1ab8:	6128      	str	r0, [r5, #16]
 80a1aba:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1abc:	6025      	str	r5, [r4, #0]
 80a1abe:	e00b      	b.n	80a1ad8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1ac0:	6804      	ldr	r4, [r0, #0]
 80a1ac2:	b14c      	cbz	r4, 80a1ad8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1ac4:	6920      	ldr	r0, [r4, #16]
 80a1ac6:	f7ff fd93 	bl	80a15f0 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1aca:	4620      	mov	r0, r4
 80a1acc:	f7fe fbc6 	bl	80a025c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1ad0:	2118      	movs	r1, #24
 80a1ad2:	4620      	mov	r0, r4
 80a1ad4:	f001 f829 	bl	80a2b2a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1ad8:	2000      	movs	r0, #0
 80a1ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1adc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1adc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1ade:	2300      	movs	r3, #0
 80a1ae0:	6083      	str	r3, [r0, #8]
 80a1ae2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1ae4:	4604      	mov	r4, r0
 80a1ae6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1ae8:	b12b      	cbz	r3, 80a1af6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1aea:	2202      	movs	r2, #2
 80a1aec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1aee:	68eb      	ldr	r3, [r5, #12]
 80a1af0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1af2:	68ab      	ldr	r3, [r5, #8]
 80a1af4:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1af6:	4620      	mov	r0, r4
 80a1af8:	bd38      	pop	{r3, r4, r5, pc}

080a1afa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1afa:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1afc:	b570      	push	{r4, r5, r6, lr}
 80a1afe:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1b00:	d006      	beq.n	80a1b10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a1b02:	2a03      	cmp	r2, #3
 80a1b04:	d011      	beq.n	80a1b2a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a1b06:	2a01      	cmp	r2, #1
 80a1b08:	d118      	bne.n	80a1b3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1b0a:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1b0c:	6003      	str	r3, [r0, #0]
	      break;
 80a1b0e:	e015      	b.n	80a1b3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1b10:	2014      	movs	r0, #20
 80a1b12:	680e      	ldr	r6, [r1, #0]
 80a1b14:	f7fe fac1 	bl	80a009a <_Znwj>
 80a1b18:	4605      	mov	r5, r0
 80a1b1a:	b120      	cbz	r0, 80a1b26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1b1c:	4631      	mov	r1, r6
 80a1b1e:	f7ff ffdd 	bl	80a1adc <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1b22:	7c33      	ldrb	r3, [r6, #16]
 80a1b24:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1b26:	6025      	str	r5, [r4, #0]
 80a1b28:	e008      	b.n	80a1b3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1b2a:	6804      	ldr	r4, [r0, #0]
 80a1b2c:	b134      	cbz	r4, 80a1b3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1b2e:	4620      	mov	r0, r4
 80a1b30:	f7fe fb94 	bl	80a025c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1b34:	2114      	movs	r1, #20
 80a1b36:	4620      	mov	r0, r4
 80a1b38:	f000 fff7 	bl	80a2b2a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1b3c:	2000      	movs	r0, #0
 80a1b3e:	bd70      	pop	{r4, r5, r6, pc}

080a1b40 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a1b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1b42:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1b44:	f3bf 8f5f 	dmb	sy
 80a1b48:	b087      	sub	sp, #28
 80a1b4a:	2300      	movs	r3, #0
 80a1b4c:	e850 6f00 	ldrex	r6, [r0]
 80a1b50:	e840 3200 	strex	r2, r3, [r0]
 80a1b54:	2a00      	cmp	r2, #0
 80a1b56:	d1f9      	bne.n	80a1b4c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a1b58:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1b5c:	2e00      	cmp	r6, #0
 80a1b5e:	d03f      	beq.n	80a1be0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1b60:	4618      	mov	r0, r3
 80a1b62:	f7ff fc81 	bl	80a1468 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1b66:	4607      	mov	r7, r0
 80a1b68:	b120      	cbz	r0, 80a1b74 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1b6a:	4621      	mov	r1, r4
 80a1b6c:	4630      	mov	r0, r6
 80a1b6e:	f7ff fe60 	bl	80a1832 <_ZNKSt8functionIFvRKbEEclES1_>
 80a1b72:	e02e      	b.n	80a1bd2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1b74:	4631      	mov	r1, r6
 80a1b76:	a801      	add	r0, sp, #4
 80a1b78:	f7ff ffb0 	bl	80a1adc <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1b7c:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1b7e:	2010      	movs	r0, #16
 80a1b80:	f88d 3014 	strb.w	r3, [sp, #20]
 80a1b84:	f7fe fa89 	bl	80a009a <_Znwj>
 80a1b88:	4605      	mov	r5, r0
 80a1b8a:	b1d0      	cbz	r0, 80a1bc2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1b8c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1b8e:	2014      	movs	r0, #20
 80a1b90:	f7fe fa83 	bl	80a009a <_Znwj>
 80a1b94:	4604      	mov	r4, r0
 80a1b96:	b178      	cbz	r0, 80a1bb8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1b98:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1b9a:	4601      	mov	r1, r0
 80a1b9c:	a801      	add	r0, sp, #4
 80a1b9e:	f7ff fe28 	bl	80a17f2 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1ba2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1ba4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1ba6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1ba8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1baa:	9203      	str	r2, [sp, #12]
 80a1bac:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1bae:	60e3      	str	r3, [r4, #12]
 80a1bb0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1bb4:	9204      	str	r2, [sp, #16]
 80a1bb6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1bb8:	4b0a      	ldr	r3, [pc, #40]	; (80a1be4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1bba:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1bbc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1bbe:	4b0a      	ldr	r3, [pc, #40]	; (80a1be8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a1bc0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1bc2:	a801      	add	r0, sp, #4
 80a1bc4:	f7fe fb4a 	bl	80a025c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1bc8:	2200      	movs	r2, #0
 80a1bca:	4629      	mov	r1, r5
 80a1bcc:	4807      	ldr	r0, [pc, #28]	; (80a1bec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a1bce:	f7ff fc53 	bl	80a1478 <application_thread_invoke>
 80a1bd2:	4630      	mov	r0, r6
 80a1bd4:	f7fe fb42 	bl	80a025c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1bd8:	2110      	movs	r1, #16
 80a1bda:	4630      	mov	r0, r6
 80a1bdc:	f000 ffa5 	bl	80a2b2a <_ZdlPvj>
        }
    }
 80a1be0:	b007      	add	sp, #28
 80a1be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1be4:	080a1845 	.word	0x080a1845
 80a1be8:	080a1afb 	.word	0x080a1afb
 80a1bec:	080a1677 	.word	0x080a1677

080a1bf0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1bf0:	b530      	push	{r4, r5, lr}
 80a1bf2:	4604      	mov	r4, r0
 80a1bf4:	b085      	sub	sp, #20
 80a1bf6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1bf8:	4668      	mov	r0, sp
 80a1bfa:	4611      	mov	r1, r2
 80a1bfc:	f7ff fddb 	bl	80a17b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1c00:	b17c      	cbz	r4, 80a1c22 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1c02:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1c04:	4628      	mov	r0, r5
 80a1c06:	b10d      	cbz	r5, 80a1c0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a1c08:	f003 fe4a 	bl	80a58a0 <strdup>
 80a1c0c:	9002      	str	r0, [sp, #8]
 80a1c0e:	a902      	add	r1, sp, #8
 80a1c10:	4668      	mov	r0, sp
 80a1c12:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a1c16:	f7ff fe2b 	bl	80a1870 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1c1a:	9802      	ldr	r0, [sp, #8]
 80a1c1c:	f7ff fce8 	bl	80a15f0 <free>
 80a1c20:	e01d      	b.n	80a1c5e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1c22:	f04f 0201 	mov.w	r2, #1
 80a1c26:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1c28:	f88d 4008 	strb.w	r4, [sp, #8]
 80a1c2c:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a1c30:	42a3      	cmp	r3, r4
 80a1c32:	d103      	bne.n	80a1c3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a1c34:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a1c38:	2900      	cmp	r1, #0
 80a1c3a:	d1f7      	bne.n	80a1c2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a1c3c:	d002      	beq.n	80a1c44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a1c3e:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1c42:	e00c      	b.n	80a1c5e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a1c44:	f110 010c 	adds.w	r1, r0, #12
 80a1c48:	f04f 0301 	mov.w	r3, #1
 80a1c4c:	bf18      	it	ne
 80a1c4e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1c50:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a1c54:	3004      	adds	r0, #4
 80a1c56:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a1c5a:	f7ff ff71 	bl	80a1b40 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a1c5e:	a801      	add	r0, sp, #4
 80a1c60:	f7ff fd7b 	bl	80a175a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a1c64:	b005      	add	sp, #20
 80a1c66:	bd30      	pop	{r4, r5, pc}

080a1c68 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1c68:	4770      	bx	lr

080a1c6a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1c6c:	4606      	mov	r6, r0
 80a1c6e:	4615      	mov	r5, r2
 80a1c70:	460c      	mov	r4, r1
 80a1c72:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1c74:	42bc      	cmp	r4, r7
 80a1c76:	d006      	beq.n	80a1c86 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1c78:	6833      	ldr	r3, [r6, #0]
 80a1c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1c7e:	689b      	ldr	r3, [r3, #8]
 80a1c80:	4630      	mov	r0, r6
 80a1c82:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1c84:	e7f6      	b.n	80a1c74 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1c86:	4628      	mov	r0, r5
 80a1c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1c8a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1c8a:	2200      	movs	r2, #0
 80a1c8c:	7c00      	ldrb	r0, [r0, #16]
 80a1c8e:	f7ff baf9 	b.w	80a1284 <HAL_I2C_Write_Data>

080a1c92 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1c92:	2100      	movs	r1, #0
 80a1c94:	7c00      	ldrb	r0, [r0, #16]
 80a1c96:	f7ff bafd 	b.w	80a1294 <HAL_I2C_Available_Data>

080a1c9a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1c9a:	2100      	movs	r1, #0
 80a1c9c:	7c00      	ldrb	r0, [r0, #16]
 80a1c9e:	f7ff bb01 	b.w	80a12a4 <HAL_I2C_Read_Data>

080a1ca2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1ca2:	2100      	movs	r1, #0
 80a1ca4:	7c00      	ldrb	r0, [r0, #16]
 80a1ca6:	f7ff bb05 	b.w	80a12b4 <HAL_I2C_Peek_Data>

080a1caa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1caa:	2100      	movs	r1, #0
 80a1cac:	7c00      	ldrb	r0, [r0, #16]
 80a1cae:	f7ff bb09 	b.w	80a12c4 <HAL_I2C_Flush_Data>

080a1cb2 <_ZN7TwoWireD0Ev>:
 80a1cb2:	b510      	push	{r4, lr}
 80a1cb4:	4604      	mov	r4, r0
 80a1cb6:	2114      	movs	r1, #20
 80a1cb8:	f000 ff37 	bl	80a2b2a <_ZdlPvj>
 80a1cbc:	4620      	mov	r0, r4
 80a1cbe:	bd10      	pop	{r4, pc}

080a1cc0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1cc0:	b510      	push	{r4, lr}
 80a1cc2:	4604      	mov	r4, r0
 80a1cc4:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1cca:	60a3      	str	r3, [r4, #8]
 80a1ccc:	4b04      	ldr	r3, [pc, #16]	; (80a1ce0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1cce:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1cd0:	7420      	strb	r0, [r4, #16]
 80a1cd2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1cd4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1cd6:	f7ff fb05 	bl	80a12e4 <HAL_I2C_Init>

}
 80a1cda:	4620      	mov	r0, r4
 80a1cdc:	bd10      	pop	{r4, pc}
 80a1cde:	bf00      	nop
 80a1ce0:	080a635c 	.word	0x080a635c

080a1ce4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1ce4:	2100      	movs	r1, #0
 80a1ce6:	7c00      	ldrb	r0, [r0, #16]
 80a1ce8:	f7ff baf4 	b.w	80a12d4 <HAL_I2C_Is_Enabled>

080a1cec <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1cec:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
 80a1cee:	b510      	push	{r4, lr}
 80a1cf0:	b90a      	cbnz	r2, 80a1cf6 <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
 80a1cf2:	f000 ff1c 	bl	80a2b2e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1cf6:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
 80a1cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1cfc:	4718      	bx	r3
	...

080a1d00 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void detachInterrupt(uint16_t pin)
{
 80a1d00:	b570      	push	{r4, r5, r6, lr}
 80a1d02:	4606      	mov	r6, r0
#if Wiring_Cellular == 1
    /* safety check that prevents users from detaching an interrupt from
     * BATT_INT_PC13 for power management which is shared with D7 */
    if (pin == D7) return;
#endif
    HAL_Interrupts_Detach(pin);
 80a1d04:	f7ff fab6 	bl	80a1274 <HAL_Interrupts_Detach>
    delete handlers[pin];
 80a1d08:	4b07      	ldr	r3, [pc, #28]	; (80a1d28 <_Z15detachInterruptt+0x28>)
 80a1d0a:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 80a1d0e:	461c      	mov	r4, r3
 80a1d10:	b135      	cbz	r5, 80a1d20 <_Z15detachInterruptt+0x20>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1d12:	4628      	mov	r0, r5
 80a1d14:	f7fe faa2 	bl	80a025c <_ZNSt14_Function_baseD1Ev>
 80a1d18:	2110      	movs	r1, #16
 80a1d1a:	4628      	mov	r0, r5
 80a1d1c:	f000 ff05 	bl	80a2b2a <_ZdlPvj>
    handlers[pin] = NULL;
 80a1d20:	2300      	movs	r3, #0
 80a1d22:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
 80a1d26:	bd70      	pop	{r4, r5, r6, pc}
 80a1d28:	200004b4 	.word	0x200004b4

080a1d2c <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1d2c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1d2e:	2300      	movs	r3, #0
 80a1d30:	6083      	str	r3, [r0, #8]
 80a1d32:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1d34:	4604      	mov	r4, r0
 80a1d36:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1d38:	b12b      	cbz	r3, 80a1d46 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1d3a:	2202      	movs	r2, #2
 80a1d3c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1d3e:	68eb      	ldr	r3, [r5, #12]
 80a1d40:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1d42:	68ab      	ldr	r3, [r5, #8]
 80a1d44:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1d46:	4620      	mov	r0, r4
 80a1d48:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1d4c <_Z16allocate_handlertRSt8functionIFvvEE>:
#include "spark_wiring_platform.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 80a1d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
 80a1d4e:	4b0d      	ldr	r3, [pc, #52]	; (80a1d84 <_Z16allocate_handlertRSt8functionIFvvEE+0x38>)
#include "spark_wiring_platform.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 80a1d50:	4606      	mov	r6, r0
    delete handlers[pin];
 80a1d52:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
#include "spark_wiring_platform.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 80a1d56:	460f      	mov	r7, r1
 80a1d58:	461c      	mov	r4, r3
    delete handlers[pin];
 80a1d5a:	b135      	cbz	r5, 80a1d6a <_Z16allocate_handlertRSt8functionIFvvEE+0x1e>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1d5c:	4628      	mov	r0, r5
 80a1d5e:	f7fe fa7d 	bl	80a025c <_ZNSt14_Function_baseD1Ev>
 80a1d62:	2110      	movs	r1, #16
 80a1d64:	4628      	mov	r0, r5
 80a1d66:	f000 fee0 	bl	80a2b2a <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
 80a1d6a:	2010      	movs	r0, #16
 80a1d6c:	f7fe f995 	bl	80a009a <_Znwj>
 80a1d70:	4605      	mov	r5, r0
 80a1d72:	b110      	cbz	r0, 80a1d7a <_Z16allocate_handlertRSt8functionIFvvEE+0x2e>
 80a1d74:	4639      	mov	r1, r7
 80a1d76:	f7ff ffd9 	bl	80a1d2c <_ZNSt8functionIFvvEEC1ERKS1_>
 80a1d7a:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
}
 80a1d7e:	4628      	mov	r0, r5
 80a1d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1d82:	bf00      	nop
 80a1d84:	200004b4 	.word	0x200004b4

080a1d88 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a1d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1d8a:	460c      	mov	r4, r1
 80a1d8c:	4605      	mov	r5, r0
 80a1d8e:	b085      	sub	sp, #20
 80a1d90:	4617      	mov	r7, r2
 80a1d92:	461e      	mov	r6, r3
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
 80a1d94:	f7ff fa6e 	bl	80a1274 <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
 80a1d98:	4621      	mov	r1, r4
 80a1d9a:	4628      	mov	r0, r5
 80a1d9c:	f7ff ffd6 	bl	80a1d4c <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
 80a1da0:	4604      	mov	r4, r0
 80a1da2:	b1b8      	cbz	r0, 80a1dd4 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x4c>
        HAL_InterruptExtraConfiguration extra = {0};
 80a1da4:	2100      	movs	r1, #0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a1da6:	2304      	movs	r3, #4
  if (priority >= 0) {
 80a1da8:	428e      	cmp	r6, r1
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
 80a1daa:	9103      	str	r1, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a1dac:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a1db0:	bfb4      	ite	lt
 80a1db2:	460b      	movlt	r3, r1
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a1db4:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1db8:	4602      	mov	r2, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a1dba:	bfa4      	itt	ge
 80a1dbc:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a1dc0:	ab03      	addge	r3, sp, #12
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1dc2:	9300      	str	r3, [sp, #0]
 80a1dc4:	4906      	ldr	r1, [pc, #24]	; (80a1de0 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>)
 80a1dc6:	463b      	mov	r3, r7
 80a1dc8:	4628      	mov	r0, r5

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a1dca:	bfa8      	it	ge
 80a1dcc:	f88d 600d 	strbge.w	r6, [sp, #13]
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1dd0:	f7ff fa48 	bl	80a1264 <HAL_Interrupts_Attach>
    }
    return handler!=NULL;
}
 80a1dd4:	1c20      	adds	r0, r4, #0
 80a1dd6:	bf18      	it	ne
 80a1dd8:	2001      	movne	r0, #1
 80a1dda:	b005      	add	sp, #20
 80a1ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1dde:	bf00      	nop
 80a1de0:	080a1ced 	.word	0x080a1ced

080a1de4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1de4:	4770      	bx	lr

080a1de6 <_ZN9IPAddressD0Ev>:
 80a1de6:	b510      	push	{r4, lr}
 80a1de8:	4604      	mov	r4, r0
 80a1dea:	2118      	movs	r1, #24
 80a1dec:	f000 fe9d 	bl	80a2b2a <_ZdlPvj>
 80a1df0:	4620      	mov	r0, r4
 80a1df2:	bd10      	pop	{r4, pc}

080a1df4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1df6:	460f      	mov	r7, r1
 80a1df8:	f100 0608 	add.w	r6, r0, #8
 80a1dfc:	1d05      	adds	r5, r0, #4
 80a1dfe:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1e00:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1e04:	220a      	movs	r2, #10
 80a1e06:	4638      	mov	r0, r7
 80a1e08:	f000 f92b 	bl	80a2062 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1e0c:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1e0e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1e10:	d007      	beq.n	80a1e22 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1e12:	2c00      	cmp	r4, #0
 80a1e14:	d0f4      	beq.n	80a1e00 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1e16:	212e      	movs	r1, #46	; 0x2e
 80a1e18:	4638      	mov	r0, r7
 80a1e1a:	f000 f8df 	bl	80a1fdc <_ZN5Print5printEc>
 80a1e1e:	4404      	add	r4, r0
 80a1e20:	e7ee      	b.n	80a1e00 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1e22:	4620      	mov	r0, r4
 80a1e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1e28 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1e28:	b510      	push	{r4, lr}
 80a1e2a:	4604      	mov	r4, r0
 80a1e2c:	4b04      	ldr	r3, [pc, #16]	; (80a1e40 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1e2e:	2211      	movs	r2, #17
 80a1e30:	f840 3b04 	str.w	r3, [r0], #4
 80a1e34:	2100      	movs	r1, #0
 80a1e36:	f003 fcf0 	bl	80a581a <memset>
{
    clear();
}
 80a1e3a:	4620      	mov	r0, r4
 80a1e3c:	bd10      	pop	{r4, pc}
 80a1e3e:	bf00      	nop
 80a1e40:	080a6384 	.word	0x080a6384

080a1e44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1e44:	4603      	mov	r3, r0
 80a1e46:	4a07      	ldr	r2, [pc, #28]	; (80a1e64 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1e48:	b510      	push	{r4, lr}
 80a1e4a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1e4e:	f101 0210 	add.w	r2, r1, #16
 80a1e52:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1e56:	4291      	cmp	r1, r2
 80a1e58:	f843 4b04 	str.w	r4, [r3], #4
 80a1e5c:	d1f9      	bne.n	80a1e52 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1e5e:	780a      	ldrb	r2, [r1, #0]
 80a1e60:	701a      	strb	r2, [r3, #0]
}
 80a1e62:	bd10      	pop	{r4, pc}
 80a1e64:	080a6384 	.word	0x080a6384

080a1e68 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1e68:	4a02      	ldr	r2, [pc, #8]	; (80a1e74 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1e6a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1e6c:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1e6e:	2204      	movs	r2, #4
 80a1e70:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1e72:	4770      	bx	lr
 80a1e74:	080a6384 	.word	0x080a6384

080a1e78 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1e78:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1e7a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1e7e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1e82:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1e86:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a1e8a:	2304      	movs	r3, #4
 80a1e8c:	6041      	str	r1, [r0, #4]
 80a1e8e:	7503      	strb	r3, [r0, #20]
 80a1e90:	bd10      	pop	{r4, pc}
	...

080a1e94 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1e96:	4d04      	ldr	r5, [pc, #16]	; (80a1ea8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1e98:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1e9a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1e9e:	9500      	str	r5, [sp, #0]
 80a1ea0:	f7ff ffea 	bl	80a1e78 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1ea4:	b003      	add	sp, #12
 80a1ea6:	bd30      	pop	{r4, r5, pc}
 80a1ea8:	080a6384 	.word	0x080a6384

080a1eac <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1eac:	4a01      	ldr	r2, [pc, #4]	; (80a1eb4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1eae:	4b02      	ldr	r3, [pc, #8]	; (80a1eb8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1eb0:	601a      	str	r2, [r3, #0]
 80a1eb2:	4770      	bx	lr
 80a1eb4:	080a6449 	.word	0x080a6449
 80a1eb8:	20000514 	.word	0x20000514

080a1ebc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1ebc:	2300      	movs	r3, #0
 80a1ebe:	461a      	mov	r2, r3
 80a1ec0:	6840      	ldr	r0, [r0, #4]
 80a1ec2:	f7ff bb3d 	b.w	80a1540 <network_connect>

080a1ec6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1ec6:	2200      	movs	r2, #0
 80a1ec8:	2102      	movs	r1, #2
 80a1eca:	6840      	ldr	r0, [r0, #4]
 80a1ecc:	f7ff bb48 	b.w	80a1560 <network_disconnect>

080a1ed0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1ed0:	2200      	movs	r2, #0
 80a1ed2:	4611      	mov	r1, r2
 80a1ed4:	6840      	ldr	r0, [r0, #4]
 80a1ed6:	f7ff bb3b 	b.w	80a1550 <network_connecting>

080a1eda <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1eda:	2200      	movs	r2, #0
 80a1edc:	4611      	mov	r1, r2
 80a1ede:	6840      	ldr	r0, [r0, #4]
 80a1ee0:	f7ff bb46 	b.w	80a1570 <network_ready>

080a1ee4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1ee4:	2300      	movs	r3, #0
 80a1ee6:	461a      	mov	r2, r3
 80a1ee8:	4619      	mov	r1, r3
 80a1eea:	6840      	ldr	r0, [r0, #4]
 80a1eec:	f7ff bb48 	b.w	80a1580 <network_on>

080a1ef0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1ef0:	2300      	movs	r3, #0
 80a1ef2:	461a      	mov	r2, r3
 80a1ef4:	4619      	mov	r1, r3
 80a1ef6:	6840      	ldr	r0, [r0, #4]
 80a1ef8:	f7ff bb4a 	b.w	80a1590 <network_off>

080a1efc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1efc:	2200      	movs	r2, #0
 80a1efe:	f081 0101 	eor.w	r1, r1, #1
 80a1f02:	6840      	ldr	r0, [r0, #4]
 80a1f04:	f7ff bb4c 	b.w	80a15a0 <network_listen>

080a1f08 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1f08:	2200      	movs	r2, #0
 80a1f0a:	6840      	ldr	r0, [r0, #4]
 80a1f0c:	f7ff bb58 	b.w	80a15c0 <network_set_listen_timeout>

080a1f10 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1f10:	2200      	movs	r2, #0
 80a1f12:	4611      	mov	r1, r2
 80a1f14:	6840      	ldr	r0, [r0, #4]
 80a1f16:	f7ff bb5b 	b.w	80a15d0 <network_get_listen_timeout>

080a1f1a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1f1a:	2200      	movs	r2, #0
 80a1f1c:	4611      	mov	r1, r2
 80a1f1e:	6840      	ldr	r0, [r0, #4]
 80a1f20:	f7ff bb46 	b.w	80a15b0 <network_listening>

080a1f24 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1f24:	b570      	push	{r4, r5, r6, lr}
 80a1f26:	4616      	mov	r6, r2
 80a1f28:	b08e      	sub	sp, #56	; 0x38
 80a1f2a:	4604      	mov	r4, r0
    IPAddress addr;
 80a1f2c:	a808      	add	r0, sp, #32
 80a1f2e:	f7ff ff7b 	bl	80a1e28 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1f32:	2211      	movs	r2, #17
 80a1f34:	2100      	movs	r1, #0
 80a1f36:	a803      	add	r0, sp, #12
 80a1f38:	f003 fc6f 	bl	80a581a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1f3c:	4630      	mov	r0, r6
 80a1f3e:	f003 fcca 	bl	80a58d6 <strlen>
 80a1f42:	2500      	movs	r5, #0
 80a1f44:	4b0a      	ldr	r3, [pc, #40]	; (80a1f70 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1f46:	9500      	str	r5, [sp, #0]
 80a1f48:	b281      	uxth	r1, r0
 80a1f4a:	685b      	ldr	r3, [r3, #4]
 80a1f4c:	aa03      	add	r2, sp, #12
 80a1f4e:	4630      	mov	r0, r6
 80a1f50:	f7ff fa5a 	bl	80a1408 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1f54:	b120      	cbz	r0, 80a1f60 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a1f56:	4629      	mov	r1, r5
 80a1f58:	4620      	mov	r0, r4
 80a1f5a:	f7ff ff85 	bl	80a1e68 <_ZN9IPAddressC1Em>
 80a1f5e:	e003      	b.n	80a1f68 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1f60:	a903      	add	r1, sp, #12
 80a1f62:	4620      	mov	r0, r4
 80a1f64:	f7ff ff6e 	bl	80a1e44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1f68:	4620      	mov	r0, r4
 80a1f6a:	b00e      	add	sp, #56	; 0x38
 80a1f6c:	bd70      	pop	{r4, r5, r6, pc}
 80a1f6e:	bf00      	nop
 80a1f70:	200009a0 	.word	0x200009a0

080a1f74 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1f74:	4b02      	ldr	r3, [pc, #8]	; (80a1f80 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1f76:	4a03      	ldr	r2, [pc, #12]	; (80a1f84 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1f78:	601a      	str	r2, [r3, #0]
 80a1f7a:	2200      	movs	r2, #0
 80a1f7c:	605a      	str	r2, [r3, #4]
 80a1f7e:	4770      	bx	lr
 80a1f80:	20000518 	.word	0x20000518
 80a1f84:	080a6470 	.word	0x080a6470

080a1f88 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1f8a:	4606      	mov	r6, r0
 80a1f8c:	460d      	mov	r5, r1
 80a1f8e:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1f90:	2400      	movs	r4, #0
  while (size--) {
 80a1f92:	42bd      	cmp	r5, r7
 80a1f94:	d00c      	beq.n	80a1fb0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1f96:	6833      	ldr	r3, [r6, #0]
 80a1f98:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1f9c:	689b      	ldr	r3, [r3, #8]
 80a1f9e:	4630      	mov	r0, r6
 80a1fa0:	4798      	blx	r3
     if (chunk>=0)
 80a1fa2:	2800      	cmp	r0, #0
 80a1fa4:	db01      	blt.n	80a1faa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1fa6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1fa8:	e7f3      	b.n	80a1f92 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1faa:	2c00      	cmp	r4, #0
 80a1fac:	bf08      	it	eq
 80a1fae:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1fb0:	4620      	mov	r0, r4
 80a1fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1fb4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1fb4:	b570      	push	{r4, r5, r6, lr}
 80a1fb6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1fb8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1fba:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1fbc:	b149      	cbz	r1, 80a1fd2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1fbe:	f003 fc8a 	bl	80a58d6 <strlen>
 80a1fc2:	682b      	ldr	r3, [r5, #0]
 80a1fc4:	4602      	mov	r2, r0
 80a1fc6:	4621      	mov	r1, r4
 80a1fc8:	4628      	mov	r0, r5
    }
 80a1fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1fce:	68db      	ldr	r3, [r3, #12]
 80a1fd0:	4718      	bx	r3
    }
 80a1fd2:	bd70      	pop	{r4, r5, r6, pc}

080a1fd4 <_ZN5Print5printEPKc>:
 80a1fd4:	b508      	push	{r3, lr}
 80a1fd6:	f7ff ffed 	bl	80a1fb4 <_ZN5Print5writeEPKc>
 80a1fda:	bd08      	pop	{r3, pc}

080a1fdc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1fdc:	6803      	ldr	r3, [r0, #0]
 80a1fde:	689b      	ldr	r3, [r3, #8]
 80a1fe0:	4718      	bx	r3

080a1fe2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1fe2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1fe4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1fe6:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1fe8:	f7ff fff8 	bl	80a1fdc <_ZN5Print5printEc>
  n += print('\n');
 80a1fec:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1fee:	4604      	mov	r4, r0
  n += print('\n');
 80a1ff0:	4628      	mov	r0, r5
 80a1ff2:	f7ff fff3 	bl	80a1fdc <_ZN5Print5printEc>
  return n;
}
 80a1ff6:	4420      	add	r0, r4
 80a1ff8:	bd38      	pop	{r3, r4, r5, pc}

080a1ffa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1ffa:	b538      	push	{r3, r4, r5, lr}
 80a1ffc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1ffe:	f7ff ffd9 	bl	80a1fb4 <_ZN5Print5writeEPKc>
 80a2002:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a2004:	4628      	mov	r0, r5
 80a2006:	f7ff ffec 	bl	80a1fe2 <_ZN5Print7printlnEv>
  return n;
}
 80a200a:	4420      	add	r0, r4
 80a200c:	bd38      	pop	{r3, r4, r5, pc}

080a200e <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a200e:	2a01      	cmp	r2, #1
 80a2010:	bf98      	it	ls
 80a2012:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2014:	b530      	push	{r4, r5, lr}
 80a2016:	460b      	mov	r3, r1
 80a2018:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a201a:	2100      	movs	r1, #0
 80a201c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a2020:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a2024:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a2028:	fb05 3312 	mls	r3, r5, r2, r3
 80a202c:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a202e:	2b09      	cmp	r3, #9
 80a2030:	bf94      	ite	ls
 80a2032:	3330      	addls	r3, #48	; 0x30
 80a2034:	3337      	addhi	r3, #55	; 0x37
 80a2036:	b2db      	uxtb	r3, r3
 80a2038:	4621      	mov	r1, r4
 80a203a:	f804 3901 	strb.w	r3, [r4], #-1
 80a203e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a2040:	2d00      	cmp	r5, #0
 80a2042:	d1ef      	bne.n	80a2024 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a2044:	f7ff ffb6 	bl	80a1fb4 <_ZN5Print5writeEPKc>
}
 80a2048:	b00b      	add	sp, #44	; 0x2c
 80a204a:	bd30      	pop	{r4, r5, pc}

080a204c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a204c:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a204e:	b922      	cbnz	r2, 80a205a <_ZN5Print5printEmi+0xe>
 80a2050:	6803      	ldr	r3, [r0, #0]
 80a2052:	b2c9      	uxtb	r1, r1
 80a2054:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a2056:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a2058:	4718      	bx	r3
  else return printNumber(n, base);
 80a205a:	b2d2      	uxtb	r2, r2
}
 80a205c:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a205e:	f7ff bfd6 	b.w	80a200e <_ZN5Print11printNumberEmh>

080a2062 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a2062:	f7ff bff3 	b.w	80a204c <_ZN5Print5printEmi>

080a2066 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a2066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a206a:	4607      	mov	r7, r0
 80a206c:	460e      	mov	r6, r1
  if (base == 0) {
 80a206e:	4615      	mov	r5, r2
 80a2070:	b92a      	cbnz	r2, 80a207e <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a2072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a2076:	6803      	ldr	r3, [r0, #0]
 80a2078:	b2c9      	uxtb	r1, r1
 80a207a:	689b      	ldr	r3, [r3, #8]
 80a207c:	4718      	bx	r3
  } else if (base == 10) {
 80a207e:	2a0a      	cmp	r2, #10
 80a2080:	d102      	bne.n	80a2088 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a2082:	2900      	cmp	r1, #0
 80a2084:	da01      	bge.n	80a208a <_ZN5Print5printEli+0x24>
 80a2086:	e004      	b.n	80a2092 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a2088:	b2d2      	uxtb	r2, r2
  }
}
 80a208a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a208e:	f7ff bfbe 	b.w	80a200e <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a2092:	212d      	movs	r1, #45	; 0x2d
 80a2094:	f7ff ffa2 	bl	80a1fdc <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a2098:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a209a:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a209c:	4271      	negs	r1, r6
 80a209e:	4638      	mov	r0, r7
 80a20a0:	f7ff ffb5 	bl	80a200e <_ZN5Print11printNumberEmh>
 80a20a4:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a20a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a20ac <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a20ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a20b0:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a20b2:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a20b4:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a20b6:	4617      	mov	r7, r2
 80a20b8:	461e      	mov	r6, r3
 80a20ba:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a20be:	f002 ff53 	bl	80a4f68 <__aeabi_dcmpun>
 80a20c2:	b108      	cbz	r0, 80a20c8 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a20c4:	4947      	ldr	r1, [pc, #284]	; (80a21e4 <_ZN5Print10printFloatEdh+0x138>)
 80a20c6:	e012      	b.n	80a20ee <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a20c8:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a20cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a20d0:	4b45      	ldr	r3, [pc, #276]	; (80a21e8 <_ZN5Print10printFloatEdh+0x13c>)
 80a20d2:	4638      	mov	r0, r7
 80a20d4:	4621      	mov	r1, r4
 80a20d6:	f002 ff47 	bl	80a4f68 <__aeabi_dcmpun>
 80a20da:	b968      	cbnz	r0, 80a20f8 <_ZN5Print10printFloatEdh+0x4c>
 80a20dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a20e0:	4b41      	ldr	r3, [pc, #260]	; (80a21e8 <_ZN5Print10printFloatEdh+0x13c>)
 80a20e2:	4638      	mov	r0, r7
 80a20e4:	4621      	mov	r1, r4
 80a20e6:	f002 ff21 	bl	80a4f2c <__aeabi_dcmple>
 80a20ea:	b928      	cbnz	r0, 80a20f8 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a20ec:	493f      	ldr	r1, [pc, #252]	; (80a21ec <_ZN5Print10printFloatEdh+0x140>)
 80a20ee:	4640      	mov	r0, r8
 80a20f0:	f7ff ff60 	bl	80a1fb4 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a20f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a20f8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a20fc:	4b3c      	ldr	r3, [pc, #240]	; (80a21f0 <_ZN5Print10printFloatEdh+0x144>)
 80a20fe:	4638      	mov	r0, r7
 80a2100:	4631      	mov	r1, r6
 80a2102:	f002 ff27 	bl	80a4f54 <__aeabi_dcmpgt>
 80a2106:	b108      	cbz	r0, 80a210c <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2108:	493a      	ldr	r1, [pc, #232]	; (80a21f4 <_ZN5Print10printFloatEdh+0x148>)
 80a210a:	e7f0      	b.n	80a20ee <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a210c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a2110:	4b39      	ldr	r3, [pc, #228]	; (80a21f8 <_ZN5Print10printFloatEdh+0x14c>)
 80a2112:	4638      	mov	r0, r7
 80a2114:	4631      	mov	r1, r6
 80a2116:	f002 feff 	bl	80a4f18 <__aeabi_dcmplt>
 80a211a:	2800      	cmp	r0, #0
 80a211c:	d1f4      	bne.n	80a2108 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a211e:	2200      	movs	r2, #0
 80a2120:	2300      	movs	r3, #0
 80a2122:	4638      	mov	r0, r7
 80a2124:	4631      	mov	r1, r6
 80a2126:	f002 fef7 	bl	80a4f18 <__aeabi_dcmplt>
 80a212a:	b138      	cbz	r0, 80a213c <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a212c:	212d      	movs	r1, #45	; 0x2d
 80a212e:	4640      	mov	r0, r8
 80a2130:	f7ff ff54 	bl	80a1fdc <_ZN5Print5printEc>
     number = -number;
 80a2134:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a2138:	4604      	mov	r4, r0
 80a213a:	e000      	b.n	80a213e <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a213c:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a213e:	492f      	ldr	r1, [pc, #188]	; (80a21fc <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a2140:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a2144:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a2146:	fa5f f389 	uxtb.w	r3, r9
 80a214a:	429d      	cmp	r5, r3
 80a214c:	d906      	bls.n	80a215c <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a214e:	2200      	movs	r2, #0
 80a2150:	4b2b      	ldr	r3, [pc, #172]	; (80a2200 <_ZN5Print10printFloatEdh+0x154>)
 80a2152:	f002 fd99 	bl	80a4c88 <__aeabi_ddiv>
 80a2156:	f109 0901 	add.w	r9, r9, #1
 80a215a:	e7f4      	b.n	80a2146 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a215c:	463a      	mov	r2, r7
 80a215e:	4633      	mov	r3, r6
 80a2160:	f002 fab6 	bl	80a46d0 <__adddf3>
 80a2164:	460f      	mov	r7, r1
 80a2166:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a2168:	f002 ff3c 	bl	80a4fe4 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a216c:	220a      	movs	r2, #10
 80a216e:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a2170:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a2172:	4640      	mov	r0, r8
 80a2174:	f7ff ff4b 	bl	80a200e <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a2178:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a217a:	b37d      	cbz	r5, 80a21dc <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a217c:	4648      	mov	r0, r9
 80a217e:	f002 fbe3 	bl	80a4948 <__aeabi_ui2d>
 80a2182:	4602      	mov	r2, r0
 80a2184:	460b      	mov	r3, r1
 80a2186:	4630      	mov	r0, r6
 80a2188:	4639      	mov	r1, r7
 80a218a:	f002 fa9f 	bl	80a46cc <__aeabi_dsub>
 80a218e:	4606      	mov	r6, r0
 80a2190:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2192:	4640      	mov	r0, r8
 80a2194:	491b      	ldr	r1, [pc, #108]	; (80a2204 <_ZN5Print10printFloatEdh+0x158>)
 80a2196:	f7ff ff0d 	bl	80a1fb4 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a219a:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a219c:	4b18      	ldr	r3, [pc, #96]	; (80a2200 <_ZN5Print10printFloatEdh+0x154>)
 80a219e:	2200      	movs	r2, #0
 80a21a0:	4630      	mov	r0, r6
 80a21a2:	4639      	mov	r1, r7
 80a21a4:	f002 fc46 	bl	80a4a34 <__aeabi_dmul>
 80a21a8:	460f      	mov	r7, r1
 80a21aa:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a21ac:	f002 fef2 	bl	80a4f94 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a21b0:	220a      	movs	r2, #10
 80a21b2:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a21b4:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a21b6:	4640      	mov	r0, r8
 80a21b8:	f7ff ff55 	bl	80a2066 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a21bc:	4404      	add	r4, r0
    remainder -= toPrint;
 80a21be:	4648      	mov	r0, r9
 80a21c0:	f002 fbd2 	bl	80a4968 <__aeabi_i2d>
 80a21c4:	4602      	mov	r2, r0
 80a21c6:	460b      	mov	r3, r1
 80a21c8:	4630      	mov	r0, r6
 80a21ca:	4639      	mov	r1, r7
 80a21cc:	f002 fa7e 	bl	80a46cc <__aeabi_dsub>
 80a21d0:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a21d2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a21d6:	4606      	mov	r6, r0
 80a21d8:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a21da:	d1df      	bne.n	80a219c <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a21dc:	4620      	mov	r0, r4
 80a21de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a21e2:	bf00      	nop
 80a21e4:	080a649c 	.word	0x080a649c
 80a21e8:	7fefffff 	.word	0x7fefffff
 80a21ec:	080a64a4 	.word	0x080a64a4
 80a21f0:	41efffff 	.word	0x41efffff
 80a21f4:	080a64a0 	.word	0x080a64a0
 80a21f8:	c1efffff 	.word	0xc1efffff
 80a21fc:	3fe00000 	.word	0x3fe00000
 80a2200:	40240000 	.word	0x40240000
 80a2204:	080a6084 	.word	0x080a6084

080a2208 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a2208:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a220a:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a220e:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a2210:	9100      	str	r1, [sp, #0]
 80a2212:	f7ff ff4b 	bl	80a20ac <_ZN5Print10printFloatEdh>
 80a2216:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a2218:	4628      	mov	r0, r5
 80a221a:	f7ff fee2 	bl	80a1fe2 <_ZN5Print7printlnEv>
  return n;
}
 80a221e:	4420      	add	r0, r4
 80a2220:	b003      	add	sp, #12
 80a2222:	bd30      	pop	{r4, r5, pc}

080a2224 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a2224:	b40c      	push	{r2, r3}
 80a2226:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a222a:	b087      	sub	sp, #28
 80a222c:	af00      	add	r7, sp, #0
 80a222e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a2232:	f854 9b04 	ldr.w	r9, [r4], #4
 80a2236:	4605      	mov	r5, r0
 80a2238:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a223a:	4623      	mov	r3, r4
 80a223c:	464a      	mov	r2, r9
 80a223e:	2114      	movs	r1, #20
 80a2240:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a2242:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a2244:	f7ff f9f4 	bl	80a1630 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a2248:	2813      	cmp	r0, #19
 80a224a:	d805      	bhi.n	80a2258 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a224c:	1d39      	adds	r1, r7, #4
 80a224e:	4628      	mov	r0, r5
 80a2250:	f7ff feb0 	bl	80a1fb4 <_ZN5Print5writeEPKc>
 80a2254:	4604      	mov	r4, r0
 80a2256:	e013      	b.n	80a2280 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a2258:	f100 0308 	add.w	r3, r0, #8
 80a225c:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a2260:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a2262:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a2266:	1c41      	adds	r1, r0, #1
 80a2268:	4623      	mov	r3, r4
 80a226a:	464a      	mov	r2, r9
 80a226c:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a226e:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a2270:	f7ff f9de 	bl	80a1630 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2274:	4669      	mov	r1, sp
 80a2276:	4628      	mov	r0, r5
 80a2278:	f7ff fe9c 	bl	80a1fb4 <_ZN5Print5writeEPKc>
 80a227c:	4604      	mov	r4, r0
 80a227e:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a2280:	b11e      	cbz	r6, 80a228a <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a2282:	4628      	mov	r0, r5
 80a2284:	f7ff fead 	bl	80a1fe2 <_ZN5Print7printlnEv>
 80a2288:	4404      	add	r4, r0
    return n;
}
 80a228a:	4620      	mov	r0, r4
 80a228c:	371c      	adds	r7, #28
 80a228e:	46bd      	mov	sp, r7
 80a2290:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2294:	b002      	add	sp, #8
 80a2296:	4770      	bx	lr

080a2298 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2298:	b510      	push	{r4, lr}
 80a229a:	4604      	mov	r4, r0
 80a229c:	f7fd ffde 	bl	80a025c <_ZNSt14_Function_baseD1Ev>
 80a22a0:	4620      	mov	r0, r4
 80a22a2:	bd10      	pop	{r4, pc}

080a22a4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a22a4:	4803      	ldr	r0, [pc, #12]	; (80a22b4 <_GLOBAL__sub_I_RGB+0x10>)
 80a22a6:	2300      	movs	r3, #0
 80a22a8:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a22aa:	4a03      	ldr	r2, [pc, #12]	; (80a22b8 <_GLOBAL__sub_I_RGB+0x14>)
 80a22ac:	4903      	ldr	r1, [pc, #12]	; (80a22bc <_GLOBAL__sub_I_RGB+0x18>)
 80a22ae:	f000 bc37 	b.w	80a2b20 <__aeabi_atexit>
 80a22b2:	bf00      	nop
 80a22b4:	20000520 	.word	0x20000520
 80a22b8:	200003d4 	.word	0x200003d4
 80a22bc:	080a2299 	.word	0x080a2299

080a22c0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a22c0:	4770      	bx	lr

080a22c2 <_ZN8SPIClassD0Ev>:
 80a22c2:	b510      	push	{r4, lr}
 80a22c4:	4604      	mov	r4, r0
 80a22c6:	2110      	movs	r1, #16
 80a22c8:	f000 fc2f 	bl	80a2b2a <_ZdlPvj>
 80a22cc:	4620      	mov	r0, r4
 80a22ce:	bd10      	pop	{r4, pc}

080a22d0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a22d0:	b570      	push	{r4, r5, r6, lr}
 80a22d2:	4604      	mov	r4, r0
 80a22d4:	460e      	mov	r6, r1
 80a22d6:	4b07      	ldr	r3, [pc, #28]	; (80a22f4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a22d8:	2500      	movs	r5, #0
 80a22da:	6003      	str	r3, [r0, #0]
 80a22dc:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a22e0:	f7fe ff58 	bl	80a1194 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a22e4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a22e6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a22e8:	f7ff f806 	bl	80a12f8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a22ec:	60a5      	str	r5, [r4, #8]
}
 80a22ee:	4620      	mov	r0, r4
 80a22f0:	bd70      	pop	{r4, r5, r6, pc}
 80a22f2:	bf00      	nop
 80a22f4:	080a64b0 	.word	0x080a64b0

080a22f8 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a22f8:	7900      	ldrb	r0, [r0, #4]
 80a22fa:	f7ff b805 	b.w	80a1308 <HAL_SPI_Is_Enabled>

080a22fe <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a22fe:	b510      	push	{r4, lr}
 80a2300:	4604      	mov	r4, r0
{
	free(buffer);
 80a2302:	6800      	ldr	r0, [r0, #0]
 80a2304:	f7ff f974 	bl	80a15f0 <free>
}
 80a2308:	4620      	mov	r0, r4
 80a230a:	bd10      	pop	{r4, pc}

080a230c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a230c:	b510      	push	{r4, lr}
 80a230e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a2310:	6800      	ldr	r0, [r0, #0]
 80a2312:	b108      	cbz	r0, 80a2318 <_ZN6String10invalidateEv+0xc>
 80a2314:	f7ff f96c 	bl	80a15f0 <free>
	buffer = NULL;
 80a2318:	2300      	movs	r3, #0
 80a231a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a231c:	60a3      	str	r3, [r4, #8]
 80a231e:	6063      	str	r3, [r4, #4]
 80a2320:	bd10      	pop	{r4, pc}

080a2322 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a2322:	b538      	push	{r3, r4, r5, lr}
 80a2324:	4604      	mov	r4, r0
 80a2326:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a2328:	6800      	ldr	r0, [r0, #0]
 80a232a:	3101      	adds	r1, #1
 80a232c:	f7ff f968 	bl	80a1600 <realloc>
	if (newbuffer) {
 80a2330:	b110      	cbz	r0, 80a2338 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a2332:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a2336:	2001      	movs	r0, #1
	}
	return 0;
}
 80a2338:	bd38      	pop	{r3, r4, r5, pc}

080a233a <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a233a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a233c:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a233e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a2340:	b113      	cbz	r3, 80a2348 <_ZN6String7reserveEj+0xe>
 80a2342:	6843      	ldr	r3, [r0, #4]
 80a2344:	428b      	cmp	r3, r1
 80a2346:	d207      	bcs.n	80a2358 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a2348:	4620      	mov	r0, r4
 80a234a:	f7ff ffea 	bl	80a2322 <_ZN6String12changeBufferEj>
 80a234e:	b120      	cbz	r0, 80a235a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a2350:	68a3      	ldr	r3, [r4, #8]
 80a2352:	b90b      	cbnz	r3, 80a2358 <_ZN6String7reserveEj+0x1e>
 80a2354:	6822      	ldr	r2, [r4, #0]
 80a2356:	7013      	strb	r3, [r2, #0]
 80a2358:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a235a:	bd10      	pop	{r4, pc}

080a235c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a235c:	b570      	push	{r4, r5, r6, lr}
 80a235e:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a2360:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2362:	4604      	mov	r4, r0
 80a2364:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a2366:	f7ff ffe8 	bl	80a233a <_ZN6String7reserveEj>
 80a236a:	b918      	cbnz	r0, 80a2374 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a236c:	4620      	mov	r0, r4
 80a236e:	f7ff ffcd 	bl	80a230c <_ZN6String10invalidateEv>
		return *this;
 80a2372:	e009      	b.n	80a2388 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a2374:	462a      	mov	r2, r5
 80a2376:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a2378:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a237a:	6820      	ldr	r0, [r4, #0]
 80a237c:	f003 fa42 	bl	80a5804 <memcpy>
	buffer[len] = 0;
 80a2380:	6822      	ldr	r2, [r4, #0]
 80a2382:	68a3      	ldr	r3, [r4, #8]
 80a2384:	2100      	movs	r1, #0
 80a2386:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a2388:	4620      	mov	r0, r4
 80a238a:	bd70      	pop	{r4, r5, r6, pc}

080a238c <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a238c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a238e:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a2390:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2392:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a2394:	6043      	str	r3, [r0, #4]
	len = 0;
 80a2396:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2398:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a239a:	460d      	mov	r5, r1
 80a239c:	b139      	cbz	r1, 80a23ae <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a239e:	4608      	mov	r0, r1
 80a23a0:	f003 fa99 	bl	80a58d6 <strlen>
 80a23a4:	4629      	mov	r1, r5
 80a23a6:	4602      	mov	r2, r0
 80a23a8:	4620      	mov	r0, r4
 80a23aa:	f7ff ffd7 	bl	80a235c <_ZN6String4copyEPKcj>
}
 80a23ae:	4620      	mov	r0, r4
 80a23b0:	bd38      	pop	{r3, r4, r5, pc}

080a23b2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a23b2:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a23b4:	b510      	push	{r4, lr}
 80a23b6:	460b      	mov	r3, r1
 80a23b8:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a23ba:	d007      	beq.n	80a23cc <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a23bc:	6809      	ldr	r1, [r1, #0]
 80a23be:	b119      	cbz	r1, 80a23c8 <_ZN6StringaSERKS_+0x16>
 80a23c0:	689a      	ldr	r2, [r3, #8]
 80a23c2:	f7ff ffcb 	bl	80a235c <_ZN6String4copyEPKcj>
 80a23c6:	e001      	b.n	80a23cc <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a23c8:	f7ff ffa0 	bl	80a230c <_ZN6String10invalidateEv>

	return *this;
}
 80a23cc:	4620      	mov	r0, r4
 80a23ce:	bd10      	pop	{r4, pc}

080a23d0 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a23d0:	b510      	push	{r4, lr}
 80a23d2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a23d4:	2300      	movs	r3, #0
 80a23d6:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a23d8:	6043      	str	r3, [r0, #4]
	len = 0;
 80a23da:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a23dc:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a23de:	f7ff ffe8 	bl	80a23b2 <_ZN6StringaSERKS_>
}
 80a23e2:	4620      	mov	r0, r4
 80a23e4:	bd10      	pop	{r4, pc}

080a23e6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a23e6:	b538      	push	{r3, r4, r5, lr}
 80a23e8:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a23ea:	460c      	mov	r4, r1
 80a23ec:	b141      	cbz	r1, 80a2400 <_ZN6StringaSEPKc+0x1a>
 80a23ee:	4608      	mov	r0, r1
 80a23f0:	f003 fa71 	bl	80a58d6 <strlen>
 80a23f4:	4621      	mov	r1, r4
 80a23f6:	4602      	mov	r2, r0
 80a23f8:	4628      	mov	r0, r5
 80a23fa:	f7ff ffaf 	bl	80a235c <_ZN6String4copyEPKcj>
 80a23fe:	e001      	b.n	80a2404 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a2400:	f7ff ff84 	bl	80a230c <_ZN6String10invalidateEv>

	return *this;
}
 80a2404:	4628      	mov	r0, r5
 80a2406:	bd38      	pop	{r3, r4, r5, pc}

080a2408 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a2408:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a240a:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a240c:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a240e:	b912      	cbnz	r2, 80a2416 <_ZNK6String6equalsEPKc+0xe>
 80a2410:	b919      	cbnz	r1, 80a241a <_ZNK6String6equalsEPKc+0x12>
 80a2412:	2001      	movs	r0, #1
 80a2414:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a2416:	b911      	cbnz	r1, 80a241e <_ZNK6String6equalsEPKc+0x16>
 80a2418:	6803      	ldr	r3, [r0, #0]
 80a241a:	7818      	ldrb	r0, [r3, #0]
 80a241c:	e002      	b.n	80a2424 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a241e:	6800      	ldr	r0, [r0, #0]
 80a2420:	f003 fa2c 	bl	80a587c <strcmp>
 80a2424:	fab0 f080 	clz	r0, r0
 80a2428:	0940      	lsrs	r0, r0, #5
}
 80a242a:	bd08      	pop	{r3, pc}

080a242c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a242c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a2430:	4b03      	ldr	r3, [pc, #12]	; (80a2440 <_GLOBAL__sub_I_System+0x14>)
 80a2432:	2000      	movs	r0, #0
 80a2434:	7018      	strb	r0, [r3, #0]
 80a2436:	8058      	strh	r0, [r3, #2]
 80a2438:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a243a:	f7fe bffd 	b.w	80a1438 <set_system_mode>
 80a243e:	bf00      	nop
 80a2440:	20000530 	.word	0x20000530

080a2444 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80a2444:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a2446:	2000      	movs	r0, #0
 80a2448:	f7ff f86a 	bl	80a1520 <spark_sync_time_pending>
 80a244c:	b128      	cbz	r0, 80a245a <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a244e:	f7ff f84f 	bl	80a14f0 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a2452:	f080 0001 	eor.w	r0, r0, #1
 80a2456:	b2c0      	uxtb	r0, r0
 80a2458:	bd08      	pop	{r3, pc}
 80a245a:	2001      	movs	r0, #1
    }
 80a245c:	bd08      	pop	{r3, pc}
	...

080a2460 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a2460:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 80a2462:	4b0e      	ldr	r3, [pc, #56]	; (80a249c <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a2464:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 80a2466:	681b      	ldr	r3, [r3, #0]
 80a2468:	a802      	add	r0, sp, #8
 80a246a:	4419      	add	r1, r3
 80a246c:	4b0c      	ldr	r3, [pc, #48]	; (80a24a0 <_ZN9TimeClass7timeStrEl+0x40>)
 80a246e:	681b      	ldr	r3, [r3, #0]
 80a2470:	4419      	add	r1, r3
 80a2472:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 80a2476:	f003 f8cd 	bl	80a5614 <localtime>
        char* ascstr = asctime(calendar_time);
 80a247a:	f003 f881 	bl	80a5580 <asctime>
 80a247e:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 80a2480:	f003 fa29 	bl	80a58d6 <strlen>
        ascstr[len-1] = 0; // remove final newline
 80a2484:	2300      	movs	r3, #0
 80a2486:	4428      	add	r0, r5
 80a2488:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 80a248c:	4629      	mov	r1, r5
 80a248e:	4620      	mov	r0, r4
 80a2490:	f7ff ff7c 	bl	80a238c <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a2494:	4620      	mov	r0, r4
 80a2496:	b003      	add	sp, #12
 80a2498:	bd30      	pop	{r4, r5, pc}
 80a249a:	bf00      	nop
 80a249c:	20000540 	.word	0x20000540
 80a24a0:	2000053c 	.word	0x2000053c

080a24a4 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a24a4:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a24a6:	2000      	movs	r0, #0
 80a24a8:	f7fe feac 	bl	80a1204 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a24ac:	4604      	mov	r4, r0
 80a24ae:	b968      	cbnz	r0, 80a24cc <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a24b0:	f7fe ffba 	bl	80a1428 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a24b4:	2801      	cmp	r0, #1
 80a24b6:	d10b      	bne.n	80a24d0 <_ZN9TimeClass7isValidEv+0x2c>
 80a24b8:	4620      	mov	r0, r4
 80a24ba:	f7fe ffe5 	bl	80a1488 <system_thread_get_state>
 80a24be:	b938      	cbnz	r0, 80a24d0 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a24c0:	f7ff ffc0 	bl	80a2444 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a24c4:	b930      	cbnz	r0, 80a24d4 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a24c6:	f7ff f80b 	bl	80a14e0 <spark_process>
 80a24ca:	e7f9      	b.n	80a24c0 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a24cc:	2001      	movs	r0, #1
 80a24ce:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a24d0:	2000      	movs	r0, #0
 80a24d2:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a24d4:	f7ff ffb6 	bl	80a2444 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a24d8:	2000      	movs	r0, #0
 80a24da:	f7fe fe93 	bl	80a1204 <HAL_RTC_Time_Is_Valid>
 80a24de:	3000      	adds	r0, #0
 80a24e0:	bf18      	it	ne
 80a24e2:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a24e4:	bd10      	pop	{r4, pc}

080a24e6 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a24e6:	b508      	push	{r3, lr}
    (void)isValid();
 80a24e8:	f7ff ffdc 	bl	80a24a4 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a24ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a24f0:	f7fe be80 	b.w	80a11f4 <HAL_RTC_Get_UnixTime>

080a24f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a24f4:	4b02      	ldr	r3, [pc, #8]	; (80a2500 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a24f6:	681a      	ldr	r2, [r3, #0]
 80a24f8:	4b02      	ldr	r3, [pc, #8]	; (80a2504 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a24fa:	601a      	str	r2, [r3, #0]
 80a24fc:	4770      	bx	lr
 80a24fe:	bf00      	nop
 80a2500:	20000318 	.word	0x20000318
 80a2504:	20000538 	.word	0x20000538

080a2508 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2508:	4770      	bx	lr

080a250a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a250a:	7441      	strb	r1, [r0, #17]
 80a250c:	4770      	bx	lr

080a250e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a250e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a2510:	7c00      	ldrb	r0, [r0, #16]
 80a2512:	f7fe ff39 	bl	80a1388 <HAL_USART_Available_Data_For_Write>
}
 80a2516:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a251a:	bd08      	pop	{r3, pc}

080a251c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a251c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a251e:	7c00      	ldrb	r0, [r0, #16]
 80a2520:	f7fe ff0a 	bl	80a1338 <HAL_USART_Available_Data>
}
 80a2524:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2528:	bd08      	pop	{r3, pc}

080a252a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a252a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a252c:	7c00      	ldrb	r0, [r0, #16]
 80a252e:	f7fe ff13 	bl	80a1358 <HAL_USART_Peek_Data>
}
 80a2532:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2536:	bf28      	it	cs
 80a2538:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a253c:	bd08      	pop	{r3, pc}

080a253e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a253e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a2540:	7c00      	ldrb	r0, [r0, #16]
 80a2542:	f7fe ff01 	bl	80a1348 <HAL_USART_Read_Data>
}
 80a2546:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a254a:	bf28      	it	cs
 80a254c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2550:	bd08      	pop	{r3, pc}

080a2552 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2552:	7c00      	ldrb	r0, [r0, #16]
 80a2554:	f7fe bf08 	b.w	80a1368 <HAL_USART_Flush_Data>

080a2558 <_ZN11USARTSerialD0Ev>:
 80a2558:	b510      	push	{r4, lr}
 80a255a:	4604      	mov	r4, r0
 80a255c:	2114      	movs	r1, #20
 80a255e:	f000 fae4 	bl	80a2b2a <_ZdlPvj>
 80a2562:	4620      	mov	r0, r4
 80a2564:	bd10      	pop	{r4, pc}

080a2566 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2566:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2568:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a256a:	4604      	mov	r4, r0
 80a256c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a256e:	b925      	cbnz	r5, 80a257a <_ZN11USARTSerial5writeEh+0x14>
 80a2570:	7c00      	ldrb	r0, [r0, #16]
 80a2572:	f7fe ff09 	bl	80a1388 <HAL_USART_Available_Data_For_Write>
 80a2576:	2800      	cmp	r0, #0
 80a2578:	dd05      	ble.n	80a2586 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a257a:	4631      	mov	r1, r6
 80a257c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a257e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2582:	f7fe bed1 	b.w	80a1328 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2586:	4628      	mov	r0, r5
 80a2588:	bd70      	pop	{r4, r5, r6, pc}
	...

080a258c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a258c:	b510      	push	{r4, lr}
 80a258e:	4604      	mov	r4, r0
 80a2590:	4608      	mov	r0, r1
 80a2592:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2594:	2200      	movs	r2, #0
 80a2596:	6062      	str	r2, [r4, #4]
 80a2598:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a259c:	60a2      	str	r2, [r4, #8]
 80a259e:	4a05      	ldr	r2, [pc, #20]	; (80a25b4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a25a0:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a25a2:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a25a4:	2201      	movs	r2, #1
 80a25a6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a25a8:	461a      	mov	r2, r3
 80a25aa:	f7fe feb5 	bl	80a1318 <HAL_USART_Init>
}
 80a25ae:	4620      	mov	r0, r4
 80a25b0:	bd10      	pop	{r4, pc}
 80a25b2:	bf00      	nop
 80a25b4:	080a64e8 	.word	0x080a64e8

080a25b8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a25b8:	7c00      	ldrb	r0, [r0, #16]
 80a25ba:	f7fe bedd 	b.w	80a1378 <HAL_USART_Is_Enabled>
	...

080a25c0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a25c0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a25c2:	4d0c      	ldr	r5, [pc, #48]	; (80a25f4 <_Z22__fetch_global_Serial1v+0x34>)
 80a25c4:	6829      	ldr	r1, [r5, #0]
 80a25c6:	f011 0401 	ands.w	r4, r1, #1
 80a25ca:	d111      	bne.n	80a25f0 <_Z22__fetch_global_Serial1v+0x30>
 80a25cc:	4628      	mov	r0, r5
 80a25ce:	f7fd fd68 	bl	80a00a2 <__cxa_guard_acquire>
 80a25d2:	b168      	cbz	r0, 80a25f0 <_Z22__fetch_global_Serial1v+0x30>
 80a25d4:	4a08      	ldr	r2, [pc, #32]	; (80a25f8 <_Z22__fetch_global_Serial1v+0x38>)
 80a25d6:	4621      	mov	r1, r4
 80a25d8:	4b08      	ldr	r3, [pc, #32]	; (80a25fc <_Z22__fetch_global_Serial1v+0x3c>)
 80a25da:	4809      	ldr	r0, [pc, #36]	; (80a2600 <_Z22__fetch_global_Serial1v+0x40>)
 80a25dc:	f7ff ffd6 	bl	80a258c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a25e0:	4628      	mov	r0, r5
 80a25e2:	f7fd fd63 	bl	80a00ac <__cxa_guard_release>
 80a25e6:	4a07      	ldr	r2, [pc, #28]	; (80a2604 <_Z22__fetch_global_Serial1v+0x44>)
 80a25e8:	4907      	ldr	r1, [pc, #28]	; (80a2608 <_Z22__fetch_global_Serial1v+0x48>)
 80a25ea:	4805      	ldr	r0, [pc, #20]	; (80a2600 <_Z22__fetch_global_Serial1v+0x40>)
 80a25ec:	f000 fa98 	bl	80a2b20 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a25f0:	4803      	ldr	r0, [pc, #12]	; (80a2600 <_Z22__fetch_global_Serial1v+0x40>)
 80a25f2:	bd38      	pop	{r3, r4, r5, pc}
 80a25f4:	200005dc 	.word	0x200005dc
 80a25f8:	200005e0 	.word	0x200005e0
 80a25fc:	20000558 	.word	0x20000558
 80a2600:	20000544 	.word	0x20000544
 80a2604:	200003d4 	.word	0x200003d4
 80a2608:	080a2509 	.word	0x080a2509

080a260c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a260c:	7441      	strb	r1, [r0, #17]
 80a260e:	4770      	bx	lr

080a2610 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2610:	4770      	bx	lr

080a2612 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a2612:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2614:	2100      	movs	r1, #0
 80a2616:	7c00      	ldrb	r0, [r0, #16]
 80a2618:	f7fe fede 	bl	80a13d8 <HAL_USB_USART_Receive_Data>
}
 80a261c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2620:	bf28      	it	cs
 80a2622:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2626:	bd08      	pop	{r3, pc}

080a2628 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a2628:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a262a:	2101      	movs	r1, #1
 80a262c:	7c00      	ldrb	r0, [r0, #16]
 80a262e:	f7fe fed3 	bl	80a13d8 <HAL_USB_USART_Receive_Data>
}
 80a2632:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2636:	bf28      	it	cs
 80a2638:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a263c:	bd08      	pop	{r3, pc}

080a263e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a263e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2640:	7c00      	ldrb	r0, [r0, #16]
 80a2642:	f7fe fec1 	bl	80a13c8 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2646:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a264a:	bd08      	pop	{r3, pc}

080a264c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a264c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a264e:	7c00      	ldrb	r0, [r0, #16]
 80a2650:	f7fe feb2 	bl	80a13b8 <HAL_USB_USART_Available_Data>
}
 80a2654:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2658:	bd08      	pop	{r3, pc}

080a265a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a265a:	7c00      	ldrb	r0, [r0, #16]
 80a265c:	f7fe becc 	b.w	80a13f8 <HAL_USB_USART_Flush_Data>

080a2660 <_ZN9USBSerialD0Ev>:
 80a2660:	b510      	push	{r4, lr}
 80a2662:	4604      	mov	r4, r0
 80a2664:	2114      	movs	r1, #20
 80a2666:	f000 fa60 	bl	80a2b2a <_ZdlPvj>
 80a266a:	4620      	mov	r0, r4
 80a266c:	bd10      	pop	{r4, pc}

080a266e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a266e:	b538      	push	{r3, r4, r5, lr}
 80a2670:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2672:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2674:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2676:	f7fe fea7 	bl	80a13c8 <HAL_USB_USART_Available_Data_For_Write>
 80a267a:	2800      	cmp	r0, #0
 80a267c:	dc01      	bgt.n	80a2682 <_ZN9USBSerial5writeEh+0x14>
 80a267e:	7c60      	ldrb	r0, [r4, #17]
 80a2680:	b128      	cbz	r0, 80a268e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2682:	4629      	mov	r1, r5
 80a2684:	7c20      	ldrb	r0, [r4, #16]
 80a2686:	f7fe feaf 	bl	80a13e8 <HAL_USB_USART_Send_Data>
 80a268a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a268e:	bd38      	pop	{r3, r4, r5, pc}

080a2690 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2690:	b510      	push	{r4, lr}
 80a2692:	4604      	mov	r4, r0
 80a2694:	2300      	movs	r3, #0
 80a2696:	6063      	str	r3, [r4, #4]
 80a2698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a269c:	60a3      	str	r3, [r4, #8]
 80a269e:	4b05      	ldr	r3, [pc, #20]	; (80a26b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a26a0:	4608      	mov	r0, r1
 80a26a2:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a26a4:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a26a6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a26a8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a26aa:	4611      	mov	r1, r2
 80a26ac:	f7fe fe74 	bl	80a1398 <HAL_USB_USART_Init>
}
 80a26b0:	4620      	mov	r0, r4
 80a26b2:	bd10      	pop	{r4, pc}
 80a26b4:	080a6518 	.word	0x080a6518

080a26b8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a26b8:	2200      	movs	r2, #0
 80a26ba:	7c00      	ldrb	r0, [r0, #16]
 80a26bc:	f7fe be74 	b.w	80a13a8 <HAL_USB_USART_Begin>

080a26c0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a26c0:	b510      	push	{r4, lr}
 80a26c2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a26c4:	2214      	movs	r2, #20
 80a26c6:	2100      	movs	r1, #0
 80a26c8:	f003 f8a7 	bl	80a581a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a26cc:	4b05      	ldr	r3, [pc, #20]	; (80a26e4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a26ce:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a26d0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a26d2:	4b05      	ldr	r3, [pc, #20]	; (80a26e8 <_Z19acquireSerialBufferv+0x28>)
 80a26d4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a26d6:	f240 1301 	movw	r3, #257	; 0x101
 80a26da:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a26dc:	2381      	movs	r3, #129	; 0x81
 80a26de:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a26e0:	bd10      	pop	{r4, pc}
 80a26e2:	bf00      	nop
 80a26e4:	200006e9 	.word	0x200006e9
 80a26e8:	20000668 	.word	0x20000668

080a26ec <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a26ec:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a26ee:	4d0e      	ldr	r5, [pc, #56]	; (80a2728 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a26f0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a26f2:	a801      	add	r0, sp, #4
 80a26f4:	f7ff ffe4 	bl	80a26c0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a26f8:	6829      	ldr	r1, [r5, #0]
 80a26fa:	f011 0401 	ands.w	r4, r1, #1
 80a26fe:	d110      	bne.n	80a2722 <_Z16_fetch_usbserialv+0x36>
 80a2700:	4628      	mov	r0, r5
 80a2702:	f7fd fcce 	bl	80a00a2 <__cxa_guard_acquire>
 80a2706:	b160      	cbz	r0, 80a2722 <_Z16_fetch_usbserialv+0x36>
 80a2708:	aa01      	add	r2, sp, #4
 80a270a:	4621      	mov	r1, r4
 80a270c:	4807      	ldr	r0, [pc, #28]	; (80a272c <_Z16_fetch_usbserialv+0x40>)
 80a270e:	f7ff ffbf 	bl	80a2690 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2712:	4628      	mov	r0, r5
 80a2714:	f7fd fcca 	bl	80a00ac <__cxa_guard_release>
 80a2718:	4a05      	ldr	r2, [pc, #20]	; (80a2730 <_Z16_fetch_usbserialv+0x44>)
 80a271a:	4906      	ldr	r1, [pc, #24]	; (80a2734 <_Z16_fetch_usbserialv+0x48>)
 80a271c:	4803      	ldr	r0, [pc, #12]	; (80a272c <_Z16_fetch_usbserialv+0x40>)
 80a271e:	f000 f9ff 	bl	80a2b20 <__aeabi_atexit>
	return _usbserial;
}
 80a2722:	4802      	ldr	r0, [pc, #8]	; (80a272c <_Z16_fetch_usbserialv+0x40>)
 80a2724:	b007      	add	sp, #28
 80a2726:	bd30      	pop	{r4, r5, pc}
 80a2728:	20000664 	.word	0x20000664
 80a272c:	200007ec 	.word	0x200007ec
 80a2730:	200003d4 	.word	0x200003d4
 80a2734:	080a2611 	.word	0x080a2611

080a2738 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2738:	b510      	push	{r4, lr}
 80a273a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a273c:	2214      	movs	r2, #20
 80a273e:	2100      	movs	r1, #0
 80a2740:	f003 f86b 	bl	80a581a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2744:	4b05      	ldr	r3, [pc, #20]	; (80a275c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2746:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2748:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a274a:	4b05      	ldr	r3, [pc, #20]	; (80a2760 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a274c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a274e:	f240 1301 	movw	r3, #257	; 0x101
 80a2752:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2754:	2381      	movs	r3, #129	; 0x81
 80a2756:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2758:	bd10      	pop	{r4, pc}
 80a275a:	bf00      	nop
 80a275c:	2000089c 	.word	0x2000089c
 80a2760:	20000804 	.word	0x20000804

080a2764 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2764:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2766:	4c0e      	ldr	r4, [pc, #56]	; (80a27a0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2768:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a276a:	a801      	add	r0, sp, #4
 80a276c:	f7ff ffe4 	bl	80a2738 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2770:	6823      	ldr	r3, [r4, #0]
 80a2772:	07db      	lsls	r3, r3, #31
 80a2774:	d410      	bmi.n	80a2798 <_Z17_fetch_usbserial1v+0x34>
 80a2776:	4620      	mov	r0, r4
 80a2778:	f7fd fc93 	bl	80a00a2 <__cxa_guard_acquire>
 80a277c:	b160      	cbz	r0, 80a2798 <_Z17_fetch_usbserial1v+0x34>
 80a277e:	aa01      	add	r2, sp, #4
 80a2780:	2101      	movs	r1, #1
 80a2782:	4808      	ldr	r0, [pc, #32]	; (80a27a4 <_Z17_fetch_usbserial1v+0x40>)
 80a2784:	f7ff ff84 	bl	80a2690 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2788:	4620      	mov	r0, r4
 80a278a:	f7fd fc8f 	bl	80a00ac <__cxa_guard_release>
 80a278e:	4a06      	ldr	r2, [pc, #24]	; (80a27a8 <_Z17_fetch_usbserial1v+0x44>)
 80a2790:	4906      	ldr	r1, [pc, #24]	; (80a27ac <_Z17_fetch_usbserial1v+0x48>)
 80a2792:	4804      	ldr	r0, [pc, #16]	; (80a27a4 <_Z17_fetch_usbserial1v+0x40>)
 80a2794:	f000 f9c4 	bl	80a2b20 <__aeabi_atexit>
  return _usbserial1;
}
 80a2798:	4802      	ldr	r0, [pc, #8]	; (80a27a4 <_Z17_fetch_usbserial1v+0x40>)
 80a279a:	b006      	add	sp, #24
 80a279c:	bd10      	pop	{r4, pc}
 80a279e:	bf00      	nop
 80a27a0:	20000800 	.word	0x20000800
 80a27a4:	20000888 	.word	0x20000888
 80a27a8:	200003d4 	.word	0x200003d4
 80a27ac:	080a2611 	.word	0x080a2611

080a27b0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a27b0:	2200      	movs	r2, #0
 80a27b2:	4611      	mov	r1, r2
 80a27b4:	6840      	ldr	r0, [r0, #4]
 80a27b6:	f7fe bedb 	b.w	80a1570 <network_ready>

080a27ba <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a27ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a27bc:	4616      	mov	r6, r2
 80a27be:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a27c0:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a27c2:	460f      	mov	r7, r1
 80a27c4:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a27c6:	2100      	movs	r1, #0
 80a27c8:	a803      	add	r0, sp, #12
 80a27ca:	f003 f826 	bl	80a581a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a27ce:	4630      	mov	r0, r6
 80a27d0:	f003 f881 	bl	80a58d6 <strlen>
 80a27d4:	2500      	movs	r5, #0
 80a27d6:	9500      	str	r5, [sp, #0]
 80a27d8:	b281      	uxth	r1, r0
 80a27da:	687b      	ldr	r3, [r7, #4]
 80a27dc:	aa03      	add	r2, sp, #12
 80a27de:	4630      	mov	r0, r6
 80a27e0:	f7fe fe12 	bl	80a1408 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a27e4:	b120      	cbz	r0, 80a27f0 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a27e6:	4629      	mov	r1, r5
 80a27e8:	4620      	mov	r0, r4
 80a27ea:	f7ff fb3d 	bl	80a1e68 <_ZN9IPAddressC1Em>
 80a27ee:	e003      	b.n	80a27f8 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a27f0:	a903      	add	r1, sp, #12
 80a27f2:	4620      	mov	r0, r4
 80a27f4:	f7ff fb26 	bl	80a1e44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a27f8:	4620      	mov	r0, r4
 80a27fa:	b009      	add	sp, #36	; 0x24
 80a27fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a27fe <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a27fe:	2200      	movs	r2, #0
 80a2800:	4611      	mov	r1, r2
 80a2802:	6840      	ldr	r0, [r0, #4]
 80a2804:	f7fe bed4 	b.w	80a15b0 <network_listening>

080a2808 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a2808:	2200      	movs	r2, #0
 80a280a:	4611      	mov	r1, r2
 80a280c:	6840      	ldr	r0, [r0, #4]
 80a280e:	f7fe bedf 	b.w	80a15d0 <network_get_listen_timeout>

080a2812 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a2812:	2200      	movs	r2, #0
 80a2814:	6840      	ldr	r0, [r0, #4]
 80a2816:	f7fe bed3 	b.w	80a15c0 <network_set_listen_timeout>

080a281a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a281a:	2200      	movs	r2, #0
 80a281c:	f081 0101 	eor.w	r1, r1, #1
 80a2820:	6840      	ldr	r0, [r0, #4]
 80a2822:	f7fe bebd 	b.w	80a15a0 <network_listen>

080a2826 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a2826:	2300      	movs	r3, #0
 80a2828:	461a      	mov	r2, r3
 80a282a:	4619      	mov	r1, r3
 80a282c:	6840      	ldr	r0, [r0, #4]
 80a282e:	f7fe beaf 	b.w	80a1590 <network_off>

080a2832 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a2832:	2300      	movs	r3, #0
 80a2834:	461a      	mov	r2, r3
 80a2836:	4619      	mov	r1, r3
 80a2838:	6840      	ldr	r0, [r0, #4]
 80a283a:	f7fe bea1 	b.w	80a1580 <network_on>

080a283e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a283e:	2200      	movs	r2, #0
 80a2840:	4611      	mov	r1, r2
 80a2842:	6840      	ldr	r0, [r0, #4]
 80a2844:	f7fe be84 	b.w	80a1550 <network_connecting>

080a2848 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2848:	2200      	movs	r2, #0
 80a284a:	2102      	movs	r1, #2
 80a284c:	6840      	ldr	r0, [r0, #4]
 80a284e:	f7fe be87 	b.w	80a1560 <network_disconnect>

080a2852 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a2852:	2300      	movs	r3, #0
 80a2854:	461a      	mov	r2, r3
 80a2856:	6840      	ldr	r0, [r0, #4]
 80a2858:	f7fe be72 	b.w	80a1540 <network_connect>

080a285c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a285c:	4b02      	ldr	r3, [pc, #8]	; (80a2868 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a285e:	2204      	movs	r2, #4
 80a2860:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2862:	4a02      	ldr	r2, [pc, #8]	; (80a286c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2864:	601a      	str	r2, [r3, #0]
 80a2866:	4770      	bx	lr
 80a2868:	200009a0 	.word	0x200009a0
 80a286c:	080a6548 	.word	0x080a6548

080a2870 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2870:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2872:	4b14      	ldr	r3, [pc, #80]	; (80a28c4 <serialEventRun+0x54>)
 80a2874:	b133      	cbz	r3, 80a2884 <serialEventRun+0x14>
 80a2876:	f7ff ff39 	bl	80a26ec <_Z16_fetch_usbserialv>
 80a287a:	6803      	ldr	r3, [r0, #0]
 80a287c:	691b      	ldr	r3, [r3, #16]
 80a287e:	4798      	blx	r3
 80a2880:	2800      	cmp	r0, #0
 80a2882:	dc16      	bgt.n	80a28b2 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2884:	4b10      	ldr	r3, [pc, #64]	; (80a28c8 <serialEventRun+0x58>)
 80a2886:	b133      	cbz	r3, 80a2896 <serialEventRun+0x26>
 80a2888:	f7ff fe9a 	bl	80a25c0 <_Z22__fetch_global_Serial1v>
 80a288c:	6803      	ldr	r3, [r0, #0]
 80a288e:	691b      	ldr	r3, [r3, #16]
 80a2890:	4798      	blx	r3
 80a2892:	2800      	cmp	r0, #0
 80a2894:	dc10      	bgt.n	80a28b8 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2896:	4b0d      	ldr	r3, [pc, #52]	; (80a28cc <serialEventRun+0x5c>)
 80a2898:	b10b      	cbz	r3, 80a289e <serialEventRun+0x2e>
 80a289a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a289e:	4b0c      	ldr	r3, [pc, #48]	; (80a28d0 <serialEventRun+0x60>)
 80a28a0:	b17b      	cbz	r3, 80a28c2 <serialEventRun+0x52>
 80a28a2:	f7ff ff5f 	bl	80a2764 <_Z17_fetch_usbserial1v>
 80a28a6:	6803      	ldr	r3, [r0, #0]
 80a28a8:	691b      	ldr	r3, [r3, #16]
 80a28aa:	4798      	blx	r3
 80a28ac:	2800      	cmp	r0, #0
 80a28ae:	dc06      	bgt.n	80a28be <serialEventRun+0x4e>
 80a28b0:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a28b2:	f3af 8000 	nop.w
 80a28b6:	e7e5      	b.n	80a2884 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a28b8:	f3af 8000 	nop.w
 80a28bc:	e7eb      	b.n	80a2896 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a28be:	f3af 8000 	nop.w
 80a28c2:	bd08      	pop	{r3, pc}
	...

080a28d4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a28d4:	b508      	push	{r3, lr}
	serialEventRun();
 80a28d6:	f7ff ffcb 	bl	80a2870 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a28da:	f7fe fc83 	bl	80a11e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a28de:	4b01      	ldr	r3, [pc, #4]	; (80a28e4 <_post_loop+0x10>)
 80a28e0:	6018      	str	r0, [r3, #0]
 80a28e2:	bd08      	pop	{r3, pc}
 80a28e4:	200009b0 	.word	0x200009b0

080a28e8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a28e8:	4802      	ldr	r0, [pc, #8]	; (80a28f4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a28ea:	4a03      	ldr	r2, [pc, #12]	; (80a28f8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a28ec:	4903      	ldr	r1, [pc, #12]	; (80a28fc <_Z33system_initialize_user_backup_ramv+0x14>)
 80a28ee:	1a12      	subs	r2, r2, r0
 80a28f0:	f002 bf88 	b.w	80a5804 <memcpy>
 80a28f4:	40024000 	.word	0x40024000
 80a28f8:	40024004 	.word	0x40024004
 80a28fc:	080a6830 	.word	0x080a6830

080a2900 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2900:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2902:	2300      	movs	r3, #0
 80a2904:	9300      	str	r3, [sp, #0]
 80a2906:	461a      	mov	r2, r3
 80a2908:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a290c:	f7fe fdce 	bl	80a14ac <system_ctrl_set_result>
}
 80a2910:	b003      	add	sp, #12
 80a2912:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2918 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2918:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a291a:	8843      	ldrh	r3, [r0, #2]
 80a291c:	2b0a      	cmp	r3, #10
 80a291e:	d008      	beq.n	80a2932 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2920:	2b50      	cmp	r3, #80	; 0x50
 80a2922:	d109      	bne.n	80a2938 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2924:	4b09      	ldr	r3, [pc, #36]	; (80a294c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2926:	681b      	ldr	r3, [r3, #0]
 80a2928:	b13b      	cbz	r3, 80a293a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a292a:	b003      	add	sp, #12
 80a292c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2930:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2932:	f7ff ffe5 	bl	80a2900 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2936:	e006      	b.n	80a2946 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2938:	2300      	movs	r3, #0
 80a293a:	9300      	str	r3, [sp, #0]
 80a293c:	461a      	mov	r2, r3
 80a293e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2942:	f7fe fdb3 	bl	80a14ac <system_ctrl_set_result>
        break;
    }
}
 80a2946:	b003      	add	sp, #12
 80a2948:	f85d fb04 	ldr.w	pc, [sp], #4
 80a294c:	200009a8 	.word	0x200009a8

080a2950 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2950:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2952:	4c10      	ldr	r4, [pc, #64]	; (80a2994 <module_user_init_hook+0x44>)
 80a2954:	4d10      	ldr	r5, [pc, #64]	; (80a2998 <module_user_init_hook+0x48>)
 80a2956:	6823      	ldr	r3, [r4, #0]
 80a2958:	42ab      	cmp	r3, r5
 80a295a:	4b10      	ldr	r3, [pc, #64]	; (80a299c <module_user_init_hook+0x4c>)
 80a295c:	bf0c      	ite	eq
 80a295e:	2201      	moveq	r2, #1
 80a2960:	2200      	movne	r2, #0
 80a2962:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2964:	d002      	beq.n	80a296c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2966:	f7ff ffbf 	bl	80a28e8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a296a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a296c:	f7fe fc22 	bl	80a11b4 <HAL_RNG_GetRandomNumber>
 80a2970:	4604      	mov	r4, r0
    srand(seed);
 80a2972:	f002 ff5b 	bl	80a582c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2976:	4b0a      	ldr	r3, [pc, #40]	; (80a29a0 <module_user_init_hook+0x50>)
 80a2978:	b113      	cbz	r3, 80a2980 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a297a:	4620      	mov	r0, r4
 80a297c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2980:	2100      	movs	r1, #0
 80a2982:	4807      	ldr	r0, [pc, #28]	; (80a29a0 <module_user_init_hook+0x50>)
 80a2984:	f7fe fdd4 	bl	80a1530 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a298c:	2100      	movs	r1, #0
 80a298e:	4805      	ldr	r0, [pc, #20]	; (80a29a4 <module_user_init_hook+0x54>)
 80a2990:	f7fe bd82 	b.w	80a1498 <system_ctrl_set_app_request_handler>
 80a2994:	40024000 	.word	0x40024000
 80a2998:	9a271c1e 	.word	0x9a271c1e
 80a299c:	200009ac 	.word	0x200009ac
 80a29a0:	00000000 	.word	0x00000000
 80a29a4:	080a2919 	.word	0x080a2919

080a29a8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a29a8:	b510      	push	{r4, lr}
 80a29aa:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a29ac:	480f      	ldr	r0, [pc, #60]	; (80a29ec <pinAvailable+0x44>)
 80a29ae:	f7ff fca3 	bl	80a22f8 <_ZN8SPIClass9isEnabledEv>
 80a29b2:	b128      	cbz	r0, 80a29c0 <pinAvailable+0x18>
 80a29b4:	f1a4 030d 	sub.w	r3, r4, #13
 80a29b8:	2b02      	cmp	r3, #2
 80a29ba:	d801      	bhi.n	80a29c0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a29bc:	2000      	movs	r0, #0
 80a29be:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a29c0:	f000 f854 	bl	80a2a6c <_Z19__fetch_global_Wirev>
 80a29c4:	f7ff f98e 	bl	80a1ce4 <_ZN7TwoWire9isEnabledEv>
 80a29c8:	b108      	cbz	r0, 80a29ce <pinAvailable+0x26>
 80a29ca:	2c01      	cmp	r4, #1
 80a29cc:	d9f6      	bls.n	80a29bc <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a29ce:	f7ff fdf7 	bl	80a25c0 <_Z22__fetch_global_Serial1v>
 80a29d2:	f7ff fdf1 	bl	80a25b8 <_ZN11USARTSerial9isEnabledEv>
 80a29d6:	b118      	cbz	r0, 80a29e0 <pinAvailable+0x38>
 80a29d8:	f1a4 0312 	sub.w	r3, r4, #18
 80a29dc:	2b01      	cmp	r3, #1
 80a29de:	d9ed      	bls.n	80a29bc <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a29e0:	2c17      	cmp	r4, #23
 80a29e2:	bf8c      	ite	hi
 80a29e4:	2000      	movhi	r0, #0
 80a29e6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a29e8:	bd10      	pop	{r4, pc}
 80a29ea:	bf00      	nop
 80a29ec:	200009e4 	.word	0x200009e4

080a29f0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a29f0:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a29f2:	b538      	push	{r3, r4, r5, lr}
 80a29f4:	4604      	mov	r4, r0
 80a29f6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a29f8:	d80a      	bhi.n	80a2a10 <pinMode+0x20>
 80a29fa:	29ff      	cmp	r1, #255	; 0xff
 80a29fc:	d008      	beq.n	80a2a10 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a29fe:	f7ff ffd3 	bl	80a29a8 <pinAvailable>
 80a2a02:	b128      	cbz	r0, 80a2a10 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2a04:	4629      	mov	r1, r5
 80a2a06:	4620      	mov	r0, r4
}
 80a2a08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2a0c:	f7fe bc0a 	b.w	80a1224 <HAL_Pin_Mode>
 80a2a10:	bd38      	pop	{r3, r4, r5, pc}

080a2a12 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2a12:	b538      	push	{r3, r4, r5, lr}
 80a2a14:	4604      	mov	r4, r0
 80a2a16:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2a18:	f7fe fc0c 	bl	80a1234 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2a1c:	28ff      	cmp	r0, #255	; 0xff
 80a2a1e:	d010      	beq.n	80a2a42 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2a20:	2806      	cmp	r0, #6
 80a2a22:	d804      	bhi.n	80a2a2e <digitalWrite+0x1c>
 80a2a24:	234d      	movs	r3, #77	; 0x4d
 80a2a26:	fa23 f000 	lsr.w	r0, r3, r0
 80a2a2a:	07c3      	lsls	r3, r0, #31
 80a2a2c:	d409      	bmi.n	80a2a42 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2a2e:	4620      	mov	r0, r4
 80a2a30:	f7ff ffba 	bl	80a29a8 <pinAvailable>
 80a2a34:	b128      	cbz	r0, 80a2a42 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2a36:	4629      	mov	r1, r5
 80a2a38:	4620      	mov	r0, r4
}
 80a2a3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2a3e:	f7fe bc01 	b.w	80a1244 <HAL_GPIO_Write>
 80a2a42:	bd38      	pop	{r3, r4, r5, pc}

080a2a44 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2a44:	b510      	push	{r4, lr}
 80a2a46:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2a48:	f7fe fbf4 	bl	80a1234 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a2a4c:	3804      	subs	r0, #4
 80a2a4e:	b2c0      	uxtb	r0, r0
 80a2a50:	2801      	cmp	r0, #1
 80a2a52:	d908      	bls.n	80a2a66 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2a54:	4620      	mov	r0, r4
 80a2a56:	f7ff ffa7 	bl	80a29a8 <pinAvailable>
 80a2a5a:	b120      	cbz	r0, 80a2a66 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2a5c:	4620      	mov	r0, r4
}
 80a2a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2a62:	f7fe bbf7 	b.w	80a1254 <HAL_GPIO_Read>
}
 80a2a66:	2000      	movs	r0, #0
 80a2a68:	bd10      	pop	{r4, pc}
	...

080a2a6c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2a6c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a2a6e:	4d0b      	ldr	r5, [pc, #44]	; (80a2a9c <_Z19__fetch_global_Wirev+0x30>)
 80a2a70:	6829      	ldr	r1, [r5, #0]
 80a2a72:	f011 0401 	ands.w	r4, r1, #1
 80a2a76:	d10f      	bne.n	80a2a98 <_Z19__fetch_global_Wirev+0x2c>
 80a2a78:	4628      	mov	r0, r5
 80a2a7a:	f7fd fb12 	bl	80a00a2 <__cxa_guard_acquire>
 80a2a7e:	b158      	cbz	r0, 80a2a98 <_Z19__fetch_global_Wirev+0x2c>
 80a2a80:	4621      	mov	r1, r4
 80a2a82:	4807      	ldr	r0, [pc, #28]	; (80a2aa0 <_Z19__fetch_global_Wirev+0x34>)
 80a2a84:	f7ff f91c 	bl	80a1cc0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2a88:	4628      	mov	r0, r5
 80a2a8a:	f7fd fb0f 	bl	80a00ac <__cxa_guard_release>
 80a2a8e:	4a05      	ldr	r2, [pc, #20]	; (80a2aa4 <_Z19__fetch_global_Wirev+0x38>)
 80a2a90:	4905      	ldr	r1, [pc, #20]	; (80a2aa8 <_Z19__fetch_global_Wirev+0x3c>)
 80a2a92:	4803      	ldr	r0, [pc, #12]	; (80a2aa0 <_Z19__fetch_global_Wirev+0x34>)
 80a2a94:	f000 f844 	bl	80a2b20 <__aeabi_atexit>
	return wire;
}
 80a2a98:	4801      	ldr	r0, [pc, #4]	; (80a2aa0 <_Z19__fetch_global_Wirev+0x34>)
 80a2a9a:	bd38      	pop	{r3, r4, r5, pc}
 80a2a9c:	200009b4 	.word	0x200009b4
 80a2aa0:	200009b8 	.word	0x200009b8
 80a2aa4:	200003d4 	.word	0x200003d4
 80a2aa8:	080a1c69 	.word	0x080a1c69

080a2aac <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2aac:	b513      	push	{r0, r1, r4, lr}
 80a2aae:	4c08      	ldr	r4, [pc, #32]	; (80a2ad0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2ab0:	2300      	movs	r3, #0
 80a2ab2:	461a      	mov	r2, r3
 80a2ab4:	4619      	mov	r1, r3
 80a2ab6:	9300      	str	r3, [sp, #0]
 80a2ab8:	4620      	mov	r0, r4
 80a2aba:	f7ff f9eb 	bl	80a1e94 <_ZN9IPAddressC1Ehhhh>
 80a2abe:	4620      	mov	r0, r4
 80a2ac0:	4a04      	ldr	r2, [pc, #16]	; (80a2ad4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2ac2:	4905      	ldr	r1, [pc, #20]	; (80a2ad8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2ac4:	b002      	add	sp, #8
 80a2ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2aca:	f000 b829 	b.w	80a2b20 <__aeabi_atexit>
 80a2ace:	bf00      	nop
 80a2ad0:	200009cc 	.word	0x200009cc
 80a2ad4:	200003d4 	.word	0x200003d4
 80a2ad8:	080a1de5 	.word	0x080a1de5

080a2adc <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2adc:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2ade:	4c0c      	ldr	r4, [pc, #48]	; (80a2b10 <_GLOBAL__sub_I_SPI+0x34>)
 80a2ae0:	4e0c      	ldr	r6, [pc, #48]	; (80a2b14 <_GLOBAL__sub_I_SPI+0x38>)
 80a2ae2:	4d0d      	ldr	r5, [pc, #52]	; (80a2b18 <_GLOBAL__sub_I_SPI+0x3c>)
 80a2ae4:	2100      	movs	r1, #0
 80a2ae6:	4620      	mov	r0, r4
 80a2ae8:	f7ff fbf2 	bl	80a22d0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2aec:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2aee:	4c0b      	ldr	r4, [pc, #44]	; (80a2b1c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2af0:	4632      	mov	r2, r6
 80a2af2:	4629      	mov	r1, r5
 80a2af4:	f000 f814 	bl	80a2b20 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2af8:	2101      	movs	r1, #1
 80a2afa:	4620      	mov	r0, r4
 80a2afc:	f7ff fbe8 	bl	80a22d0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2b00:	4632      	mov	r2, r6
 80a2b02:	4629      	mov	r1, r5
 80a2b04:	4620      	mov	r0, r4
 80a2b06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a2b0a:	f000 b809 	b.w	80a2b20 <__aeabi_atexit>
 80a2b0e:	bf00      	nop
 80a2b10:	200009e4 	.word	0x200009e4
 80a2b14:	200003d4 	.word	0x200003d4
 80a2b18:	080a22c1 	.word	0x080a22c1
 80a2b1c:	200009f4 	.word	0x200009f4

080a2b20 <__aeabi_atexit>:
 80a2b20:	460b      	mov	r3, r1
 80a2b22:	4601      	mov	r1, r0
 80a2b24:	4618      	mov	r0, r3
 80a2b26:	f002 bd67 	b.w	80a55f8 <__cxa_atexit>

080a2b2a <_ZdlPvj>:
 80a2b2a:	f7fd bab8 	b.w	80a009e <_ZdlPv>

080a2b2e <_ZSt25__throw_bad_function_callv>:
 80a2b2e:	b508      	push	{r3, lr}
 80a2b30:	f7fe fd86 	bl	80a1640 <abort>

080a2b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2b34:	4b24      	ldr	r3, [pc, #144]	; (80a2bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2b36:	681a      	ldr	r2, [r3, #0]
 80a2b38:	07d0      	lsls	r0, r2, #31
 80a2b3a:	bf5c      	itt	pl
 80a2b3c:	2201      	movpl	r2, #1
 80a2b3e:	601a      	strpl	r2, [r3, #0]
 80a2b40:	4b22      	ldr	r3, [pc, #136]	; (80a2bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2b42:	681a      	ldr	r2, [r3, #0]
 80a2b44:	07d1      	lsls	r1, r2, #31
 80a2b46:	bf5c      	itt	pl
 80a2b48:	2201      	movpl	r2, #1
 80a2b4a:	601a      	strpl	r2, [r3, #0]
 80a2b4c:	4b20      	ldr	r3, [pc, #128]	; (80a2bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2b4e:	681a      	ldr	r2, [r3, #0]
 80a2b50:	07d2      	lsls	r2, r2, #31
 80a2b52:	bf5c      	itt	pl
 80a2b54:	2201      	movpl	r2, #1
 80a2b56:	601a      	strpl	r2, [r3, #0]
 80a2b58:	4b1e      	ldr	r3, [pc, #120]	; (80a2bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2b5a:	681a      	ldr	r2, [r3, #0]
 80a2b5c:	07d0      	lsls	r0, r2, #31
 80a2b5e:	bf5c      	itt	pl
 80a2b60:	2201      	movpl	r2, #1
 80a2b62:	601a      	strpl	r2, [r3, #0]
 80a2b64:	4b1c      	ldr	r3, [pc, #112]	; (80a2bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2b66:	681a      	ldr	r2, [r3, #0]
 80a2b68:	07d1      	lsls	r1, r2, #31
 80a2b6a:	bf5c      	itt	pl
 80a2b6c:	2201      	movpl	r2, #1
 80a2b6e:	601a      	strpl	r2, [r3, #0]
 80a2b70:	4b1a      	ldr	r3, [pc, #104]	; (80a2bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2b72:	681a      	ldr	r2, [r3, #0]
 80a2b74:	07d2      	lsls	r2, r2, #31
 80a2b76:	bf5c      	itt	pl
 80a2b78:	2201      	movpl	r2, #1
 80a2b7a:	601a      	strpl	r2, [r3, #0]
 80a2b7c:	4b18      	ldr	r3, [pc, #96]	; (80a2be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2b7e:	681a      	ldr	r2, [r3, #0]
 80a2b80:	07d0      	lsls	r0, r2, #31
 80a2b82:	bf5c      	itt	pl
 80a2b84:	2201      	movpl	r2, #1
 80a2b86:	601a      	strpl	r2, [r3, #0]
 80a2b88:	4b16      	ldr	r3, [pc, #88]	; (80a2be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2b8a:	681a      	ldr	r2, [r3, #0]
 80a2b8c:	07d1      	lsls	r1, r2, #31
 80a2b8e:	bf5c      	itt	pl
 80a2b90:	2201      	movpl	r2, #1
 80a2b92:	601a      	strpl	r2, [r3, #0]
 80a2b94:	4b14      	ldr	r3, [pc, #80]	; (80a2be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2b96:	681a      	ldr	r2, [r3, #0]
 80a2b98:	07d2      	lsls	r2, r2, #31
 80a2b9a:	bf5c      	itt	pl
 80a2b9c:	2201      	movpl	r2, #1
 80a2b9e:	601a      	strpl	r2, [r3, #0]
 80a2ba0:	4b12      	ldr	r3, [pc, #72]	; (80a2bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2ba2:	681a      	ldr	r2, [r3, #0]
 80a2ba4:	07d0      	lsls	r0, r2, #31
 80a2ba6:	bf5c      	itt	pl
 80a2ba8:	2201      	movpl	r2, #1
 80a2baa:	601a      	strpl	r2, [r3, #0]
 80a2bac:	4b10      	ldr	r3, [pc, #64]	; (80a2bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2bae:	681a      	ldr	r2, [r3, #0]
 80a2bb0:	07d1      	lsls	r1, r2, #31
 80a2bb2:	bf5c      	itt	pl
 80a2bb4:	2201      	movpl	r2, #1
 80a2bb6:	601a      	strpl	r2, [r3, #0]
 80a2bb8:	4b0e      	ldr	r3, [pc, #56]	; (80a2bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2bba:	681a      	ldr	r2, [r3, #0]
 80a2bbc:	07d2      	lsls	r2, r2, #31
 80a2bbe:	bf5c      	itt	pl
 80a2bc0:	2201      	movpl	r2, #1
 80a2bc2:	601a      	strpl	r2, [r3, #0]
 80a2bc4:	4770      	bx	lr
 80a2bc6:	bf00      	nop
 80a2bc8:	20000a30 	.word	0x20000a30
 80a2bcc:	20000a2c 	.word	0x20000a2c
 80a2bd0:	20000a28 	.word	0x20000a28
 80a2bd4:	20000a24 	.word	0x20000a24
 80a2bd8:	20000a20 	.word	0x20000a20
 80a2bdc:	20000a1c 	.word	0x20000a1c
 80a2be0:	20000a18 	.word	0x20000a18
 80a2be4:	20000a14 	.word	0x20000a14
 80a2be8:	20000a10 	.word	0x20000a10
 80a2bec:	20000a0c 	.word	0x20000a0c
 80a2bf0:	20000a08 	.word	0x20000a08
 80a2bf4:	20000a04 	.word	0x20000a04

080a2bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2bf8:	4b18      	ldr	r3, [pc, #96]	; (80a2c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2bfa:	681a      	ldr	r2, [r3, #0]
 80a2bfc:	07d1      	lsls	r1, r2, #31
 80a2bfe:	bf5c      	itt	pl
 80a2c00:	2201      	movpl	r2, #1
 80a2c02:	601a      	strpl	r2, [r3, #0]
 80a2c04:	4b16      	ldr	r3, [pc, #88]	; (80a2c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2c06:	681a      	ldr	r2, [r3, #0]
 80a2c08:	07d2      	lsls	r2, r2, #31
 80a2c0a:	bf5c      	itt	pl
 80a2c0c:	2201      	movpl	r2, #1
 80a2c0e:	601a      	strpl	r2, [r3, #0]
 80a2c10:	4b14      	ldr	r3, [pc, #80]	; (80a2c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2c12:	681a      	ldr	r2, [r3, #0]
 80a2c14:	07d0      	lsls	r0, r2, #31
 80a2c16:	bf5c      	itt	pl
 80a2c18:	2201      	movpl	r2, #1
 80a2c1a:	601a      	strpl	r2, [r3, #0]
 80a2c1c:	4b12      	ldr	r3, [pc, #72]	; (80a2c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2c1e:	681a      	ldr	r2, [r3, #0]
 80a2c20:	07d1      	lsls	r1, r2, #31
 80a2c22:	bf5c      	itt	pl
 80a2c24:	2201      	movpl	r2, #1
 80a2c26:	601a      	strpl	r2, [r3, #0]
 80a2c28:	4b10      	ldr	r3, [pc, #64]	; (80a2c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2c2a:	681a      	ldr	r2, [r3, #0]
 80a2c2c:	07d2      	lsls	r2, r2, #31
 80a2c2e:	bf5c      	itt	pl
 80a2c30:	2201      	movpl	r2, #1
 80a2c32:	601a      	strpl	r2, [r3, #0]
 80a2c34:	4b0e      	ldr	r3, [pc, #56]	; (80a2c70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2c36:	681a      	ldr	r2, [r3, #0]
 80a2c38:	07d0      	lsls	r0, r2, #31
 80a2c3a:	bf5c      	itt	pl
 80a2c3c:	2201      	movpl	r2, #1
 80a2c3e:	601a      	strpl	r2, [r3, #0]
 80a2c40:	4b0c      	ldr	r3, [pc, #48]	; (80a2c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2c42:	681a      	ldr	r2, [r3, #0]
 80a2c44:	07d1      	lsls	r1, r2, #31
 80a2c46:	bf5c      	itt	pl
 80a2c48:	2201      	movpl	r2, #1
 80a2c4a:	601a      	strpl	r2, [r3, #0]
 80a2c4c:	4b0a      	ldr	r3, [pc, #40]	; (80a2c78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2c4e:	681a      	ldr	r2, [r3, #0]
 80a2c50:	07d2      	lsls	r2, r2, #31
 80a2c52:	bf5c      	itt	pl
 80a2c54:	2201      	movpl	r2, #1
 80a2c56:	601a      	strpl	r2, [r3, #0]
 80a2c58:	4770      	bx	lr
 80a2c5a:	bf00      	nop
 80a2c5c:	20000a50 	.word	0x20000a50
 80a2c60:	20000a4c 	.word	0x20000a4c
 80a2c64:	20000a48 	.word	0x20000a48
 80a2c68:	20000a44 	.word	0x20000a44
 80a2c6c:	20000a40 	.word	0x20000a40
 80a2c70:	20000a3c 	.word	0x20000a3c
 80a2c74:	20000a38 	.word	0x20000a38
 80a2c78:	20000a34 	.word	0x20000a34

080a2c7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2c7c:	4b18      	ldr	r3, [pc, #96]	; (80a2ce0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2c7e:	681a      	ldr	r2, [r3, #0]
 80a2c80:	07d1      	lsls	r1, r2, #31
 80a2c82:	bf5c      	itt	pl
 80a2c84:	2201      	movpl	r2, #1
 80a2c86:	601a      	strpl	r2, [r3, #0]
 80a2c88:	4b16      	ldr	r3, [pc, #88]	; (80a2ce4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2c8a:	681a      	ldr	r2, [r3, #0]
 80a2c8c:	07d2      	lsls	r2, r2, #31
 80a2c8e:	bf5c      	itt	pl
 80a2c90:	2201      	movpl	r2, #1
 80a2c92:	601a      	strpl	r2, [r3, #0]
 80a2c94:	4b14      	ldr	r3, [pc, #80]	; (80a2ce8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2c96:	681a      	ldr	r2, [r3, #0]
 80a2c98:	07d0      	lsls	r0, r2, #31
 80a2c9a:	bf5c      	itt	pl
 80a2c9c:	2201      	movpl	r2, #1
 80a2c9e:	601a      	strpl	r2, [r3, #0]
 80a2ca0:	4b12      	ldr	r3, [pc, #72]	; (80a2cec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2ca2:	681a      	ldr	r2, [r3, #0]
 80a2ca4:	07d1      	lsls	r1, r2, #31
 80a2ca6:	bf5c      	itt	pl
 80a2ca8:	2201      	movpl	r2, #1
 80a2caa:	601a      	strpl	r2, [r3, #0]
 80a2cac:	4b10      	ldr	r3, [pc, #64]	; (80a2cf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2cae:	681a      	ldr	r2, [r3, #0]
 80a2cb0:	07d2      	lsls	r2, r2, #31
 80a2cb2:	bf5c      	itt	pl
 80a2cb4:	2201      	movpl	r2, #1
 80a2cb6:	601a      	strpl	r2, [r3, #0]
 80a2cb8:	4b0e      	ldr	r3, [pc, #56]	; (80a2cf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2cba:	681a      	ldr	r2, [r3, #0]
 80a2cbc:	07d0      	lsls	r0, r2, #31
 80a2cbe:	bf5c      	itt	pl
 80a2cc0:	2201      	movpl	r2, #1
 80a2cc2:	601a      	strpl	r2, [r3, #0]
 80a2cc4:	4b0c      	ldr	r3, [pc, #48]	; (80a2cf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2cc6:	681a      	ldr	r2, [r3, #0]
 80a2cc8:	07d1      	lsls	r1, r2, #31
 80a2cca:	bf5c      	itt	pl
 80a2ccc:	2201      	movpl	r2, #1
 80a2cce:	601a      	strpl	r2, [r3, #0]
 80a2cd0:	4b0a      	ldr	r3, [pc, #40]	; (80a2cfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2cd2:	681a      	ldr	r2, [r3, #0]
 80a2cd4:	07d2      	lsls	r2, r2, #31
 80a2cd6:	bf5c      	itt	pl
 80a2cd8:	2201      	movpl	r2, #1
 80a2cda:	601a      	strpl	r2, [r3, #0]
 80a2cdc:	4770      	bx	lr
 80a2cde:	bf00      	nop
 80a2ce0:	20000a70 	.word	0x20000a70
 80a2ce4:	20000a6c 	.word	0x20000a6c
 80a2ce8:	20000a68 	.word	0x20000a68
 80a2cec:	20000a64 	.word	0x20000a64
 80a2cf0:	20000a60 	.word	0x20000a60
 80a2cf4:	20000a5c 	.word	0x20000a5c
 80a2cf8:	20000a58 	.word	0x20000a58
 80a2cfc:	20000a54 	.word	0x20000a54

080a2d00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2d00:	4b24      	ldr	r3, [pc, #144]	; (80a2d94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2d02:	681a      	ldr	r2, [r3, #0]
 80a2d04:	07d0      	lsls	r0, r2, #31
 80a2d06:	bf5c      	itt	pl
 80a2d08:	2201      	movpl	r2, #1
 80a2d0a:	601a      	strpl	r2, [r3, #0]
 80a2d0c:	4b22      	ldr	r3, [pc, #136]	; (80a2d98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2d0e:	681a      	ldr	r2, [r3, #0]
 80a2d10:	07d1      	lsls	r1, r2, #31
 80a2d12:	bf5c      	itt	pl
 80a2d14:	2201      	movpl	r2, #1
 80a2d16:	601a      	strpl	r2, [r3, #0]
 80a2d18:	4b20      	ldr	r3, [pc, #128]	; (80a2d9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2d1a:	681a      	ldr	r2, [r3, #0]
 80a2d1c:	07d2      	lsls	r2, r2, #31
 80a2d1e:	bf5c      	itt	pl
 80a2d20:	2201      	movpl	r2, #1
 80a2d22:	601a      	strpl	r2, [r3, #0]
 80a2d24:	4b1e      	ldr	r3, [pc, #120]	; (80a2da0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2d26:	681a      	ldr	r2, [r3, #0]
 80a2d28:	07d0      	lsls	r0, r2, #31
 80a2d2a:	bf5c      	itt	pl
 80a2d2c:	2201      	movpl	r2, #1
 80a2d2e:	601a      	strpl	r2, [r3, #0]
 80a2d30:	4b1c      	ldr	r3, [pc, #112]	; (80a2da4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2d32:	681a      	ldr	r2, [r3, #0]
 80a2d34:	07d1      	lsls	r1, r2, #31
 80a2d36:	bf5c      	itt	pl
 80a2d38:	2201      	movpl	r2, #1
 80a2d3a:	601a      	strpl	r2, [r3, #0]
 80a2d3c:	4b1a      	ldr	r3, [pc, #104]	; (80a2da8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2d3e:	681a      	ldr	r2, [r3, #0]
 80a2d40:	07d2      	lsls	r2, r2, #31
 80a2d42:	bf5c      	itt	pl
 80a2d44:	2201      	movpl	r2, #1
 80a2d46:	601a      	strpl	r2, [r3, #0]
 80a2d48:	4b18      	ldr	r3, [pc, #96]	; (80a2dac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2d4a:	681a      	ldr	r2, [r3, #0]
 80a2d4c:	07d0      	lsls	r0, r2, #31
 80a2d4e:	bf5c      	itt	pl
 80a2d50:	2201      	movpl	r2, #1
 80a2d52:	601a      	strpl	r2, [r3, #0]
 80a2d54:	4b16      	ldr	r3, [pc, #88]	; (80a2db0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2d56:	681a      	ldr	r2, [r3, #0]
 80a2d58:	07d1      	lsls	r1, r2, #31
 80a2d5a:	bf5c      	itt	pl
 80a2d5c:	2201      	movpl	r2, #1
 80a2d5e:	601a      	strpl	r2, [r3, #0]
 80a2d60:	4b14      	ldr	r3, [pc, #80]	; (80a2db4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2d62:	681a      	ldr	r2, [r3, #0]
 80a2d64:	07d2      	lsls	r2, r2, #31
 80a2d66:	bf5c      	itt	pl
 80a2d68:	2201      	movpl	r2, #1
 80a2d6a:	601a      	strpl	r2, [r3, #0]
 80a2d6c:	4b12      	ldr	r3, [pc, #72]	; (80a2db8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2d6e:	681a      	ldr	r2, [r3, #0]
 80a2d70:	07d0      	lsls	r0, r2, #31
 80a2d72:	bf5c      	itt	pl
 80a2d74:	2201      	movpl	r2, #1
 80a2d76:	601a      	strpl	r2, [r3, #0]
 80a2d78:	4b10      	ldr	r3, [pc, #64]	; (80a2dbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2d7a:	681a      	ldr	r2, [r3, #0]
 80a2d7c:	07d1      	lsls	r1, r2, #31
 80a2d7e:	bf5c      	itt	pl
 80a2d80:	2201      	movpl	r2, #1
 80a2d82:	601a      	strpl	r2, [r3, #0]
 80a2d84:	4b0e      	ldr	r3, [pc, #56]	; (80a2dc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2d86:	681a      	ldr	r2, [r3, #0]
 80a2d88:	07d2      	lsls	r2, r2, #31
 80a2d8a:	bf5c      	itt	pl
 80a2d8c:	2201      	movpl	r2, #1
 80a2d8e:	601a      	strpl	r2, [r3, #0]
 80a2d90:	4770      	bx	lr
 80a2d92:	bf00      	nop
 80a2d94:	20000aa0 	.word	0x20000aa0
 80a2d98:	20000a9c 	.word	0x20000a9c
 80a2d9c:	20000a98 	.word	0x20000a98
 80a2da0:	20000a94 	.word	0x20000a94
 80a2da4:	20000a90 	.word	0x20000a90
 80a2da8:	20000a8c 	.word	0x20000a8c
 80a2dac:	20000a88 	.word	0x20000a88
 80a2db0:	20000a84 	.word	0x20000a84
 80a2db4:	20000a80 	.word	0x20000a80
 80a2db8:	20000a7c 	.word	0x20000a7c
 80a2dbc:	20000a78 	.word	0x20000a78
 80a2dc0:	20000a74 	.word	0x20000a74

080a2dc4 <roundf>:
 80a2dc4:	b508      	push	{r3, lr}
 80a2dc6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80a2dca:	3b7f      	subs	r3, #127	; 0x7f
 80a2dcc:	2b16      	cmp	r3, #22
 80a2dce:	4601      	mov	r1, r0
 80a2dd0:	dc0e      	bgt.n	80a2df0 <roundf+0x2c>
 80a2dd2:	2b00      	cmp	r3, #0
 80a2dd4:	4602      	mov	r2, r0
 80a2dd6:	db10      	blt.n	80a2dfa <roundf+0x36>
 80a2dd8:	480b      	ldr	r0, [pc, #44]	; (80a2e08 <roundf+0x44>)
 80a2dda:	4118      	asrs	r0, r3
 80a2ddc:	4201      	tst	r1, r0
 80a2dde:	d005      	beq.n	80a2dec <roundf+0x28>
 80a2de0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80a2de4:	4119      	asrs	r1, r3
 80a2de6:	4411      	add	r1, r2
 80a2de8:	ea21 0100 	bic.w	r1, r1, r0
 80a2dec:	4608      	mov	r0, r1
 80a2dee:	bd08      	pop	{r3, pc}
 80a2df0:	2b80      	cmp	r3, #128	; 0x80
 80a2df2:	d1fb      	bne.n	80a2dec <roundf+0x28>
 80a2df4:	f002 f96c 	bl	80a50d0 <__addsf3>
 80a2df8:	bd08      	pop	{r3, pc}
 80a2dfa:	3301      	adds	r3, #1
 80a2dfc:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 80a2e00:	d1f4      	bne.n	80a2dec <roundf+0x28>
 80a2e02:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 80a2e06:	e7f1      	b.n	80a2dec <roundf+0x28>
 80a2e08:	007fffff 	.word	0x007fffff

080a2e0c <log>:
 80a2e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2e10:	b08a      	sub	sp, #40	; 0x28
 80a2e12:	4604      	mov	r4, r0
 80a2e14:	460d      	mov	r5, r1
 80a2e16:	f000 fa93 	bl	80a3340 <__ieee754_log>
 80a2e1a:	4b37      	ldr	r3, [pc, #220]	; (80a2ef8 <log+0xec>)
 80a2e1c:	4606      	mov	r6, r0
 80a2e1e:	f993 8000 	ldrsb.w	r8, [r3]
 80a2e22:	460f      	mov	r7, r1
 80a2e24:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80a2e28:	d00d      	beq.n	80a2e46 <log+0x3a>
 80a2e2a:	4622      	mov	r2, r4
 80a2e2c:	462b      	mov	r3, r5
 80a2e2e:	4620      	mov	r0, r4
 80a2e30:	4629      	mov	r1, r5
 80a2e32:	f002 f899 	bl	80a4f68 <__aeabi_dcmpun>
 80a2e36:	b930      	cbnz	r0, 80a2e46 <log+0x3a>
 80a2e38:	2200      	movs	r2, #0
 80a2e3a:	2300      	movs	r3, #0
 80a2e3c:	4620      	mov	r0, r4
 80a2e3e:	4629      	mov	r1, r5
 80a2e40:	f002 f888 	bl	80a4f54 <__aeabi_dcmpgt>
 80a2e44:	b120      	cbz	r0, 80a2e50 <log+0x44>
 80a2e46:	4630      	mov	r0, r6
 80a2e48:	4639      	mov	r1, r7
 80a2e4a:	b00a      	add	sp, #40	; 0x28
 80a2e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2e50:	4b2a      	ldr	r3, [pc, #168]	; (80a2efc <log+0xf0>)
 80a2e52:	9008      	str	r0, [sp, #32]
 80a2e54:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80a2e58:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80a2e5c:	9301      	str	r3, [sp, #4]
 80a2e5e:	f1b8 0f00 	cmp.w	r8, #0
 80a2e62:	d119      	bne.n	80a2e98 <log+0x8c>
 80a2e64:	4f26      	ldr	r7, [pc, #152]	; (80a2f00 <log+0xf4>)
 80a2e66:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
 80a2e6a:	4620      	mov	r0, r4
 80a2e6c:	4629      	mov	r1, r5
 80a2e6e:	2200      	movs	r2, #0
 80a2e70:	2300      	movs	r3, #0
 80a2e72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a2e76:	f002 f845 	bl	80a4f04 <__aeabi_dcmpeq>
 80a2e7a:	2800      	cmp	r0, #0
 80a2e7c:	d034      	beq.n	80a2ee8 <log+0xdc>
 80a2e7e:	2302      	movs	r3, #2
 80a2e80:	9300      	str	r3, [sp, #0]
 80a2e82:	4668      	mov	r0, sp
 80a2e84:	f001 fb0c 	bl	80a44a0 <matherr>
 80a2e88:	b1a8      	cbz	r0, 80a2eb6 <log+0xaa>
 80a2e8a:	9b08      	ldr	r3, [sp, #32]
 80a2e8c:	b9c3      	cbnz	r3, 80a2ec0 <log+0xb4>
 80a2e8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a2e92:	b00a      	add	sp, #40	; 0x28
 80a2e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2e98:	4f1a      	ldr	r7, [pc, #104]	; (80a2f04 <log+0xf8>)
 80a2e9a:	2600      	movs	r6, #0
 80a2e9c:	4620      	mov	r0, r4
 80a2e9e:	4629      	mov	r1, r5
 80a2ea0:	2200      	movs	r2, #0
 80a2ea2:	2300      	movs	r3, #0
 80a2ea4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a2ea8:	f002 f82c 	bl	80a4f04 <__aeabi_dcmpeq>
 80a2eac:	b168      	cbz	r0, 80a2eca <log+0xbe>
 80a2eae:	2302      	movs	r3, #2
 80a2eb0:	4598      	cmp	r8, r3
 80a2eb2:	9300      	str	r3, [sp, #0]
 80a2eb4:	d1e5      	bne.n	80a2e82 <log+0x76>
 80a2eb6:	f7fe fbd3 	bl	80a1660 <__errno>
 80a2eba:	2322      	movs	r3, #34	; 0x22
 80a2ebc:	6003      	str	r3, [r0, #0]
 80a2ebe:	e7e4      	b.n	80a2e8a <log+0x7e>
 80a2ec0:	f7fe fbce 	bl	80a1660 <__errno>
 80a2ec4:	9b08      	ldr	r3, [sp, #32]
 80a2ec6:	6003      	str	r3, [r0, #0]
 80a2ec8:	e7e1      	b.n	80a2e8e <log+0x82>
 80a2eca:	2301      	movs	r3, #1
 80a2ecc:	f1b8 0f02 	cmp.w	r8, #2
 80a2ed0:	9300      	str	r3, [sp, #0]
 80a2ed2:	d10b      	bne.n	80a2eec <log+0xe0>
 80a2ed4:	f7fe fbc4 	bl	80a1660 <__errno>
 80a2ed8:	2321      	movs	r3, #33	; 0x21
 80a2eda:	6003      	str	r3, [r0, #0]
 80a2edc:	480a      	ldr	r0, [pc, #40]	; (80a2f08 <log+0xfc>)
 80a2ede:	f001 fae1 	bl	80a44a4 <nan>
 80a2ee2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a2ee6:	e7d0      	b.n	80a2e8a <log+0x7e>
 80a2ee8:	2301      	movs	r3, #1
 80a2eea:	9300      	str	r3, [sp, #0]
 80a2eec:	4668      	mov	r0, sp
 80a2eee:	f001 fad7 	bl	80a44a0 <matherr>
 80a2ef2:	2800      	cmp	r0, #0
 80a2ef4:	d1f2      	bne.n	80a2edc <log+0xd0>
 80a2ef6:	e7ed      	b.n	80a2ed4 <log+0xc8>
 80a2ef8:	2000031c 	.word	0x2000031c
 80a2efc:	080a6574 	.word	0x080a6574
 80a2f00:	c7efffff 	.word	0xc7efffff
 80a2f04:	fff00000 	.word	0xfff00000
 80a2f08:	080a6578 	.word	0x080a6578

080a2f0c <log10>:
 80a2f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2f10:	b08b      	sub	sp, #44	; 0x2c
 80a2f12:	4604      	mov	r4, r0
 80a2f14:	460d      	mov	r5, r1
 80a2f16:	f000 fc07 	bl	80a3728 <__ieee754_log10>
 80a2f1a:	4b38      	ldr	r3, [pc, #224]	; (80a2ffc <log10+0xf0>)
 80a2f1c:	4606      	mov	r6, r0
 80a2f1e:	f993 8000 	ldrsb.w	r8, [r3]
 80a2f22:	460f      	mov	r7, r1
 80a2f24:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80a2f28:	d00e      	beq.n	80a2f48 <log10+0x3c>
 80a2f2a:	4622      	mov	r2, r4
 80a2f2c:	462b      	mov	r3, r5
 80a2f2e:	4620      	mov	r0, r4
 80a2f30:	4629      	mov	r1, r5
 80a2f32:	f002 f819 	bl	80a4f68 <__aeabi_dcmpun>
 80a2f36:	4681      	mov	r9, r0
 80a2f38:	b930      	cbnz	r0, 80a2f48 <log10+0x3c>
 80a2f3a:	2200      	movs	r2, #0
 80a2f3c:	2300      	movs	r3, #0
 80a2f3e:	4620      	mov	r0, r4
 80a2f40:	4629      	mov	r1, r5
 80a2f42:	f001 fff3 	bl	80a4f2c <__aeabi_dcmple>
 80a2f46:	b920      	cbnz	r0, 80a2f52 <log10+0x46>
 80a2f48:	4630      	mov	r0, r6
 80a2f4a:	4639      	mov	r1, r7
 80a2f4c:	b00b      	add	sp, #44	; 0x2c
 80a2f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a2f52:	4b2b      	ldr	r3, [pc, #172]	; (80a3000 <log10+0xf4>)
 80a2f54:	f8cd 9020 	str.w	r9, [sp, #32]
 80a2f58:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80a2f5c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80a2f60:	9301      	str	r3, [sp, #4]
 80a2f62:	f1b8 0f00 	cmp.w	r8, #0
 80a2f66:	d119      	bne.n	80a2f9c <log10+0x90>
 80a2f68:	4f26      	ldr	r7, [pc, #152]	; (80a3004 <log10+0xf8>)
 80a2f6a:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
 80a2f6e:	4620      	mov	r0, r4
 80a2f70:	4629      	mov	r1, r5
 80a2f72:	2200      	movs	r2, #0
 80a2f74:	2300      	movs	r3, #0
 80a2f76:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a2f7a:	f001 ffc3 	bl	80a4f04 <__aeabi_dcmpeq>
 80a2f7e:	2800      	cmp	r0, #0
 80a2f80:	d034      	beq.n	80a2fec <log10+0xe0>
 80a2f82:	2302      	movs	r3, #2
 80a2f84:	9300      	str	r3, [sp, #0]
 80a2f86:	4668      	mov	r0, sp
 80a2f88:	f001 fa8a 	bl	80a44a0 <matherr>
 80a2f8c:	b1a8      	cbz	r0, 80a2fba <log10+0xae>
 80a2f8e:	9b08      	ldr	r3, [sp, #32]
 80a2f90:	b9c3      	cbnz	r3, 80a2fc4 <log10+0xb8>
 80a2f92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a2f96:	b00b      	add	sp, #44	; 0x2c
 80a2f98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a2f9c:	4f1a      	ldr	r7, [pc, #104]	; (80a3008 <log10+0xfc>)
 80a2f9e:	2600      	movs	r6, #0
 80a2fa0:	4620      	mov	r0, r4
 80a2fa2:	4629      	mov	r1, r5
 80a2fa4:	2200      	movs	r2, #0
 80a2fa6:	2300      	movs	r3, #0
 80a2fa8:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a2fac:	f001 ffaa 	bl	80a4f04 <__aeabi_dcmpeq>
 80a2fb0:	b168      	cbz	r0, 80a2fce <log10+0xc2>
 80a2fb2:	2302      	movs	r3, #2
 80a2fb4:	4598      	cmp	r8, r3
 80a2fb6:	9300      	str	r3, [sp, #0]
 80a2fb8:	d1e5      	bne.n	80a2f86 <log10+0x7a>
 80a2fba:	f7fe fb51 	bl	80a1660 <__errno>
 80a2fbe:	2322      	movs	r3, #34	; 0x22
 80a2fc0:	6003      	str	r3, [r0, #0]
 80a2fc2:	e7e4      	b.n	80a2f8e <log10+0x82>
 80a2fc4:	f7fe fb4c 	bl	80a1660 <__errno>
 80a2fc8:	9b08      	ldr	r3, [sp, #32]
 80a2fca:	6003      	str	r3, [r0, #0]
 80a2fcc:	e7e1      	b.n	80a2f92 <log10+0x86>
 80a2fce:	2301      	movs	r3, #1
 80a2fd0:	f1b8 0f02 	cmp.w	r8, #2
 80a2fd4:	9300      	str	r3, [sp, #0]
 80a2fd6:	d10b      	bne.n	80a2ff0 <log10+0xe4>
 80a2fd8:	f7fe fb42 	bl	80a1660 <__errno>
 80a2fdc:	2321      	movs	r3, #33	; 0x21
 80a2fde:	6003      	str	r3, [r0, #0]
 80a2fe0:	480a      	ldr	r0, [pc, #40]	; (80a300c <log10+0x100>)
 80a2fe2:	f001 fa5f 	bl	80a44a4 <nan>
 80a2fe6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a2fea:	e7d0      	b.n	80a2f8e <log10+0x82>
 80a2fec:	2301      	movs	r3, #1
 80a2fee:	9300      	str	r3, [sp, #0]
 80a2ff0:	4668      	mov	r0, sp
 80a2ff2:	f001 fa55 	bl	80a44a0 <matherr>
 80a2ff6:	2800      	cmp	r0, #0
 80a2ff8:	d1f2      	bne.n	80a2fe0 <log10+0xd4>
 80a2ffa:	e7ed      	b.n	80a2fd8 <log10+0xcc>
 80a2ffc:	2000031c 	.word	0x2000031c
 80a3000:	080a657c 	.word	0x080a657c
 80a3004:	c7efffff 	.word	0xc7efffff
 80a3008:	fff00000 	.word	0xfff00000
 80a300c:	080a6578 	.word	0x080a6578

080a3010 <pow>:
 80a3010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3014:	b08d      	sub	sp, #52	; 0x34
 80a3016:	4606      	mov	r6, r0
 80a3018:	460f      	mov	r7, r1
 80a301a:	4614      	mov	r4, r2
 80a301c:	461d      	mov	r5, r3
 80a301e:	f000 fc0f 	bl	80a3840 <__ieee754_pow>
 80a3022:	f8df 9310 	ldr.w	r9, [pc, #784]	; 80a3334 <pow+0x324>
 80a3026:	e9cd 0100 	strd	r0, r1, [sp]
 80a302a:	f999 8000 	ldrsb.w	r8, [r9]
 80a302e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80a3032:	d046      	beq.n	80a30c2 <pow+0xb2>
 80a3034:	4622      	mov	r2, r4
 80a3036:	462b      	mov	r3, r5
 80a3038:	4620      	mov	r0, r4
 80a303a:	4629      	mov	r1, r5
 80a303c:	f001 ff94 	bl	80a4f68 <__aeabi_dcmpun>
 80a3040:	4683      	mov	fp, r0
 80a3042:	2800      	cmp	r0, #0
 80a3044:	d13d      	bne.n	80a30c2 <pow+0xb2>
 80a3046:	4632      	mov	r2, r6
 80a3048:	463b      	mov	r3, r7
 80a304a:	4630      	mov	r0, r6
 80a304c:	4639      	mov	r1, r7
 80a304e:	f001 ff8b 	bl	80a4f68 <__aeabi_dcmpun>
 80a3052:	4682      	mov	sl, r0
 80a3054:	2800      	cmp	r0, #0
 80a3056:	d174      	bne.n	80a3142 <pow+0x132>
 80a3058:	4630      	mov	r0, r6
 80a305a:	4639      	mov	r1, r7
 80a305c:	2200      	movs	r2, #0
 80a305e:	2300      	movs	r3, #0
 80a3060:	f001 ff50 	bl	80a4f04 <__aeabi_dcmpeq>
 80a3064:	2800      	cmp	r0, #0
 80a3066:	d033      	beq.n	80a30d0 <pow+0xc0>
 80a3068:	2200      	movs	r2, #0
 80a306a:	2300      	movs	r3, #0
 80a306c:	4620      	mov	r0, r4
 80a306e:	4629      	mov	r1, r5
 80a3070:	f001 ff48 	bl	80a4f04 <__aeabi_dcmpeq>
 80a3074:	4683      	mov	fp, r0
 80a3076:	b1b8      	cbz	r0, 80a30a8 <pow+0x98>
 80a3078:	4aa9      	ldr	r2, [pc, #676]	; (80a3320 <pow+0x310>)
 80a307a:	2301      	movs	r3, #1
 80a307c:	2000      	movs	r0, #0
 80a307e:	2100      	movs	r1, #0
 80a3080:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80a3084:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a3088:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a308c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a3090:	9203      	str	r2, [sp, #12]
 80a3092:	9302      	str	r3, [sp, #8]
 80a3094:	f1b8 0f00 	cmp.w	r8, #0
 80a3098:	d06c      	beq.n	80a3174 <pow+0x164>
 80a309a:	4ba2      	ldr	r3, [pc, #648]	; (80a3324 <pow+0x314>)
 80a309c:	2200      	movs	r2, #0
 80a309e:	4610      	mov	r0, r2
 80a30a0:	4619      	mov	r1, r3
 80a30a2:	b00d      	add	sp, #52	; 0x34
 80a30a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a30a8:	4620      	mov	r0, r4
 80a30aa:	4629      	mov	r1, r5
 80a30ac:	f001 f9f2 	bl	80a4494 <finite>
 80a30b0:	b138      	cbz	r0, 80a30c2 <pow+0xb2>
 80a30b2:	2200      	movs	r2, #0
 80a30b4:	2300      	movs	r3, #0
 80a30b6:	4620      	mov	r0, r4
 80a30b8:	4629      	mov	r1, r5
 80a30ba:	f001 ff2d 	bl	80a4f18 <__aeabi_dcmplt>
 80a30be:	2800      	cmp	r0, #0
 80a30c0:	d16a      	bne.n	80a3198 <pow+0x188>
 80a30c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a30c6:	4610      	mov	r0, r2
 80a30c8:	4619      	mov	r1, r3
 80a30ca:	b00d      	add	sp, #52	; 0x34
 80a30cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a30d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a30d4:	f001 f9de 	bl	80a4494 <finite>
 80a30d8:	4680      	mov	r8, r0
 80a30da:	2800      	cmp	r0, #0
 80a30dc:	d07d      	beq.n	80a31da <pow+0x1ca>
 80a30de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a30e2:	f04f 0a00 	mov.w	sl, #0
 80a30e6:	f04f 0b00 	mov.w	fp, #0
 80a30ea:	4652      	mov	r2, sl
 80a30ec:	465b      	mov	r3, fp
 80a30ee:	f001 ff09 	bl	80a4f04 <__aeabi_dcmpeq>
 80a30f2:	2800      	cmp	r0, #0
 80a30f4:	d0e5      	beq.n	80a30c2 <pow+0xb2>
 80a30f6:	4630      	mov	r0, r6
 80a30f8:	4639      	mov	r1, r7
 80a30fa:	f001 f9cb 	bl	80a4494 <finite>
 80a30fe:	2800      	cmp	r0, #0
 80a3100:	d0df      	beq.n	80a30c2 <pow+0xb2>
 80a3102:	4620      	mov	r0, r4
 80a3104:	4629      	mov	r1, r5
 80a3106:	f001 f9c5 	bl	80a4494 <finite>
 80a310a:	2800      	cmp	r0, #0
 80a310c:	d0d9      	beq.n	80a30c2 <pow+0xb2>
 80a310e:	f999 3000 	ldrsb.w	r3, [r9]
 80a3112:	4883      	ldr	r0, [pc, #524]	; (80a3320 <pow+0x310>)
 80a3114:	2104      	movs	r1, #4
 80a3116:	2200      	movs	r2, #0
 80a3118:	2b02      	cmp	r3, #2
 80a311a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a311e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a3122:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a3126:	9003      	str	r0, [sp, #12]
 80a3128:	9102      	str	r1, [sp, #8]
 80a312a:	920a      	str	r2, [sp, #40]	; 0x28
 80a312c:	d004      	beq.n	80a3138 <pow+0x128>
 80a312e:	a802      	add	r0, sp, #8
 80a3130:	f001 f9b6 	bl	80a44a0 <matherr>
 80a3134:	2800      	cmp	r0, #0
 80a3136:	d147      	bne.n	80a31c8 <pow+0x1b8>
 80a3138:	f7fe fa92 	bl	80a1660 <__errno>
 80a313c:	2322      	movs	r3, #34	; 0x22
 80a313e:	6003      	str	r3, [r0, #0]
 80a3140:	e042      	b.n	80a31c8 <pow+0x1b8>
 80a3142:	2200      	movs	r2, #0
 80a3144:	2300      	movs	r3, #0
 80a3146:	4620      	mov	r0, r4
 80a3148:	4629      	mov	r1, r5
 80a314a:	f001 fedb 	bl	80a4f04 <__aeabi_dcmpeq>
 80a314e:	2800      	cmp	r0, #0
 80a3150:	d0b7      	beq.n	80a30c2 <pow+0xb2>
 80a3152:	4b74      	ldr	r3, [pc, #464]	; (80a3324 <pow+0x314>)
 80a3154:	4872      	ldr	r0, [pc, #456]	; (80a3320 <pow+0x310>)
 80a3156:	2200      	movs	r2, #0
 80a3158:	2101      	movs	r1, #1
 80a315a:	f1b8 0f02 	cmp.w	r8, #2
 80a315e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80a3162:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a3166:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a316a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a316e:	9003      	str	r0, [sp, #12]
 80a3170:	9102      	str	r1, [sp, #8]
 80a3172:	d0a8      	beq.n	80a30c6 <pow+0xb6>
 80a3174:	a802      	add	r0, sp, #8
 80a3176:	f001 f993 	bl	80a44a0 <matherr>
 80a317a:	2800      	cmp	r0, #0
 80a317c:	d07e      	beq.n	80a327c <pow+0x26c>
 80a317e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3180:	b343      	cbz	r3, 80a31d4 <pow+0x1c4>
 80a3182:	f7fe fa6d 	bl	80a1660 <__errno>
 80a3186:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a318a:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a318c:	6001      	str	r1, [r0, #0]
 80a318e:	4610      	mov	r0, r2
 80a3190:	4619      	mov	r1, r3
 80a3192:	b00d      	add	sp, #52	; 0x34
 80a3194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3198:	4961      	ldr	r1, [pc, #388]	; (80a3320 <pow+0x310>)
 80a319a:	f999 3000 	ldrsb.w	r3, [r9]
 80a319e:	2201      	movs	r2, #1
 80a31a0:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80a31a4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a31a8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a31ac:	9103      	str	r1, [sp, #12]
 80a31ae:	9202      	str	r2, [sp, #8]
 80a31b0:	2b00      	cmp	r3, #0
 80a31b2:	d068      	beq.n	80a3286 <pow+0x276>
 80a31b4:	495c      	ldr	r1, [pc, #368]	; (80a3328 <pow+0x318>)
 80a31b6:	2000      	movs	r0, #0
 80a31b8:	2b02      	cmp	r3, #2
 80a31ba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a31be:	d166      	bne.n	80a328e <pow+0x27e>
 80a31c0:	f7fe fa4e 	bl	80a1660 <__errno>
 80a31c4:	2321      	movs	r3, #33	; 0x21
 80a31c6:	6003      	str	r3, [r0, #0]
 80a31c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a31ca:	b11b      	cbz	r3, 80a31d4 <pow+0x1c4>
 80a31cc:	f7fe fa48 	bl	80a1660 <__errno>
 80a31d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a31d2:	6003      	str	r3, [r0, #0]
 80a31d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a31d8:	e775      	b.n	80a30c6 <pow+0xb6>
 80a31da:	4630      	mov	r0, r6
 80a31dc:	4639      	mov	r1, r7
 80a31de:	f001 f959 	bl	80a4494 <finite>
 80a31e2:	2800      	cmp	r0, #0
 80a31e4:	f43f af7b 	beq.w	80a30de <pow+0xce>
 80a31e8:	4620      	mov	r0, r4
 80a31ea:	4629      	mov	r1, r5
 80a31ec:	f001 f952 	bl	80a4494 <finite>
 80a31f0:	2800      	cmp	r0, #0
 80a31f2:	f43f af74 	beq.w	80a30de <pow+0xce>
 80a31f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a31fa:	4610      	mov	r0, r2
 80a31fc:	4619      	mov	r1, r3
 80a31fe:	f001 feb3 	bl	80a4f68 <__aeabi_dcmpun>
 80a3202:	2800      	cmp	r0, #0
 80a3204:	d16f      	bne.n	80a32e6 <pow+0x2d6>
 80a3206:	4b46      	ldr	r3, [pc, #280]	; (80a3320 <pow+0x310>)
 80a3208:	f999 8000 	ldrsb.w	r8, [r9]
 80a320c:	9303      	str	r3, [sp, #12]
 80a320e:	2303      	movs	r3, #3
 80a3210:	900a      	str	r0, [sp, #40]	; 0x28
 80a3212:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a3216:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a321a:	9302      	str	r3, [sp, #8]
 80a321c:	f1b8 0f00 	cmp.w	r8, #0
 80a3220:	d13b      	bne.n	80a329a <pow+0x28a>
 80a3222:	f8df b114 	ldr.w	fp, [pc, #276]	; 80a3338 <pow+0x328>
 80a3226:	f04f 4a60 	mov.w	sl, #3758096384	; 0xe0000000
 80a322a:	2200      	movs	r2, #0
 80a322c:	2300      	movs	r3, #0
 80a322e:	4630      	mov	r0, r6
 80a3230:	4639      	mov	r1, r7
 80a3232:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a3236:	f001 fe6f 	bl	80a4f18 <__aeabi_dcmplt>
 80a323a:	2800      	cmp	r0, #0
 80a323c:	f43f af77 	beq.w	80a312e <pow+0x11e>
 80a3240:	2200      	movs	r2, #0
 80a3242:	4b3a      	ldr	r3, [pc, #232]	; (80a332c <pow+0x31c>)
 80a3244:	4620      	mov	r0, r4
 80a3246:	4629      	mov	r1, r5
 80a3248:	f001 fbf4 	bl	80a4a34 <__aeabi_dmul>
 80a324c:	4604      	mov	r4, r0
 80a324e:	460d      	mov	r5, r1
 80a3250:	f001 f92e 	bl	80a44b0 <rint>
 80a3254:	4602      	mov	r2, r0
 80a3256:	460b      	mov	r3, r1
 80a3258:	4620      	mov	r0, r4
 80a325a:	4629      	mov	r1, r5
 80a325c:	f001 fe52 	bl	80a4f04 <__aeabi_dcmpeq>
 80a3260:	2800      	cmp	r0, #0
 80a3262:	d13d      	bne.n	80a32e0 <pow+0x2d0>
 80a3264:	4b32      	ldr	r3, [pc, #200]	; (80a3330 <pow+0x320>)
 80a3266:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a326a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a326e:	f999 8000 	ldrsb.w	r8, [r9]
 80a3272:	f1b8 0f02 	cmp.w	r8, #2
 80a3276:	f47f af5a 	bne.w	80a312e <pow+0x11e>
 80a327a:	e75d      	b.n	80a3138 <pow+0x128>
 80a327c:	f7fe f9f0 	bl	80a1660 <__errno>
 80a3280:	2321      	movs	r3, #33	; 0x21
 80a3282:	6003      	str	r3, [r0, #0]
 80a3284:	e77b      	b.n	80a317e <pow+0x16e>
 80a3286:	2300      	movs	r3, #0
 80a3288:	2400      	movs	r4, #0
 80a328a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80a328e:	a802      	add	r0, sp, #8
 80a3290:	f001 f906 	bl	80a44a0 <matherr>
 80a3294:	2800      	cmp	r0, #0
 80a3296:	d197      	bne.n	80a31c8 <pow+0x1b8>
 80a3298:	e792      	b.n	80a31c0 <pow+0x1b0>
 80a329a:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 80a333c <pow+0x32c>
 80a329e:	f04f 0a00 	mov.w	sl, #0
 80a32a2:	2200      	movs	r2, #0
 80a32a4:	2300      	movs	r3, #0
 80a32a6:	4630      	mov	r0, r6
 80a32a8:	4639      	mov	r1, r7
 80a32aa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a32ae:	f001 fe33 	bl	80a4f18 <__aeabi_dcmplt>
 80a32b2:	2800      	cmp	r0, #0
 80a32b4:	d0dd      	beq.n	80a3272 <pow+0x262>
 80a32b6:	2200      	movs	r2, #0
 80a32b8:	4b1c      	ldr	r3, [pc, #112]	; (80a332c <pow+0x31c>)
 80a32ba:	4620      	mov	r0, r4
 80a32bc:	4629      	mov	r1, r5
 80a32be:	f001 fbb9 	bl	80a4a34 <__aeabi_dmul>
 80a32c2:	4604      	mov	r4, r0
 80a32c4:	460d      	mov	r5, r1
 80a32c6:	f001 f8f3 	bl	80a44b0 <rint>
 80a32ca:	4602      	mov	r2, r0
 80a32cc:	460b      	mov	r3, r1
 80a32ce:	4620      	mov	r0, r4
 80a32d0:	4629      	mov	r1, r5
 80a32d2:	f001 fe17 	bl	80a4f04 <__aeabi_dcmpeq>
 80a32d6:	b918      	cbnz	r0, 80a32e0 <pow+0x2d0>
 80a32d8:	4b13      	ldr	r3, [pc, #76]	; (80a3328 <pow+0x318>)
 80a32da:	2200      	movs	r2, #0
 80a32dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a32e0:	f999 8000 	ldrsb.w	r8, [r9]
 80a32e4:	e7c5      	b.n	80a3272 <pow+0x262>
 80a32e6:	4a0e      	ldr	r2, [pc, #56]	; (80a3320 <pow+0x310>)
 80a32e8:	f999 9000 	ldrsb.w	r9, [r9]
 80a32ec:	2301      	movs	r3, #1
 80a32ee:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80a32f2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a32f6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a32fa:	9203      	str	r2, [sp, #12]
 80a32fc:	9302      	str	r3, [sp, #8]
 80a32fe:	f1b9 0f00 	cmp.w	r9, #0
 80a3302:	d0c0      	beq.n	80a3286 <pow+0x276>
 80a3304:	2200      	movs	r2, #0
 80a3306:	2300      	movs	r3, #0
 80a3308:	4610      	mov	r0, r2
 80a330a:	4619      	mov	r1, r3
 80a330c:	f001 fcbc 	bl	80a4c88 <__aeabi_ddiv>
 80a3310:	f1b9 0f02 	cmp.w	r9, #2
 80a3314:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a3318:	f43f af52 	beq.w	80a31c0 <pow+0x1b0>
 80a331c:	e7b7      	b.n	80a328e <pow+0x27e>
 80a331e:	bf00      	nop
 80a3320:	080a6584 	.word	0x080a6584
 80a3324:	3ff00000 	.word	0x3ff00000
 80a3328:	fff00000 	.word	0xfff00000
 80a332c:	3fe00000 	.word	0x3fe00000
 80a3330:	c7efffff 	.word	0xc7efffff
 80a3334:	2000031c 	.word	0x2000031c
 80a3338:	47efffff 	.word	0x47efffff
 80a333c:	7ff00000 	.word	0x7ff00000

080a3340 <__ieee754_log>:
 80a3340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3344:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a3348:	b085      	sub	sp, #20
 80a334a:	4606      	mov	r6, r0
 80a334c:	460f      	mov	r7, r1
 80a334e:	460b      	mov	r3, r1
 80a3350:	da5a      	bge.n	80a3408 <__ieee754_log+0xc8>
 80a3352:	4602      	mov	r2, r0
 80a3354:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80a3358:	4322      	orrs	r2, r4
 80a335a:	f000 80f7 	beq.w	80a354c <__ieee754_log+0x20c>
 80a335e:	2900      	cmp	r1, #0
 80a3360:	f2c0 8179 	blt.w	80a3656 <__ieee754_log+0x316>
 80a3364:	2200      	movs	r2, #0
 80a3366:	4bd6      	ldr	r3, [pc, #856]	; (80a36c0 <__ieee754_log+0x380>)
 80a3368:	f001 fb64 	bl	80a4a34 <__aeabi_dmul>
 80a336c:	460b      	mov	r3, r1
 80a336e:	460f      	mov	r7, r1
 80a3370:	49d4      	ldr	r1, [pc, #848]	; (80a36c4 <__ieee754_log+0x384>)
 80a3372:	4606      	mov	r6, r0
 80a3374:	428b      	cmp	r3, r1
 80a3376:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80a337a:	dc49      	bgt.n	80a3410 <__ieee754_log+0xd0>
 80a337c:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80a3380:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
 80a3384:	f604 7464 	addw	r4, r4, #3940	; 0xf64
 80a3388:	f404 1e80 	and.w	lr, r4, #1048576	; 0x100000
 80a338c:	f08e 517f 	eor.w	r1, lr, #1069547520	; 0x3fc00000
 80a3390:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 80a3394:	151b      	asrs	r3, r3, #20
 80a3396:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a339a:	ea41 0705 	orr.w	r7, r1, r5
 80a339e:	189c      	adds	r4, r3, r2
 80a33a0:	4630      	mov	r0, r6
 80a33a2:	2200      	movs	r2, #0
 80a33a4:	4bc8      	ldr	r3, [pc, #800]	; (80a36c8 <__ieee754_log+0x388>)
 80a33a6:	4639      	mov	r1, r7
 80a33a8:	eb04 541e 	add.w	r4, r4, lr, lsr #20
 80a33ac:	f001 f98e 	bl	80a46cc <__aeabi_dsub>
 80a33b0:	1cab      	adds	r3, r5, #2
 80a33b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a33b6:	2b02      	cmp	r3, #2
 80a33b8:	4682      	mov	sl, r0
 80a33ba:	468b      	mov	fp, r1
 80a33bc:	f04f 0200 	mov.w	r2, #0
 80a33c0:	dc2f      	bgt.n	80a3422 <__ieee754_log+0xe2>
 80a33c2:	2300      	movs	r3, #0
 80a33c4:	f001 fd9e 	bl	80a4f04 <__aeabi_dcmpeq>
 80a33c8:	2800      	cmp	r0, #0
 80a33ca:	f000 80c8 	beq.w	80a355e <__ieee754_log+0x21e>
 80a33ce:	2c00      	cmp	r4, #0
 80a33d0:	f000 814a 	beq.w	80a3668 <__ieee754_log+0x328>
 80a33d4:	4620      	mov	r0, r4
 80a33d6:	f001 fac7 	bl	80a4968 <__aeabi_i2d>
 80a33da:	a3a5      	add	r3, pc, #660	; (adr r3, 80a3670 <__ieee754_log+0x330>)
 80a33dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a33e0:	4606      	mov	r6, r0
 80a33e2:	460f      	mov	r7, r1
 80a33e4:	f001 fb26 	bl	80a4a34 <__aeabi_dmul>
 80a33e8:	a3a3      	add	r3, pc, #652	; (adr r3, 80a3678 <__ieee754_log+0x338>)
 80a33ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a33ee:	4604      	mov	r4, r0
 80a33f0:	460d      	mov	r5, r1
 80a33f2:	4630      	mov	r0, r6
 80a33f4:	4639      	mov	r1, r7
 80a33f6:	f001 fb1d 	bl	80a4a34 <__aeabi_dmul>
 80a33fa:	4602      	mov	r2, r0
 80a33fc:	460b      	mov	r3, r1
 80a33fe:	4620      	mov	r0, r4
 80a3400:	4629      	mov	r1, r5
 80a3402:	f001 f965 	bl	80a46d0 <__adddf3>
 80a3406:	e009      	b.n	80a341c <__ieee754_log+0xdc>
 80a3408:	49ae      	ldr	r1, [pc, #696]	; (80a36c4 <__ieee754_log+0x384>)
 80a340a:	2200      	movs	r2, #0
 80a340c:	428b      	cmp	r3, r1
 80a340e:	ddb5      	ble.n	80a337c <__ieee754_log+0x3c>
 80a3410:	4632      	mov	r2, r6
 80a3412:	463b      	mov	r3, r7
 80a3414:	4630      	mov	r0, r6
 80a3416:	4639      	mov	r1, r7
 80a3418:	f001 f95a 	bl	80a46d0 <__adddf3>
 80a341c:	b005      	add	sp, #20
 80a341e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3422:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a3426:	f001 f953 	bl	80a46d0 <__adddf3>
 80a342a:	4602      	mov	r2, r0
 80a342c:	460b      	mov	r3, r1
 80a342e:	4650      	mov	r0, sl
 80a3430:	4659      	mov	r1, fp
 80a3432:	f001 fc29 	bl	80a4c88 <__aeabi_ddiv>
 80a3436:	4606      	mov	r6, r0
 80a3438:	4620      	mov	r0, r4
 80a343a:	460f      	mov	r7, r1
 80a343c:	f001 fa94 	bl	80a4968 <__aeabi_i2d>
 80a3440:	4632      	mov	r2, r6
 80a3442:	e9cd 0100 	strd	r0, r1, [sp]
 80a3446:	463b      	mov	r3, r7
 80a3448:	4630      	mov	r0, r6
 80a344a:	4639      	mov	r1, r7
 80a344c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80a3450:	f001 faf0 	bl	80a4a34 <__aeabi_dmul>
 80a3454:	4602      	mov	r2, r0
 80a3456:	460b      	mov	r3, r1
 80a3458:	4680      	mov	r8, r0
 80a345a:	4689      	mov	r9, r1
 80a345c:	f001 faea 	bl	80a4a34 <__aeabi_dmul>
 80a3460:	a387      	add	r3, pc, #540	; (adr r3, 80a3680 <__ieee754_log+0x340>)
 80a3462:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3466:	4606      	mov	r6, r0
 80a3468:	460f      	mov	r7, r1
 80a346a:	f001 fae3 	bl	80a4a34 <__aeabi_dmul>
 80a346e:	a386      	add	r3, pc, #536	; (adr r3, 80a3688 <__ieee754_log+0x348>)
 80a3470:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3474:	f001 f92c 	bl	80a46d0 <__adddf3>
 80a3478:	4632      	mov	r2, r6
 80a347a:	463b      	mov	r3, r7
 80a347c:	f001 fada 	bl	80a4a34 <__aeabi_dmul>
 80a3480:	a383      	add	r3, pc, #524	; (adr r3, 80a3690 <__ieee754_log+0x350>)
 80a3482:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3486:	f001 f923 	bl	80a46d0 <__adddf3>
 80a348a:	4632      	mov	r2, r6
 80a348c:	463b      	mov	r3, r7
 80a348e:	f001 fad1 	bl	80a4a34 <__aeabi_dmul>
 80a3492:	a381      	add	r3, pc, #516	; (adr r3, 80a3698 <__ieee754_log+0x358>)
 80a3494:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3498:	f001 f91a 	bl	80a46d0 <__adddf3>
 80a349c:	4642      	mov	r2, r8
 80a349e:	464b      	mov	r3, r9
 80a34a0:	f001 fac8 	bl	80a4a34 <__aeabi_dmul>
 80a34a4:	a37e      	add	r3, pc, #504	; (adr r3, 80a36a0 <__ieee754_log+0x360>)
 80a34a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a34aa:	4680      	mov	r8, r0
 80a34ac:	4689      	mov	r9, r1
 80a34ae:	4630      	mov	r0, r6
 80a34b0:	4639      	mov	r1, r7
 80a34b2:	f001 fabf 	bl	80a4a34 <__aeabi_dmul>
 80a34b6:	a37c      	add	r3, pc, #496	; (adr r3, 80a36a8 <__ieee754_log+0x368>)
 80a34b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a34bc:	f001 f908 	bl	80a46d0 <__adddf3>
 80a34c0:	4632      	mov	r2, r6
 80a34c2:	463b      	mov	r3, r7
 80a34c4:	f001 fab6 	bl	80a4a34 <__aeabi_dmul>
 80a34c8:	a379      	add	r3, pc, #484	; (adr r3, 80a36b0 <__ieee754_log+0x370>)
 80a34ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a34ce:	f001 f8ff 	bl	80a46d0 <__adddf3>
 80a34d2:	4632      	mov	r2, r6
 80a34d4:	463b      	mov	r3, r7
 80a34d6:	f001 faad 	bl	80a4a34 <__aeabi_dmul>
 80a34da:	460b      	mov	r3, r1
 80a34dc:	4602      	mov	r2, r0
 80a34de:	4649      	mov	r1, r9
 80a34e0:	4640      	mov	r0, r8
 80a34e2:	f001 f8f5 	bl	80a46d0 <__adddf3>
 80a34e6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80a34ea:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80a34ee:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80a34f2:	3551      	adds	r5, #81	; 0x51
 80a34f4:	431d      	orrs	r5, r3
 80a34f6:	2d00      	cmp	r5, #0
 80a34f8:	4680      	mov	r8, r0
 80a34fa:	4689      	mov	r9, r1
 80a34fc:	dd56      	ble.n	80a35ac <__ieee754_log+0x26c>
 80a34fe:	2200      	movs	r2, #0
 80a3500:	4b72      	ldr	r3, [pc, #456]	; (80a36cc <__ieee754_log+0x38c>)
 80a3502:	4650      	mov	r0, sl
 80a3504:	4659      	mov	r1, fp
 80a3506:	f001 fa95 	bl	80a4a34 <__aeabi_dmul>
 80a350a:	4652      	mov	r2, sl
 80a350c:	465b      	mov	r3, fp
 80a350e:	f001 fa91 	bl	80a4a34 <__aeabi_dmul>
 80a3512:	4606      	mov	r6, r0
 80a3514:	460f      	mov	r7, r1
 80a3516:	2c00      	cmp	r4, #0
 80a3518:	d168      	bne.n	80a35ec <__ieee754_log+0x2ac>
 80a351a:	4632      	mov	r2, r6
 80a351c:	463b      	mov	r3, r7
 80a351e:	4640      	mov	r0, r8
 80a3520:	4649      	mov	r1, r9
 80a3522:	f001 f8d5 	bl	80a46d0 <__adddf3>
 80a3526:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a352a:	f001 fa83 	bl	80a4a34 <__aeabi_dmul>
 80a352e:	4602      	mov	r2, r0
 80a3530:	460b      	mov	r3, r1
 80a3532:	4630      	mov	r0, r6
 80a3534:	4639      	mov	r1, r7
 80a3536:	f001 f8c9 	bl	80a46cc <__aeabi_dsub>
 80a353a:	4602      	mov	r2, r0
 80a353c:	460b      	mov	r3, r1
 80a353e:	4650      	mov	r0, sl
 80a3540:	4659      	mov	r1, fp
 80a3542:	f001 f8c3 	bl	80a46cc <__aeabi_dsub>
 80a3546:	b005      	add	sp, #20
 80a3548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a354c:	2200      	movs	r2, #0
 80a354e:	2300      	movs	r3, #0
 80a3550:	2000      	movs	r0, #0
 80a3552:	495f      	ldr	r1, [pc, #380]	; (80a36d0 <__ieee754_log+0x390>)
 80a3554:	f001 fb98 	bl	80a4c88 <__aeabi_ddiv>
 80a3558:	b005      	add	sp, #20
 80a355a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a355e:	a356      	add	r3, pc, #344	; (adr r3, 80a36b8 <__ieee754_log+0x378>)
 80a3560:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3564:	4650      	mov	r0, sl
 80a3566:	4659      	mov	r1, fp
 80a3568:	f001 fa64 	bl	80a4a34 <__aeabi_dmul>
 80a356c:	4602      	mov	r2, r0
 80a356e:	460b      	mov	r3, r1
 80a3570:	2000      	movs	r0, #0
 80a3572:	4956      	ldr	r1, [pc, #344]	; (80a36cc <__ieee754_log+0x38c>)
 80a3574:	f001 f8aa 	bl	80a46cc <__aeabi_dsub>
 80a3578:	4652      	mov	r2, sl
 80a357a:	4606      	mov	r6, r0
 80a357c:	460f      	mov	r7, r1
 80a357e:	465b      	mov	r3, fp
 80a3580:	4650      	mov	r0, sl
 80a3582:	4659      	mov	r1, fp
 80a3584:	f001 fa56 	bl	80a4a34 <__aeabi_dmul>
 80a3588:	4602      	mov	r2, r0
 80a358a:	460b      	mov	r3, r1
 80a358c:	4630      	mov	r0, r6
 80a358e:	4639      	mov	r1, r7
 80a3590:	f001 fa50 	bl	80a4a34 <__aeabi_dmul>
 80a3594:	4606      	mov	r6, r0
 80a3596:	460f      	mov	r7, r1
 80a3598:	2c00      	cmp	r4, #0
 80a359a:	f040 809b 	bne.w	80a36d4 <__ieee754_log+0x394>
 80a359e:	4602      	mov	r2, r0
 80a35a0:	460b      	mov	r3, r1
 80a35a2:	4650      	mov	r0, sl
 80a35a4:	4659      	mov	r1, fp
 80a35a6:	f001 f891 	bl	80a46cc <__aeabi_dsub>
 80a35aa:	e737      	b.n	80a341c <__ieee754_log+0xdc>
 80a35ac:	2c00      	cmp	r4, #0
 80a35ae:	f000 80a5 	beq.w	80a36fc <__ieee754_log+0x3bc>
 80a35b2:	a32f      	add	r3, pc, #188	; (adr r3, 80a3670 <__ieee754_log+0x330>)
 80a35b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a35b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a35bc:	f001 fa3a 	bl	80a4a34 <__aeabi_dmul>
 80a35c0:	4642      	mov	r2, r8
 80a35c2:	464b      	mov	r3, r9
 80a35c4:	4604      	mov	r4, r0
 80a35c6:	460d      	mov	r5, r1
 80a35c8:	4650      	mov	r0, sl
 80a35ca:	4659      	mov	r1, fp
 80a35cc:	f001 f87e 	bl	80a46cc <__aeabi_dsub>
 80a35d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a35d4:	f001 fa2e 	bl	80a4a34 <__aeabi_dmul>
 80a35d8:	a327      	add	r3, pc, #156	; (adr r3, 80a3678 <__ieee754_log+0x338>)
 80a35da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a35de:	4606      	mov	r6, r0
 80a35e0:	460f      	mov	r7, r1
 80a35e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a35e6:	f001 fa25 	bl	80a4a34 <__aeabi_dmul>
 80a35ea:	e021      	b.n	80a3630 <__ieee754_log+0x2f0>
 80a35ec:	a320      	add	r3, pc, #128	; (adr r3, 80a3670 <__ieee754_log+0x330>)
 80a35ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a35f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a35f6:	f001 fa1d 	bl	80a4a34 <__aeabi_dmul>
 80a35fa:	4632      	mov	r2, r6
 80a35fc:	463b      	mov	r3, r7
 80a35fe:	4604      	mov	r4, r0
 80a3600:	460d      	mov	r5, r1
 80a3602:	4640      	mov	r0, r8
 80a3604:	4649      	mov	r1, r9
 80a3606:	f001 f863 	bl	80a46d0 <__adddf3>
 80a360a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a360e:	f001 fa11 	bl	80a4a34 <__aeabi_dmul>
 80a3612:	a319      	add	r3, pc, #100	; (adr r3, 80a3678 <__ieee754_log+0x338>)
 80a3614:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3618:	4680      	mov	r8, r0
 80a361a:	4689      	mov	r9, r1
 80a361c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3620:	f001 fa08 	bl	80a4a34 <__aeabi_dmul>
 80a3624:	4602      	mov	r2, r0
 80a3626:	460b      	mov	r3, r1
 80a3628:	4640      	mov	r0, r8
 80a362a:	4649      	mov	r1, r9
 80a362c:	f001 f850 	bl	80a46d0 <__adddf3>
 80a3630:	4602      	mov	r2, r0
 80a3632:	460b      	mov	r3, r1
 80a3634:	4630      	mov	r0, r6
 80a3636:	4639      	mov	r1, r7
 80a3638:	f001 f848 	bl	80a46cc <__aeabi_dsub>
 80a363c:	4652      	mov	r2, sl
 80a363e:	465b      	mov	r3, fp
 80a3640:	f001 f844 	bl	80a46cc <__aeabi_dsub>
 80a3644:	4602      	mov	r2, r0
 80a3646:	460b      	mov	r3, r1
 80a3648:	4620      	mov	r0, r4
 80a364a:	4629      	mov	r1, r5
 80a364c:	f001 f83e 	bl	80a46cc <__aeabi_dsub>
 80a3650:	b005      	add	sp, #20
 80a3652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3656:	4602      	mov	r2, r0
 80a3658:	460b      	mov	r3, r1
 80a365a:	f001 f837 	bl	80a46cc <__aeabi_dsub>
 80a365e:	2200      	movs	r2, #0
 80a3660:	2300      	movs	r3, #0
 80a3662:	f001 fb11 	bl	80a4c88 <__aeabi_ddiv>
 80a3666:	e6d9      	b.n	80a341c <__ieee754_log+0xdc>
 80a3668:	2000      	movs	r0, #0
 80a366a:	2100      	movs	r1, #0
 80a366c:	e6d6      	b.n	80a341c <__ieee754_log+0xdc>
 80a366e:	bf00      	nop
 80a3670:	fee00000 	.word	0xfee00000
 80a3674:	3fe62e42 	.word	0x3fe62e42
 80a3678:	35793c76 	.word	0x35793c76
 80a367c:	3dea39ef 	.word	0x3dea39ef
 80a3680:	df3e5244 	.word	0xdf3e5244
 80a3684:	3fc2f112 	.word	0x3fc2f112
 80a3688:	96cb03de 	.word	0x96cb03de
 80a368c:	3fc74664 	.word	0x3fc74664
 80a3690:	94229359 	.word	0x94229359
 80a3694:	3fd24924 	.word	0x3fd24924
 80a3698:	55555593 	.word	0x55555593
 80a369c:	3fe55555 	.word	0x3fe55555
 80a36a0:	d078c69f 	.word	0xd078c69f
 80a36a4:	3fc39a09 	.word	0x3fc39a09
 80a36a8:	1d8e78af 	.word	0x1d8e78af
 80a36ac:	3fcc71c5 	.word	0x3fcc71c5
 80a36b0:	9997fa04 	.word	0x9997fa04
 80a36b4:	3fd99999 	.word	0x3fd99999
 80a36b8:	55555555 	.word	0x55555555
 80a36bc:	3fd55555 	.word	0x3fd55555
 80a36c0:	43500000 	.word	0x43500000
 80a36c4:	7fefffff 	.word	0x7fefffff
 80a36c8:	3ff00000 	.word	0x3ff00000
 80a36cc:	3fe00000 	.word	0x3fe00000
 80a36d0:	c3500000 	.word	0xc3500000
 80a36d4:	4620      	mov	r0, r4
 80a36d6:	f001 f947 	bl	80a4968 <__aeabi_i2d>
 80a36da:	a30f      	add	r3, pc, #60	; (adr r3, 80a3718 <__ieee754_log+0x3d8>)
 80a36dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a36e0:	4680      	mov	r8, r0
 80a36e2:	4689      	mov	r9, r1
 80a36e4:	f001 f9a6 	bl	80a4a34 <__aeabi_dmul>
 80a36e8:	a30d      	add	r3, pc, #52	; (adr r3, 80a3720 <__ieee754_log+0x3e0>)
 80a36ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a36ee:	4604      	mov	r4, r0
 80a36f0:	460d      	mov	r5, r1
 80a36f2:	4640      	mov	r0, r8
 80a36f4:	4649      	mov	r1, r9
 80a36f6:	f001 f99d 	bl	80a4a34 <__aeabi_dmul>
 80a36fa:	e799      	b.n	80a3630 <__ieee754_log+0x2f0>
 80a36fc:	4602      	mov	r2, r0
 80a36fe:	460b      	mov	r3, r1
 80a3700:	4650      	mov	r0, sl
 80a3702:	4659      	mov	r1, fp
 80a3704:	f000 ffe2 	bl	80a46cc <__aeabi_dsub>
 80a3708:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a370c:	f001 f992 	bl	80a4a34 <__aeabi_dmul>
 80a3710:	e713      	b.n	80a353a <__ieee754_log+0x1fa>
 80a3712:	bf00      	nop
 80a3714:	f3af 8000 	nop.w
 80a3718:	fee00000 	.word	0xfee00000
 80a371c:	3fe62e42 	.word	0x3fe62e42
 80a3720:	35793c76 	.word	0x35793c76
 80a3724:	3dea39ef 	.word	0x3dea39ef

080a3728 <__ieee754_log10>:
 80a3728:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a372c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a3730:	4604      	mov	r4, r0
 80a3732:	460d      	mov	r5, r1
 80a3734:	460b      	mov	r3, r1
 80a3736:	da1a      	bge.n	80a376e <__ieee754_log10+0x46>
 80a3738:	4602      	mov	r2, r0
 80a373a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a373e:	4332      	orrs	r2, r6
 80a3740:	d058      	beq.n	80a37f4 <__ieee754_log10+0xcc>
 80a3742:	2900      	cmp	r1, #0
 80a3744:	db5e      	blt.n	80a3804 <__ieee754_log10+0xdc>
 80a3746:	2200      	movs	r2, #0
 80a3748:	4b39      	ldr	r3, [pc, #228]	; (80a3830 <__ieee754_log10+0x108>)
 80a374a:	f001 f973 	bl	80a4a34 <__aeabi_dmul>
 80a374e:	460b      	mov	r3, r1
 80a3750:	460d      	mov	r5, r1
 80a3752:	4938      	ldr	r1, [pc, #224]	; (80a3834 <__ieee754_log10+0x10c>)
 80a3754:	4604      	mov	r4, r0
 80a3756:	428b      	cmp	r3, r1
 80a3758:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80a375c:	dd0b      	ble.n	80a3776 <__ieee754_log10+0x4e>
 80a375e:	4622      	mov	r2, r4
 80a3760:	462b      	mov	r3, r5
 80a3762:	4620      	mov	r0, r4
 80a3764:	4629      	mov	r1, r5
 80a3766:	f000 ffb3 	bl	80a46d0 <__adddf3>
 80a376a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a376e:	4931      	ldr	r1, [pc, #196]	; (80a3834 <__ieee754_log10+0x10c>)
 80a3770:	2200      	movs	r2, #0
 80a3772:	428b      	cmp	r3, r1
 80a3774:	dcf3      	bgt.n	80a375e <__ieee754_log10+0x36>
 80a3776:	1518      	asrs	r0, r3, #20
 80a3778:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80a377c:	4410      	add	r0, r2
 80a377e:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 80a3782:	4448      	add	r0, r9
 80a3784:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80a3788:	f001 f8ee 	bl	80a4968 <__aeabi_i2d>
 80a378c:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80a3790:	3303      	adds	r3, #3
 80a3792:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80a3796:	4606      	mov	r6, r0
 80a3798:	460f      	mov	r7, r1
 80a379a:	4620      	mov	r0, r4
 80a379c:	4629      	mov	r1, r5
 80a379e:	f7ff fdcf 	bl	80a3340 <__ieee754_log>
 80a37a2:	a31d      	add	r3, pc, #116	; (adr r3, 80a3818 <__ieee754_log10+0xf0>)
 80a37a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a37a8:	4680      	mov	r8, r0
 80a37aa:	4689      	mov	r9, r1
 80a37ac:	4630      	mov	r0, r6
 80a37ae:	4639      	mov	r1, r7
 80a37b0:	f001 f940 	bl	80a4a34 <__aeabi_dmul>
 80a37b4:	a31a      	add	r3, pc, #104	; (adr r3, 80a3820 <__ieee754_log10+0xf8>)
 80a37b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a37ba:	4604      	mov	r4, r0
 80a37bc:	460d      	mov	r5, r1
 80a37be:	4640      	mov	r0, r8
 80a37c0:	4649      	mov	r1, r9
 80a37c2:	f001 f937 	bl	80a4a34 <__aeabi_dmul>
 80a37c6:	4602      	mov	r2, r0
 80a37c8:	460b      	mov	r3, r1
 80a37ca:	4620      	mov	r0, r4
 80a37cc:	4629      	mov	r1, r5
 80a37ce:	f000 ff7f 	bl	80a46d0 <__adddf3>
 80a37d2:	a315      	add	r3, pc, #84	; (adr r3, 80a3828 <__ieee754_log10+0x100>)
 80a37d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a37d8:	4604      	mov	r4, r0
 80a37da:	460d      	mov	r5, r1
 80a37dc:	4630      	mov	r0, r6
 80a37de:	4639      	mov	r1, r7
 80a37e0:	f001 f928 	bl	80a4a34 <__aeabi_dmul>
 80a37e4:	4602      	mov	r2, r0
 80a37e6:	460b      	mov	r3, r1
 80a37e8:	4620      	mov	r0, r4
 80a37ea:	4629      	mov	r1, r5
 80a37ec:	f000 ff70 	bl	80a46d0 <__adddf3>
 80a37f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a37f4:	2200      	movs	r2, #0
 80a37f6:	2300      	movs	r3, #0
 80a37f8:	2000      	movs	r0, #0
 80a37fa:	490f      	ldr	r1, [pc, #60]	; (80a3838 <__ieee754_log10+0x110>)
 80a37fc:	f001 fa44 	bl	80a4c88 <__aeabi_ddiv>
 80a3800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3804:	4602      	mov	r2, r0
 80a3806:	460b      	mov	r3, r1
 80a3808:	f000 ff60 	bl	80a46cc <__aeabi_dsub>
 80a380c:	2200      	movs	r2, #0
 80a380e:	2300      	movs	r3, #0
 80a3810:	f001 fa3a 	bl	80a4c88 <__aeabi_ddiv>
 80a3814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3818:	11f12b36 	.word	0x11f12b36
 80a381c:	3d59fef3 	.word	0x3d59fef3
 80a3820:	1526e50e 	.word	0x1526e50e
 80a3824:	3fdbcb7b 	.word	0x3fdbcb7b
 80a3828:	509f6000 	.word	0x509f6000
 80a382c:	3fd34413 	.word	0x3fd34413
 80a3830:	43500000 	.word	0x43500000
 80a3834:	7fefffff 	.word	0x7fefffff
 80a3838:	c3500000 	.word	0xc3500000
 80a383c:	00000000 	.word	0x00000000

080a3840 <__ieee754_pow>:
 80a3840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3844:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 80a3848:	ea58 0902 	orrs.w	r9, r8, r2
 80a384c:	b093      	sub	sp, #76	; 0x4c
 80a384e:	d03c      	beq.n	80a38ca <__ieee754_pow+0x8a>
 80a3850:	4c71      	ldr	r4, [pc, #452]	; (80a3a18 <__ieee754_pow+0x1d8>)
 80a3852:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a3856:	42a6      	cmp	r6, r4
 80a3858:	4683      	mov	fp, r0
 80a385a:	460d      	mov	r5, r1
 80a385c:	dd0c      	ble.n	80a3878 <__ieee754_pow+0x38>
 80a385e:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 80a3862:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80a3866:	ea56 000b 	orrs.w	r0, r6, fp
 80a386a:	d138      	bne.n	80a38de <__ieee754_pow+0x9e>
 80a386c:	4683      	mov	fp, r0
 80a386e:	496b      	ldr	r1, [pc, #428]	; (80a3a1c <__ieee754_pow+0x1dc>)
 80a3870:	4658      	mov	r0, fp
 80a3872:	b013      	add	sp, #76	; 0x4c
 80a3874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3878:	469a      	mov	sl, r3
 80a387a:	4696      	mov	lr, r2
 80a387c:	d02b      	beq.n	80a38d6 <__ieee754_pow+0x96>
 80a387e:	45a0      	cmp	r8, r4
 80a3880:	dced      	bgt.n	80a385e <__ieee754_pow+0x1e>
 80a3882:	4c65      	ldr	r4, [pc, #404]	; (80a3a18 <__ieee754_pow+0x1d8>)
 80a3884:	45a0      	cmp	r8, r4
 80a3886:	d078      	beq.n	80a397a <__ieee754_pow+0x13a>
 80a3888:	2d00      	cmp	r5, #0
 80a388a:	460f      	mov	r7, r1
 80a388c:	4681      	mov	r9, r0
 80a388e:	e9cd 2300 	strd	r2, r3, [sp]
 80a3892:	db76      	blt.n	80a3982 <__ieee754_pow+0x142>
 80a3894:	2400      	movs	r4, #0
 80a3896:	f1be 0f00 	cmp.w	lr, #0
 80a389a:	d127      	bne.n	80a38ec <__ieee754_pow+0xac>
 80a389c:	4b5e      	ldr	r3, [pc, #376]	; (80a3a18 <__ieee754_pow+0x1d8>)
 80a389e:	4598      	cmp	r8, r3
 80a38a0:	f000 808b 	beq.w	80a39ba <__ieee754_pow+0x17a>
 80a38a4:	4b5d      	ldr	r3, [pc, #372]	; (80a3a1c <__ieee754_pow+0x1dc>)
 80a38a6:	4598      	cmp	r8, r3
 80a38a8:	d052      	beq.n	80a3950 <__ieee754_pow+0x110>
 80a38aa:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
 80a38ae:	f000 83c9 	beq.w	80a4044 <__ieee754_pow+0x804>
 80a38b2:	4b5b      	ldr	r3, [pc, #364]	; (80a3a20 <__ieee754_pow+0x1e0>)
 80a38b4:	459a      	cmp	sl, r3
 80a38b6:	d119      	bne.n	80a38ec <__ieee754_pow+0xac>
 80a38b8:	2d00      	cmp	r5, #0
 80a38ba:	db17      	blt.n	80a38ec <__ieee754_pow+0xac>
 80a38bc:	4648      	mov	r0, r9
 80a38be:	4639      	mov	r1, r7
 80a38c0:	b013      	add	sp, #76	; 0x4c
 80a38c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a38c6:	f000 bd1d 	b.w	80a4304 <__ieee754_sqrt>
 80a38ca:	46cb      	mov	fp, r9
 80a38cc:	4658      	mov	r0, fp
 80a38ce:	4953      	ldr	r1, [pc, #332]	; (80a3a1c <__ieee754_pow+0x1dc>)
 80a38d0:	b013      	add	sp, #76	; 0x4c
 80a38d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a38d6:	2800      	cmp	r0, #0
 80a38d8:	d1c1      	bne.n	80a385e <__ieee754_pow+0x1e>
 80a38da:	45b0      	cmp	r8, r6
 80a38dc:	ddd1      	ble.n	80a3882 <__ieee754_pow+0x42>
 80a38de:	4851      	ldr	r0, [pc, #324]	; (80a3a24 <__ieee754_pow+0x1e4>)
 80a38e0:	b013      	add	sp, #76	; 0x4c
 80a38e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a38e6:	f000 bddd 	b.w	80a44a4 <nan>
 80a38ea:	2400      	movs	r4, #0
 80a38ec:	4648      	mov	r0, r9
 80a38ee:	4639      	mov	r1, r7
 80a38f0:	f000 fdcc 	bl	80a448c <fabs>
 80a38f4:	f1bb 0f00 	cmp.w	fp, #0
 80a38f8:	d01c      	beq.n	80a3934 <__ieee754_pow+0xf4>
 80a38fa:	0fed      	lsrs	r5, r5, #31
 80a38fc:	3d01      	subs	r5, #1
 80a38fe:	ea54 0305 	orrs.w	r3, r4, r5
 80a3902:	d070      	beq.n	80a39e6 <__ieee754_pow+0x1a6>
 80a3904:	4b48      	ldr	r3, [pc, #288]	; (80a3a28 <__ieee754_pow+0x1e8>)
 80a3906:	4598      	cmp	r8, r3
 80a3908:	f340 8094 	ble.w	80a3a34 <__ieee754_pow+0x1f4>
 80a390c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80a3910:	4598      	cmp	r8, r3
 80a3912:	f340 840d 	ble.w	80a4130 <__ieee754_pow+0x8f0>
 80a3916:	4b45      	ldr	r3, [pc, #276]	; (80a3a2c <__ieee754_pow+0x1ec>)
 80a3918:	429e      	cmp	r6, r3
 80a391a:	dd70      	ble.n	80a39fe <__ieee754_pow+0x1be>
 80a391c:	f1ba 0f00 	cmp.w	sl, #0
 80a3920:	dd70      	ble.n	80a3a04 <__ieee754_pow+0x1c4>
 80a3922:	a33b      	add	r3, pc, #236	; (adr r3, 80a3a10 <__ieee754_pow+0x1d0>)
 80a3924:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3928:	4610      	mov	r0, r2
 80a392a:	4619      	mov	r1, r3
 80a392c:	f001 f882 	bl	80a4a34 <__aeabi_dmul>
 80a3930:	4683      	mov	fp, r0
 80a3932:	e79d      	b.n	80a3870 <__ieee754_pow+0x30>
 80a3934:	b126      	cbz	r6, 80a3940 <__ieee754_pow+0x100>
 80a3936:	4b39      	ldr	r3, [pc, #228]	; (80a3a1c <__ieee754_pow+0x1dc>)
 80a3938:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80a393c:	429a      	cmp	r2, r3
 80a393e:	d1dc      	bne.n	80a38fa <__ieee754_pow+0xba>
 80a3940:	f1ba 0f00 	cmp.w	sl, #0
 80a3944:	f2c0 83b7 	blt.w	80a40b6 <__ieee754_pow+0x876>
 80a3948:	2d00      	cmp	r5, #0
 80a394a:	db08      	blt.n	80a395e <__ieee754_pow+0x11e>
 80a394c:	4683      	mov	fp, r0
 80a394e:	e78f      	b.n	80a3870 <__ieee754_pow+0x30>
 80a3950:	f1ba 0f00 	cmp.w	sl, #0
 80a3954:	f2c0 845e 	blt.w	80a4214 <__ieee754_pow+0x9d4>
 80a3958:	46cb      	mov	fp, r9
 80a395a:	4639      	mov	r1, r7
 80a395c:	e788      	b.n	80a3870 <__ieee754_pow+0x30>
 80a395e:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 80a3962:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80a3966:	ea56 0304 	orrs.w	r3, r6, r4
 80a396a:	f000 8483 	beq.w	80a4274 <__ieee754_pow+0xa34>
 80a396e:	2c01      	cmp	r4, #1
 80a3970:	d1ec      	bne.n	80a394c <__ieee754_pow+0x10c>
 80a3972:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a3976:	4683      	mov	fp, r0
 80a3978:	e77a      	b.n	80a3870 <__ieee754_pow+0x30>
 80a397a:	f1be 0f00 	cmp.w	lr, #0
 80a397e:	d083      	beq.n	80a3888 <__ieee754_pow+0x48>
 80a3980:	e76d      	b.n	80a385e <__ieee754_pow+0x1e>
 80a3982:	4b2b      	ldr	r3, [pc, #172]	; (80a3a30 <__ieee754_pow+0x1f0>)
 80a3984:	4598      	cmp	r8, r3
 80a3986:	dc2c      	bgt.n	80a39e2 <__ieee754_pow+0x1a2>
 80a3988:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80a398c:	4598      	cmp	r8, r3
 80a398e:	dd81      	ble.n	80a3894 <__ieee754_pow+0x54>
 80a3990:	ea4f 5328 	mov.w	r3, r8, asr #20
 80a3994:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a3998:	2b14      	cmp	r3, #20
 80a399a:	f340 8453 	ble.w	80a4244 <__ieee754_pow+0xa04>
 80a399e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80a39a2:	fa2e f203 	lsr.w	r2, lr, r3
 80a39a6:	fa02 f303 	lsl.w	r3, r2, r3
 80a39aa:	459e      	cmp	lr, r3
 80a39ac:	f47f af72 	bne.w	80a3894 <__ieee754_pow+0x54>
 80a39b0:	f002 0201 	and.w	r2, r2, #1
 80a39b4:	f1c2 0402 	rsb	r4, r2, #2
 80a39b8:	e76d      	b.n	80a3896 <__ieee754_pow+0x56>
 80a39ba:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
 80a39be:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80a39c2:	ea53 030b 	orrs.w	r3, r3, fp
 80a39c6:	f000 833a 	beq.w	80a403e <__ieee754_pow+0x7fe>
 80a39ca:	4b18      	ldr	r3, [pc, #96]	; (80a3a2c <__ieee754_pow+0x1ec>)
 80a39cc:	429e      	cmp	r6, r3
 80a39ce:	f340 8367 	ble.w	80a40a0 <__ieee754_pow+0x860>
 80a39d2:	f1ba 0f00 	cmp.w	sl, #0
 80a39d6:	db15      	blt.n	80a3a04 <__ieee754_pow+0x1c4>
 80a39d8:	e9dd 3400 	ldrd	r3, r4, [sp]
 80a39dc:	469b      	mov	fp, r3
 80a39de:	4621      	mov	r1, r4
 80a39e0:	e746      	b.n	80a3870 <__ieee754_pow+0x30>
 80a39e2:	2402      	movs	r4, #2
 80a39e4:	e757      	b.n	80a3896 <__ieee754_pow+0x56>
 80a39e6:	464a      	mov	r2, r9
 80a39e8:	4648      	mov	r0, r9
 80a39ea:	463b      	mov	r3, r7
 80a39ec:	4639      	mov	r1, r7
 80a39ee:	f000 fe6d 	bl	80a46cc <__aeabi_dsub>
 80a39f2:	4602      	mov	r2, r0
 80a39f4:	460b      	mov	r3, r1
 80a39f6:	f001 f947 	bl	80a4c88 <__aeabi_ddiv>
 80a39fa:	4683      	mov	fp, r0
 80a39fc:	e738      	b.n	80a3870 <__ieee754_pow+0x30>
 80a39fe:	f1ba 0f00 	cmp.w	sl, #0
 80a3a02:	db8e      	blt.n	80a3922 <__ieee754_pow+0xe2>
 80a3a04:	f04f 0b00 	mov.w	fp, #0
 80a3a08:	4659      	mov	r1, fp
 80a3a0a:	e731      	b.n	80a3870 <__ieee754_pow+0x30>
 80a3a0c:	f3af 8000 	nop.w
 80a3a10:	8800759c 	.word	0x8800759c
 80a3a14:	7e37e43c 	.word	0x7e37e43c
 80a3a18:	7ff00000 	.word	0x7ff00000
 80a3a1c:	3ff00000 	.word	0x3ff00000
 80a3a20:	3fe00000 	.word	0x3fe00000
 80a3a24:	080a6578 	.word	0x080a6578
 80a3a28:	41e00000 	.word	0x41e00000
 80a3a2c:	3fefffff 	.word	0x3fefffff
 80a3a30:	433fffff 	.word	0x433fffff
 80a3a34:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
 80a3a38:	f04f 0200 	mov.w	r2, #0
 80a3a3c:	da05      	bge.n	80a3a4a <__ieee754_pow+0x20a>
 80a3a3e:	4bd0      	ldr	r3, [pc, #832]	; (80a3d80 <__ieee754_pow+0x540>)
 80a3a40:	f000 fff8 	bl	80a4a34 <__aeabi_dmul>
 80a3a44:	460e      	mov	r6, r1
 80a3a46:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80a3a4a:	f8df e344 	ldr.w	lr, [pc, #836]	; 80a3d90 <__ieee754_pow+0x550>
 80a3a4e:	1533      	asrs	r3, r6, #20
 80a3a50:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80a3a54:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a3a58:	f046 577f 	orr.w	r7, r6, #1069547520	; 0x3fc00000
 80a3a5c:	4576      	cmp	r6, lr
 80a3a5e:	eb03 0a02 	add.w	sl, r3, r2
 80a3a62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80a3a66:	f340 83c9 	ble.w	80a41fc <__ieee754_pow+0x9bc>
 80a3a6a:	4bc6      	ldr	r3, [pc, #792]	; (80a3d84 <__ieee754_pow+0x544>)
 80a3a6c:	2200      	movs	r2, #0
 80a3a6e:	429e      	cmp	r6, r3
 80a3a70:	f340 8404 	ble.w	80a427c <__ieee754_pow+0xa3c>
 80a3a74:	2300      	movs	r3, #0
 80a3a76:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a3a7a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a3a7e:	4bc2      	ldr	r3, [pc, #776]	; (80a3d88 <__ieee754_pow+0x548>)
 80a3a80:	2200      	movs	r2, #0
 80a3a82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a3a86:	f10a 0a01 	add.w	sl, sl, #1
 80a3a8a:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80a3a8e:	2600      	movs	r6, #0
 80a3a90:	4639      	mov	r1, r7
 80a3a92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a3a96:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a3a9a:	f000 fe17 	bl	80a46cc <__aeabi_dsub>
 80a3a9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a3aa2:	4680      	mov	r8, r0
 80a3aa4:	4689      	mov	r9, r1
 80a3aa6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a3aaa:	f000 fe11 	bl	80a46d0 <__adddf3>
 80a3aae:	4602      	mov	r2, r0
 80a3ab0:	460b      	mov	r3, r1
 80a3ab2:	2000      	movs	r0, #0
 80a3ab4:	49b4      	ldr	r1, [pc, #720]	; (80a3d88 <__ieee754_pow+0x548>)
 80a3ab6:	f001 f8e7 	bl	80a4c88 <__aeabi_ddiv>
 80a3aba:	460a      	mov	r2, r1
 80a3abc:	4601      	mov	r1, r0
 80a3abe:	4613      	mov	r3, r2
 80a3ac0:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 80a3ac4:	4602      	mov	r2, r0
 80a3ac6:	4649      	mov	r1, r9
 80a3ac8:	4640      	mov	r0, r8
 80a3aca:	f000 ffb3 	bl	80a4a34 <__aeabi_dmul>
 80a3ace:	468c      	mov	ip, r1
 80a3ad0:	4683      	mov	fp, r0
 80a3ad2:	107b      	asrs	r3, r7, #1
 80a3ad4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80a3ad8:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80a3adc:	1999      	adds	r1, r3, r6
 80a3ade:	2000      	movs	r0, #0
 80a3ae0:	e9cd bc04 	strd	fp, ip, [sp, #16]
 80a3ae4:	4606      	mov	r6, r0
 80a3ae6:	460f      	mov	r7, r1
 80a3ae8:	f04f 0b00 	mov.w	fp, #0
 80a3aec:	4661      	mov	r1, ip
 80a3aee:	4658      	mov	r0, fp
 80a3af0:	4632      	mov	r2, r6
 80a3af2:	463b      	mov	r3, r7
 80a3af4:	e9cd bc10 	strd	fp, ip, [sp, #64]	; 0x40
 80a3af8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a3afc:	f000 ff9a 	bl	80a4a34 <__aeabi_dmul>
 80a3b00:	4602      	mov	r2, r0
 80a3b02:	460b      	mov	r3, r1
 80a3b04:	4640      	mov	r0, r8
 80a3b06:	4649      	mov	r1, r9
 80a3b08:	f000 fde0 	bl	80a46cc <__aeabi_dsub>
 80a3b0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a3b10:	4680      	mov	r8, r0
 80a3b12:	4689      	mov	r9, r1
 80a3b14:	4630      	mov	r0, r6
 80a3b16:	4639      	mov	r1, r7
 80a3b18:	f000 fdd8 	bl	80a46cc <__aeabi_dsub>
 80a3b1c:	4602      	mov	r2, r0
 80a3b1e:	460b      	mov	r3, r1
 80a3b20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a3b24:	f000 fdd2 	bl	80a46cc <__aeabi_dsub>
 80a3b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3b2c:	f000 ff82 	bl	80a4a34 <__aeabi_dmul>
 80a3b30:	4602      	mov	r2, r0
 80a3b32:	460b      	mov	r3, r1
 80a3b34:	4640      	mov	r0, r8
 80a3b36:	4649      	mov	r1, r9
 80a3b38:	f000 fdc8 	bl	80a46cc <__aeabi_dsub>
 80a3b3c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80a3b40:	f000 ff78 	bl	80a4a34 <__aeabi_dmul>
 80a3b44:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
 80a3b48:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a3b4c:	463a      	mov	r2, r7
 80a3b4e:	4643      	mov	r3, r8
 80a3b50:	4638      	mov	r0, r7
 80a3b52:	4641      	mov	r1, r8
 80a3b54:	f000 ff6e 	bl	80a4a34 <__aeabi_dmul>
 80a3b58:	a377      	add	r3, pc, #476	; (adr r3, 80a3d38 <__ieee754_pow+0x4f8>)
 80a3b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3b5e:	4606      	mov	r6, r0
 80a3b60:	460f      	mov	r7, r1
 80a3b62:	f000 ff67 	bl	80a4a34 <__aeabi_dmul>
 80a3b66:	a376      	add	r3, pc, #472	; (adr r3, 80a3d40 <__ieee754_pow+0x500>)
 80a3b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3b6c:	f000 fdb0 	bl	80a46d0 <__adddf3>
 80a3b70:	4632      	mov	r2, r6
 80a3b72:	463b      	mov	r3, r7
 80a3b74:	f000 ff5e 	bl	80a4a34 <__aeabi_dmul>
 80a3b78:	a373      	add	r3, pc, #460	; (adr r3, 80a3d48 <__ieee754_pow+0x508>)
 80a3b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3b7e:	f000 fda7 	bl	80a46d0 <__adddf3>
 80a3b82:	4632      	mov	r2, r6
 80a3b84:	463b      	mov	r3, r7
 80a3b86:	f000 ff55 	bl	80a4a34 <__aeabi_dmul>
 80a3b8a:	a371      	add	r3, pc, #452	; (adr r3, 80a3d50 <__ieee754_pow+0x510>)
 80a3b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3b90:	f000 fd9e 	bl	80a46d0 <__adddf3>
 80a3b94:	4632      	mov	r2, r6
 80a3b96:	463b      	mov	r3, r7
 80a3b98:	f000 ff4c 	bl	80a4a34 <__aeabi_dmul>
 80a3b9c:	a36e      	add	r3, pc, #440	; (adr r3, 80a3d58 <__ieee754_pow+0x518>)
 80a3b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3ba2:	f000 fd95 	bl	80a46d0 <__adddf3>
 80a3ba6:	4632      	mov	r2, r6
 80a3ba8:	463b      	mov	r3, r7
 80a3baa:	f000 ff43 	bl	80a4a34 <__aeabi_dmul>
 80a3bae:	a36c      	add	r3, pc, #432	; (adr r3, 80a3d60 <__ieee754_pow+0x520>)
 80a3bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3bb4:	f000 fd8c 	bl	80a46d0 <__adddf3>
 80a3bb8:	4632      	mov	r2, r6
 80a3bba:	4680      	mov	r8, r0
 80a3bbc:	4689      	mov	r9, r1
 80a3bbe:	463b      	mov	r3, r7
 80a3bc0:	4630      	mov	r0, r6
 80a3bc2:	4639      	mov	r1, r7
 80a3bc4:	f000 ff36 	bl	80a4a34 <__aeabi_dmul>
 80a3bc8:	4602      	mov	r2, r0
 80a3bca:	460b      	mov	r3, r1
 80a3bcc:	4640      	mov	r0, r8
 80a3bce:	4649      	mov	r1, r9
 80a3bd0:	f000 ff30 	bl	80a4a34 <__aeabi_dmul>
 80a3bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3bd8:	4606      	mov	r6, r0
 80a3bda:	460f      	mov	r7, r1
 80a3bdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a3be0:	f000 fd76 	bl	80a46d0 <__adddf3>
 80a3be4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a3be8:	f000 ff24 	bl	80a4a34 <__aeabi_dmul>
 80a3bec:	4632      	mov	r2, r6
 80a3bee:	463b      	mov	r3, r7
 80a3bf0:	f000 fd6e 	bl	80a46d0 <__adddf3>
 80a3bf4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80a3bf8:	4680      	mov	r8, r0
 80a3bfa:	4689      	mov	r9, r1
 80a3bfc:	4632      	mov	r2, r6
 80a3bfe:	463b      	mov	r3, r7
 80a3c00:	4630      	mov	r0, r6
 80a3c02:	4639      	mov	r1, r7
 80a3c04:	f000 ff16 	bl	80a4a34 <__aeabi_dmul>
 80a3c08:	2200      	movs	r2, #0
 80a3c0a:	4b60      	ldr	r3, [pc, #384]	; (80a3d8c <__ieee754_pow+0x54c>)
 80a3c0c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a3c10:	f000 fd5e 	bl	80a46d0 <__adddf3>
 80a3c14:	4642      	mov	r2, r8
 80a3c16:	464b      	mov	r3, r9
 80a3c18:	f000 fd5a 	bl	80a46d0 <__adddf3>
 80a3c1c:	e9dd bc10 	ldrd	fp, ip, [sp, #64]	; 0x40
 80a3c20:	460f      	mov	r7, r1
 80a3c22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3c26:	465a      	mov	r2, fp
 80a3c28:	463b      	mov	r3, r7
 80a3c2a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	; 0x38
 80a3c2e:	465e      	mov	r6, fp
 80a3c30:	f000 ff00 	bl	80a4a34 <__aeabi_dmul>
 80a3c34:	2200      	movs	r2, #0
 80a3c36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a3c3a:	4b54      	ldr	r3, [pc, #336]	; (80a3d8c <__ieee754_pow+0x54c>)
 80a3c3c:	4630      	mov	r0, r6
 80a3c3e:	4639      	mov	r1, r7
 80a3c40:	f000 fd44 	bl	80a46cc <__aeabi_dsub>
 80a3c44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a3c48:	f000 fd40 	bl	80a46cc <__aeabi_dsub>
 80a3c4c:	4602      	mov	r2, r0
 80a3c4e:	460b      	mov	r3, r1
 80a3c50:	4640      	mov	r0, r8
 80a3c52:	4649      	mov	r1, r9
 80a3c54:	f000 fd3a 	bl	80a46cc <__aeabi_dsub>
 80a3c58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a3c5c:	f000 feea 	bl	80a4a34 <__aeabi_dmul>
 80a3c60:	4632      	mov	r2, r6
 80a3c62:	4680      	mov	r8, r0
 80a3c64:	4689      	mov	r9, r1
 80a3c66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a3c6a:	463b      	mov	r3, r7
 80a3c6c:	f000 fee2 	bl	80a4a34 <__aeabi_dmul>
 80a3c70:	4602      	mov	r2, r0
 80a3c72:	460b      	mov	r3, r1
 80a3c74:	4640      	mov	r0, r8
 80a3c76:	4649      	mov	r1, r9
 80a3c78:	f000 fd2a 	bl	80a46d0 <__adddf3>
 80a3c7c:	4680      	mov	r8, r0
 80a3c7e:	4689      	mov	r9, r1
 80a3c80:	4602      	mov	r2, r0
 80a3c82:	460b      	mov	r3, r1
 80a3c84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3c88:	f000 fd22 	bl	80a46d0 <__adddf3>
 80a3c8c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	; 0x38
 80a3c90:	a335      	add	r3, pc, #212	; (adr r3, 80a3d68 <__ieee754_pow+0x528>)
 80a3c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c96:	4658      	mov	r0, fp
 80a3c98:	e9cd bc06 	strd	fp, ip, [sp, #24]
 80a3c9c:	465e      	mov	r6, fp
 80a3c9e:	460f      	mov	r7, r1
 80a3ca0:	f000 fec8 	bl	80a4a34 <__aeabi_dmul>
 80a3ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3ca8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a3cac:	4630      	mov	r0, r6
 80a3cae:	4639      	mov	r1, r7
 80a3cb0:	f000 fd0c 	bl	80a46cc <__aeabi_dsub>
 80a3cb4:	4602      	mov	r2, r0
 80a3cb6:	460b      	mov	r3, r1
 80a3cb8:	4640      	mov	r0, r8
 80a3cba:	4649      	mov	r1, r9
 80a3cbc:	f000 fd06 	bl	80a46cc <__aeabi_dsub>
 80a3cc0:	a32b      	add	r3, pc, #172	; (adr r3, 80a3d70 <__ieee754_pow+0x530>)
 80a3cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3cc6:	f000 feb5 	bl	80a4a34 <__aeabi_dmul>
 80a3cca:	a32b      	add	r3, pc, #172	; (adr r3, 80a3d78 <__ieee754_pow+0x538>)
 80a3ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3cd0:	4680      	mov	r8, r0
 80a3cd2:	4689      	mov	r9, r1
 80a3cd4:	4630      	mov	r0, r6
 80a3cd6:	4639      	mov	r1, r7
 80a3cd8:	f000 feac 	bl	80a4a34 <__aeabi_dmul>
 80a3cdc:	4602      	mov	r2, r0
 80a3cde:	460b      	mov	r3, r1
 80a3ce0:	4640      	mov	r0, r8
 80a3ce2:	4649      	mov	r1, r9
 80a3ce4:	f000 fcf4 	bl	80a46d0 <__adddf3>
 80a3ce8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80a3cec:	f000 fcf0 	bl	80a46d0 <__adddf3>
 80a3cf0:	4680      	mov	r8, r0
 80a3cf2:	4650      	mov	r0, sl
 80a3cf4:	4689      	mov	r9, r1
 80a3cf6:	f000 fe37 	bl	80a4968 <__aeabi_i2d>
 80a3cfa:	4606      	mov	r6, r0
 80a3cfc:	460f      	mov	r7, r1
 80a3cfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a3d02:	4642      	mov	r2, r8
 80a3d04:	464b      	mov	r3, r9
 80a3d06:	f000 fce3 	bl	80a46d0 <__adddf3>
 80a3d0a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a3d0e:	f000 fcdf 	bl	80a46d0 <__adddf3>
 80a3d12:	4632      	mov	r2, r6
 80a3d14:	463b      	mov	r3, r7
 80a3d16:	f000 fcdb 	bl	80a46d0 <__adddf3>
 80a3d1a:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 80a3d1e:	4632      	mov	r2, r6
 80a3d20:	4658      	mov	r0, fp
 80a3d22:	463b      	mov	r3, r7
 80a3d24:	46da      	mov	sl, fp
 80a3d26:	468b      	mov	fp, r1
 80a3d28:	f000 fcd0 	bl	80a46cc <__aeabi_dsub>
 80a3d2c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a3d30:	e030      	b.n	80a3d94 <__ieee754_pow+0x554>
 80a3d32:	bf00      	nop
 80a3d34:	f3af 8000 	nop.w
 80a3d38:	4a454eef 	.word	0x4a454eef
 80a3d3c:	3fca7e28 	.word	0x3fca7e28
 80a3d40:	93c9db65 	.word	0x93c9db65
 80a3d44:	3fcd864a 	.word	0x3fcd864a
 80a3d48:	a91d4101 	.word	0xa91d4101
 80a3d4c:	3fd17460 	.word	0x3fd17460
 80a3d50:	518f264d 	.word	0x518f264d
 80a3d54:	3fd55555 	.word	0x3fd55555
 80a3d58:	db6fabff 	.word	0xdb6fabff
 80a3d5c:	3fdb6db6 	.word	0x3fdb6db6
 80a3d60:	33333303 	.word	0x33333303
 80a3d64:	3fe33333 	.word	0x3fe33333
 80a3d68:	e0000000 	.word	0xe0000000
 80a3d6c:	3feec709 	.word	0x3feec709
 80a3d70:	dc3a03fd 	.word	0xdc3a03fd
 80a3d74:	3feec709 	.word	0x3feec709
 80a3d78:	145b01f5 	.word	0x145b01f5
 80a3d7c:	be3e2fe0 	.word	0xbe3e2fe0
 80a3d80:	43400000 	.word	0x43400000
 80a3d84:	000bb679 	.word	0x000bb679
 80a3d88:	3ff00000 	.word	0x3ff00000
 80a3d8c:	40080000 	.word	0x40080000
 80a3d90:	0003988e 	.word	0x0003988e
 80a3d94:	f000 fc9a 	bl	80a46cc <__aeabi_dsub>
 80a3d98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a3d9c:	f000 fc96 	bl	80a46cc <__aeabi_dsub>
 80a3da0:	4602      	mov	r2, r0
 80a3da2:	460b      	mov	r3, r1
 80a3da4:	4640      	mov	r0, r8
 80a3da6:	4649      	mov	r1, r9
 80a3da8:	f000 fc90 	bl	80a46cc <__aeabi_dsub>
 80a3dac:	4680      	mov	r8, r0
 80a3dae:	4689      	mov	r9, r1
 80a3db0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80a3db4:	3c01      	subs	r4, #1
 80a3db6:	ea54 0305 	orrs.w	r3, r4, r5
 80a3dba:	bf14      	ite	ne
 80a3dbc:	4cd6      	ldrne	r4, [pc, #856]	; (80a4118 <__ieee754_pow+0x8d8>)
 80a3dbe:	4cd7      	ldreq	r4, [pc, #860]	; (80a411c <__ieee754_pow+0x8dc>)
 80a3dc0:	2300      	movs	r3, #0
 80a3dc2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80a3dc6:	460b      	mov	r3, r1
 80a3dc8:	4614      	mov	r4, r2
 80a3dca:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a3dce:	2300      	movs	r3, #0
 80a3dd0:	9302      	str	r3, [sp, #8]
 80a3dd2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80a3dd6:	4608      	mov	r0, r1
 80a3dd8:	462b      	mov	r3, r5
 80a3dda:	4611      	mov	r1, r2
 80a3ddc:	4622      	mov	r2, r4
 80a3dde:	f000 fc75 	bl	80a46cc <__aeabi_dsub>
 80a3de2:	4652      	mov	r2, sl
 80a3de4:	465b      	mov	r3, fp
 80a3de6:	f000 fe25 	bl	80a4a34 <__aeabi_dmul>
 80a3dea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a3dee:	4606      	mov	r6, r0
 80a3df0:	460f      	mov	r7, r1
 80a3df2:	4640      	mov	r0, r8
 80a3df4:	4649      	mov	r1, r9
 80a3df6:	f000 fe1d 	bl	80a4a34 <__aeabi_dmul>
 80a3dfa:	4602      	mov	r2, r0
 80a3dfc:	460b      	mov	r3, r1
 80a3dfe:	4630      	mov	r0, r6
 80a3e00:	4639      	mov	r1, r7
 80a3e02:	f000 fc65 	bl	80a46d0 <__adddf3>
 80a3e06:	4606      	mov	r6, r0
 80a3e08:	460f      	mov	r7, r1
 80a3e0a:	4622      	mov	r2, r4
 80a3e0c:	462b      	mov	r3, r5
 80a3e0e:	4650      	mov	r0, sl
 80a3e10:	4659      	mov	r1, fp
 80a3e12:	e9cd 6700 	strd	r6, r7, [sp]
 80a3e16:	f000 fe0d 	bl	80a4a34 <__aeabi_dmul>
 80a3e1a:	460b      	mov	r3, r1
 80a3e1c:	4602      	mov	r2, r0
 80a3e1e:	4680      	mov	r8, r0
 80a3e20:	4689      	mov	r9, r1
 80a3e22:	4630      	mov	r0, r6
 80a3e24:	4639      	mov	r1, r7
 80a3e26:	f000 fc53 	bl	80a46d0 <__adddf3>
 80a3e2a:	4bbd      	ldr	r3, [pc, #756]	; (80a4120 <__ieee754_pow+0x8e0>)
 80a3e2c:	4606      	mov	r6, r0
 80a3e2e:	4299      	cmp	r1, r3
 80a3e30:	460d      	mov	r5, r1
 80a3e32:	460c      	mov	r4, r1
 80a3e34:	f340 810e 	ble.w	80a4054 <__ieee754_pow+0x814>
 80a3e38:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80a3e3c:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80a3e40:	4303      	orrs	r3, r0
 80a3e42:	f040 81f0 	bne.w	80a4226 <__ieee754_pow+0x9e6>
 80a3e46:	a3a0      	add	r3, pc, #640	; (adr r3, 80a40c8 <__ieee754_pow+0x888>)
 80a3e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3e4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3e50:	f000 fc3e 	bl	80a46d0 <__adddf3>
 80a3e54:	4642      	mov	r2, r8
 80a3e56:	4682      	mov	sl, r0
 80a3e58:	468b      	mov	fp, r1
 80a3e5a:	464b      	mov	r3, r9
 80a3e5c:	4630      	mov	r0, r6
 80a3e5e:	4629      	mov	r1, r5
 80a3e60:	f000 fc34 	bl	80a46cc <__aeabi_dsub>
 80a3e64:	4602      	mov	r2, r0
 80a3e66:	460b      	mov	r3, r1
 80a3e68:	4650      	mov	r0, sl
 80a3e6a:	4659      	mov	r1, fp
 80a3e6c:	f001 f872 	bl	80a4f54 <__aeabi_dcmpgt>
 80a3e70:	2800      	cmp	r0, #0
 80a3e72:	f040 81d8 	bne.w	80a4226 <__ieee754_pow+0x9e6>
 80a3e76:	462f      	mov	r7, r5
 80a3e78:	153b      	asrs	r3, r7, #20
 80a3e7a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80a3e7e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80a3e82:	fa42 f303 	asr.w	r3, r2, r3
 80a3e86:	4423      	add	r3, r4
 80a3e88:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80a3e8c:	4ea5      	ldr	r6, [pc, #660]	; (80a4124 <__ieee754_pow+0x8e4>)
 80a3e8e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80a3e92:	4116      	asrs	r6, r2
 80a3e94:	f3c3 0b13 	ubfx	fp, r3, #0, #20
 80a3e98:	2000      	movs	r0, #0
 80a3e9a:	f1c2 0514 	rsb	r5, r2, #20
 80a3e9e:	ea23 0106 	bic.w	r1, r3, r6
 80a3ea2:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
 80a3ea6:	4602      	mov	r2, r0
 80a3ea8:	460b      	mov	r3, r1
 80a3eaa:	2c00      	cmp	r4, #0
 80a3eac:	fa4b fb05 	asr.w	fp, fp, r5
 80a3eb0:	4640      	mov	r0, r8
 80a3eb2:	4649      	mov	r1, r9
 80a3eb4:	bfb8      	it	lt
 80a3eb6:	f1cb 0b00 	rsblt	fp, fp, #0
 80a3eba:	f000 fc07 	bl	80a46cc <__aeabi_dsub>
 80a3ebe:	4602      	mov	r2, r0
 80a3ec0:	460b      	mov	r3, r1
 80a3ec2:	4680      	mov	r8, r0
 80a3ec4:	4689      	mov	r9, r1
 80a3ec6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3eca:	f000 fc01 	bl	80a46d0 <__adddf3>
 80a3ece:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
 80a3ed2:	2400      	movs	r4, #0
 80a3ed4:	a37e      	add	r3, pc, #504	; (adr r3, 80a40d0 <__ieee754_pow+0x890>)
 80a3ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3eda:	4620      	mov	r0, r4
 80a3edc:	460d      	mov	r5, r1
 80a3ede:	f000 fda9 	bl	80a4a34 <__aeabi_dmul>
 80a3ee2:	4642      	mov	r2, r8
 80a3ee4:	4606      	mov	r6, r0
 80a3ee6:	460f      	mov	r7, r1
 80a3ee8:	464b      	mov	r3, r9
 80a3eea:	4620      	mov	r0, r4
 80a3eec:	4629      	mov	r1, r5
 80a3eee:	f000 fbed 	bl	80a46cc <__aeabi_dsub>
 80a3ef2:	4602      	mov	r2, r0
 80a3ef4:	460b      	mov	r3, r1
 80a3ef6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3efa:	f000 fbe7 	bl	80a46cc <__aeabi_dsub>
 80a3efe:	a376      	add	r3, pc, #472	; (adr r3, 80a40d8 <__ieee754_pow+0x898>)
 80a3f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3f04:	f000 fd96 	bl	80a4a34 <__aeabi_dmul>
 80a3f08:	a375      	add	r3, pc, #468	; (adr r3, 80a40e0 <__ieee754_pow+0x8a0>)
 80a3f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3f0e:	4680      	mov	r8, r0
 80a3f10:	4689      	mov	r9, r1
 80a3f12:	4620      	mov	r0, r4
 80a3f14:	4629      	mov	r1, r5
 80a3f16:	f000 fd8d 	bl	80a4a34 <__aeabi_dmul>
 80a3f1a:	4602      	mov	r2, r0
 80a3f1c:	460b      	mov	r3, r1
 80a3f1e:	4640      	mov	r0, r8
 80a3f20:	4649      	mov	r1, r9
 80a3f22:	f000 fbd5 	bl	80a46d0 <__adddf3>
 80a3f26:	4680      	mov	r8, r0
 80a3f28:	4689      	mov	r9, r1
 80a3f2a:	4602      	mov	r2, r0
 80a3f2c:	460b      	mov	r3, r1
 80a3f2e:	4630      	mov	r0, r6
 80a3f30:	4639      	mov	r1, r7
 80a3f32:	f000 fbcd 	bl	80a46d0 <__adddf3>
 80a3f36:	4632      	mov	r2, r6
 80a3f38:	463b      	mov	r3, r7
 80a3f3a:	4604      	mov	r4, r0
 80a3f3c:	460d      	mov	r5, r1
 80a3f3e:	f000 fbc5 	bl	80a46cc <__aeabi_dsub>
 80a3f42:	4602      	mov	r2, r0
 80a3f44:	460b      	mov	r3, r1
 80a3f46:	4640      	mov	r0, r8
 80a3f48:	4649      	mov	r1, r9
 80a3f4a:	f000 fbbf 	bl	80a46cc <__aeabi_dsub>
 80a3f4e:	4622      	mov	r2, r4
 80a3f50:	4680      	mov	r8, r0
 80a3f52:	4689      	mov	r9, r1
 80a3f54:	462b      	mov	r3, r5
 80a3f56:	4620      	mov	r0, r4
 80a3f58:	4629      	mov	r1, r5
 80a3f5a:	f000 fd6b 	bl	80a4a34 <__aeabi_dmul>
 80a3f5e:	a362      	add	r3, pc, #392	; (adr r3, 80a40e8 <__ieee754_pow+0x8a8>)
 80a3f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3f64:	4606      	mov	r6, r0
 80a3f66:	460f      	mov	r7, r1
 80a3f68:	f000 fd64 	bl	80a4a34 <__aeabi_dmul>
 80a3f6c:	a360      	add	r3, pc, #384	; (adr r3, 80a40f0 <__ieee754_pow+0x8b0>)
 80a3f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3f72:	f000 fbab 	bl	80a46cc <__aeabi_dsub>
 80a3f76:	4632      	mov	r2, r6
 80a3f78:	463b      	mov	r3, r7
 80a3f7a:	f000 fd5b 	bl	80a4a34 <__aeabi_dmul>
 80a3f7e:	a35e      	add	r3, pc, #376	; (adr r3, 80a40f8 <__ieee754_pow+0x8b8>)
 80a3f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3f84:	f000 fba4 	bl	80a46d0 <__adddf3>
 80a3f88:	4632      	mov	r2, r6
 80a3f8a:	463b      	mov	r3, r7
 80a3f8c:	f000 fd52 	bl	80a4a34 <__aeabi_dmul>
 80a3f90:	a35b      	add	r3, pc, #364	; (adr r3, 80a4100 <__ieee754_pow+0x8c0>)
 80a3f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3f96:	f000 fb99 	bl	80a46cc <__aeabi_dsub>
 80a3f9a:	4632      	mov	r2, r6
 80a3f9c:	463b      	mov	r3, r7
 80a3f9e:	f000 fd49 	bl	80a4a34 <__aeabi_dmul>
 80a3fa2:	a359      	add	r3, pc, #356	; (adr r3, 80a4108 <__ieee754_pow+0x8c8>)
 80a3fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3fa8:	f000 fb92 	bl	80a46d0 <__adddf3>
 80a3fac:	4632      	mov	r2, r6
 80a3fae:	463b      	mov	r3, r7
 80a3fb0:	f000 fd40 	bl	80a4a34 <__aeabi_dmul>
 80a3fb4:	4602      	mov	r2, r0
 80a3fb6:	460b      	mov	r3, r1
 80a3fb8:	4620      	mov	r0, r4
 80a3fba:	4629      	mov	r1, r5
 80a3fbc:	f000 fb86 	bl	80a46cc <__aeabi_dsub>
 80a3fc0:	4606      	mov	r6, r0
 80a3fc2:	460f      	mov	r7, r1
 80a3fc4:	4602      	mov	r2, r0
 80a3fc6:	460b      	mov	r3, r1
 80a3fc8:	4620      	mov	r0, r4
 80a3fca:	4629      	mov	r1, r5
 80a3fcc:	f000 fd32 	bl	80a4a34 <__aeabi_dmul>
 80a3fd0:	2200      	movs	r2, #0
 80a3fd2:	e9cd 0100 	strd	r0, r1, [sp]
 80a3fd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a3fda:	4630      	mov	r0, r6
 80a3fdc:	4639      	mov	r1, r7
 80a3fde:	f000 fb75 	bl	80a46cc <__aeabi_dsub>
 80a3fe2:	4602      	mov	r2, r0
 80a3fe4:	460b      	mov	r3, r1
 80a3fe6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3fea:	f000 fe4d 	bl	80a4c88 <__aeabi_ddiv>
 80a3fee:	4642      	mov	r2, r8
 80a3ff0:	4606      	mov	r6, r0
 80a3ff2:	460f      	mov	r7, r1
 80a3ff4:	464b      	mov	r3, r9
 80a3ff6:	4620      	mov	r0, r4
 80a3ff8:	4629      	mov	r1, r5
 80a3ffa:	f000 fd1b 	bl	80a4a34 <__aeabi_dmul>
 80a3ffe:	4642      	mov	r2, r8
 80a4000:	464b      	mov	r3, r9
 80a4002:	f000 fb65 	bl	80a46d0 <__adddf3>
 80a4006:	4602      	mov	r2, r0
 80a4008:	460b      	mov	r3, r1
 80a400a:	4630      	mov	r0, r6
 80a400c:	4639      	mov	r1, r7
 80a400e:	f000 fb5d 	bl	80a46cc <__aeabi_dsub>
 80a4012:	4622      	mov	r2, r4
 80a4014:	462b      	mov	r3, r5
 80a4016:	f000 fb59 	bl	80a46cc <__aeabi_dsub>
 80a401a:	4602      	mov	r2, r0
 80a401c:	460b      	mov	r3, r1
 80a401e:	2000      	movs	r0, #0
 80a4020:	493d      	ldr	r1, [pc, #244]	; (80a4118 <__ieee754_pow+0x8d8>)
 80a4022:	f000 fb53 	bl	80a46cc <__aeabi_dsub>
 80a4026:	448a      	add	sl, r1
 80a4028:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
 80a402c:	f2c0 8137 	blt.w	80a429e <__ieee754_pow+0xa5e>
 80a4030:	4651      	mov	r1, sl
 80a4032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a4036:	f000 fcfd 	bl	80a4a34 <__aeabi_dmul>
 80a403a:	4683      	mov	fp, r0
 80a403c:	e418      	b.n	80a3870 <__ieee754_pow+0x30>
 80a403e:	46f3      	mov	fp, lr
 80a4040:	4935      	ldr	r1, [pc, #212]	; (80a4118 <__ieee754_pow+0x8d8>)
 80a4042:	e415      	b.n	80a3870 <__ieee754_pow+0x30>
 80a4044:	464a      	mov	r2, r9
 80a4046:	4648      	mov	r0, r9
 80a4048:	463b      	mov	r3, r7
 80a404a:	4639      	mov	r1, r7
 80a404c:	f000 fcf2 	bl	80a4a34 <__aeabi_dmul>
 80a4050:	4683      	mov	fp, r0
 80a4052:	e40d      	b.n	80a3870 <__ieee754_pow+0x30>
 80a4054:	4b34      	ldr	r3, [pc, #208]	; (80a4128 <__ieee754_pow+0x8e8>)
 80a4056:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80a405a:	429f      	cmp	r7, r3
 80a405c:	f340 8101 	ble.w	80a4262 <__ieee754_pow+0xa22>
 80a4060:	4b32      	ldr	r3, [pc, #200]	; (80a412c <__ieee754_pow+0x8ec>)
 80a4062:	440b      	add	r3, r1
 80a4064:	4303      	orrs	r3, r0
 80a4066:	d10c      	bne.n	80a4082 <__ieee754_pow+0x842>
 80a4068:	4642      	mov	r2, r8
 80a406a:	464b      	mov	r3, r9
 80a406c:	f000 fb2e 	bl	80a46cc <__aeabi_dsub>
 80a4070:	4602      	mov	r2, r0
 80a4072:	460b      	mov	r3, r1
 80a4074:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4078:	f000 ff58 	bl	80a4f2c <__aeabi_dcmple>
 80a407c:	2800      	cmp	r0, #0
 80a407e:	f43f aefb 	beq.w	80a3e78 <__ieee754_pow+0x638>
 80a4082:	a323      	add	r3, pc, #140	; (adr r3, 80a4110 <__ieee754_pow+0x8d0>)
 80a4084:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4088:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a408c:	f000 fcd2 	bl	80a4a34 <__aeabi_dmul>
 80a4090:	a31f      	add	r3, pc, #124	; (adr r3, 80a4110 <__ieee754_pow+0x8d0>)
 80a4092:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4096:	f000 fccd 	bl	80a4a34 <__aeabi_dmul>
 80a409a:	4683      	mov	fp, r0
 80a409c:	f7ff bbe8 	b.w	80a3870 <__ieee754_pow+0x30>
 80a40a0:	f1ba 0f00 	cmp.w	sl, #0
 80a40a4:	f6bf acae 	bge.w	80a3a04 <__ieee754_pow+0x1c4>
 80a40a8:	e9dd 3400 	ldrd	r3, r4, [sp]
 80a40ac:	469b      	mov	fp, r3
 80a40ae:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80a40b2:	f7ff bbdd 	b.w	80a3870 <__ieee754_pow+0x30>
 80a40b6:	4602      	mov	r2, r0
 80a40b8:	460b      	mov	r3, r1
 80a40ba:	2000      	movs	r0, #0
 80a40bc:	4916      	ldr	r1, [pc, #88]	; (80a4118 <__ieee754_pow+0x8d8>)
 80a40be:	f000 fde3 	bl	80a4c88 <__aeabi_ddiv>
 80a40c2:	e441      	b.n	80a3948 <__ieee754_pow+0x108>
 80a40c4:	f3af 8000 	nop.w
 80a40c8:	652b82fe 	.word	0x652b82fe
 80a40cc:	3c971547 	.word	0x3c971547
 80a40d0:	00000000 	.word	0x00000000
 80a40d4:	3fe62e43 	.word	0x3fe62e43
 80a40d8:	fefa39ef 	.word	0xfefa39ef
 80a40dc:	3fe62e42 	.word	0x3fe62e42
 80a40e0:	0ca86c39 	.word	0x0ca86c39
 80a40e4:	be205c61 	.word	0xbe205c61
 80a40e8:	72bea4d0 	.word	0x72bea4d0
 80a40ec:	3e663769 	.word	0x3e663769
 80a40f0:	c5d26bf1 	.word	0xc5d26bf1
 80a40f4:	3ebbbd41 	.word	0x3ebbbd41
 80a40f8:	af25de2c 	.word	0xaf25de2c
 80a40fc:	3f11566a 	.word	0x3f11566a
 80a4100:	16bebd93 	.word	0x16bebd93
 80a4104:	3f66c16c 	.word	0x3f66c16c
 80a4108:	5555553e 	.word	0x5555553e
 80a410c:	3fc55555 	.word	0x3fc55555
 80a4110:	c2f8f359 	.word	0xc2f8f359
 80a4114:	01a56e1f 	.word	0x01a56e1f
 80a4118:	3ff00000 	.word	0x3ff00000
 80a411c:	bff00000 	.word	0xbff00000
 80a4120:	408fffff 	.word	0x408fffff
 80a4124:	000fffff 	.word	0x000fffff
 80a4128:	4090cbff 	.word	0x4090cbff
 80a412c:	3f6f3400 	.word	0x3f6f3400
 80a4130:	4b6f      	ldr	r3, [pc, #444]	; (80a42f0 <__ieee754_pow+0xab0>)
 80a4132:	429e      	cmp	r6, r3
 80a4134:	f77f ac63 	ble.w	80a39fe <__ieee754_pow+0x1be>
 80a4138:	4b6e      	ldr	r3, [pc, #440]	; (80a42f4 <__ieee754_pow+0xab4>)
 80a413a:	429e      	cmp	r6, r3
 80a413c:	f73f abee 	bgt.w	80a391c <__ieee754_pow+0xdc>
 80a4140:	2200      	movs	r2, #0
 80a4142:	4b6c      	ldr	r3, [pc, #432]	; (80a42f4 <__ieee754_pow+0xab4>)
 80a4144:	f000 fac2 	bl	80a46cc <__aeabi_dsub>
 80a4148:	a35b      	add	r3, pc, #364	; (adr r3, 80a42b8 <__ieee754_pow+0xa78>)
 80a414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a414e:	4606      	mov	r6, r0
 80a4150:	460f      	mov	r7, r1
 80a4152:	f000 fc6f 	bl	80a4a34 <__aeabi_dmul>
 80a4156:	a35a      	add	r3, pc, #360	; (adr r3, 80a42c0 <__ieee754_pow+0xa80>)
 80a4158:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a415c:	4680      	mov	r8, r0
 80a415e:	4689      	mov	r9, r1
 80a4160:	4630      	mov	r0, r6
 80a4162:	4639      	mov	r1, r7
 80a4164:	f000 fc66 	bl	80a4a34 <__aeabi_dmul>
 80a4168:	2200      	movs	r2, #0
 80a416a:	4682      	mov	sl, r0
 80a416c:	468b      	mov	fp, r1
 80a416e:	4b62      	ldr	r3, [pc, #392]	; (80a42f8 <__ieee754_pow+0xab8>)
 80a4170:	4630      	mov	r0, r6
 80a4172:	4639      	mov	r1, r7
 80a4174:	f000 fc5e 	bl	80a4a34 <__aeabi_dmul>
 80a4178:	4602      	mov	r2, r0
 80a417a:	460b      	mov	r3, r1
 80a417c:	a152      	add	r1, pc, #328	; (adr r1, 80a42c8 <__ieee754_pow+0xa88>)
 80a417e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a4182:	f000 faa3 	bl	80a46cc <__aeabi_dsub>
 80a4186:	4632      	mov	r2, r6
 80a4188:	463b      	mov	r3, r7
 80a418a:	f000 fc53 	bl	80a4a34 <__aeabi_dmul>
 80a418e:	4602      	mov	r2, r0
 80a4190:	460b      	mov	r3, r1
 80a4192:	2000      	movs	r0, #0
 80a4194:	4959      	ldr	r1, [pc, #356]	; (80a42fc <__ieee754_pow+0xabc>)
 80a4196:	f000 fa99 	bl	80a46cc <__aeabi_dsub>
 80a419a:	4632      	mov	r2, r6
 80a419c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a41a0:	463b      	mov	r3, r7
 80a41a2:	4630      	mov	r0, r6
 80a41a4:	4639      	mov	r1, r7
 80a41a6:	f000 fc45 	bl	80a4a34 <__aeabi_dmul>
 80a41aa:	4602      	mov	r2, r0
 80a41ac:	460b      	mov	r3, r1
 80a41ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a41b2:	f000 fc3f 	bl	80a4a34 <__aeabi_dmul>
 80a41b6:	a346      	add	r3, pc, #280	; (adr r3, 80a42d0 <__ieee754_pow+0xa90>)
 80a41b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a41bc:	f000 fc3a 	bl	80a4a34 <__aeabi_dmul>
 80a41c0:	4602      	mov	r2, r0
 80a41c2:	460b      	mov	r3, r1
 80a41c4:	4650      	mov	r0, sl
 80a41c6:	4659      	mov	r1, fp
 80a41c8:	f000 fa80 	bl	80a46cc <__aeabi_dsub>
 80a41cc:	4602      	mov	r2, r0
 80a41ce:	460b      	mov	r3, r1
 80a41d0:	4606      	mov	r6, r0
 80a41d2:	460f      	mov	r7, r1
 80a41d4:	4640      	mov	r0, r8
 80a41d6:	4649      	mov	r1, r9
 80a41d8:	f000 fa7a 	bl	80a46d0 <__adddf3>
 80a41dc:	4642      	mov	r2, r8
 80a41de:	464b      	mov	r3, r9
 80a41e0:	2000      	movs	r0, #0
 80a41e2:	4682      	mov	sl, r0
 80a41e4:	468b      	mov	fp, r1
 80a41e6:	f000 fa71 	bl	80a46cc <__aeabi_dsub>
 80a41ea:	4602      	mov	r2, r0
 80a41ec:	460b      	mov	r3, r1
 80a41ee:	4630      	mov	r0, r6
 80a41f0:	4639      	mov	r1, r7
 80a41f2:	f000 fa6b 	bl	80a46cc <__aeabi_dsub>
 80a41f6:	4680      	mov	r8, r0
 80a41f8:	4689      	mov	r9, r1
 80a41fa:	e5d9      	b.n	80a3db0 <__ieee754_pow+0x570>
 80a41fc:	2200      	movs	r2, #0
 80a41fe:	2300      	movs	r3, #0
 80a4200:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a4204:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a4208:	4b3a      	ldr	r3, [pc, #232]	; (80a42f4 <__ieee754_pow+0xab4>)
 80a420a:	2200      	movs	r2, #0
 80a420c:	2600      	movs	r6, #0
 80a420e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a4212:	e43d      	b.n	80a3a90 <__ieee754_pow+0x250>
 80a4214:	464a      	mov	r2, r9
 80a4216:	463b      	mov	r3, r7
 80a4218:	2000      	movs	r0, #0
 80a421a:	4936      	ldr	r1, [pc, #216]	; (80a42f4 <__ieee754_pow+0xab4>)
 80a421c:	f000 fd34 	bl	80a4c88 <__aeabi_ddiv>
 80a4220:	4683      	mov	fp, r0
 80a4222:	f7ff bb25 	b.w	80a3870 <__ieee754_pow+0x30>
 80a4226:	a32c      	add	r3, pc, #176	; (adr r3, 80a42d8 <__ieee754_pow+0xa98>)
 80a4228:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a422c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a4230:	f000 fc00 	bl	80a4a34 <__aeabi_dmul>
 80a4234:	a328      	add	r3, pc, #160	; (adr r3, 80a42d8 <__ieee754_pow+0xa98>)
 80a4236:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a423a:	f000 fbfb 	bl	80a4a34 <__aeabi_dmul>
 80a423e:	4683      	mov	fp, r0
 80a4240:	f7ff bb16 	b.w	80a3870 <__ieee754_pow+0x30>
 80a4244:	f1be 0f00 	cmp.w	lr, #0
 80a4248:	f47f ab4f 	bne.w	80a38ea <__ieee754_pow+0xaa>
 80a424c:	f1c3 0314 	rsb	r3, r3, #20
 80a4250:	fa48 f203 	asr.w	r2, r8, r3
 80a4254:	fa02 f303 	lsl.w	r3, r2, r3
 80a4258:	4598      	cmp	r8, r3
 80a425a:	d024      	beq.n	80a42a6 <__ieee754_pow+0xa66>
 80a425c:	4674      	mov	r4, lr
 80a425e:	f7ff bb21 	b.w	80a38a4 <__ieee754_pow+0x64>
 80a4262:	4b26      	ldr	r3, [pc, #152]	; (80a42fc <__ieee754_pow+0xabc>)
 80a4264:	429f      	cmp	r7, r3
 80a4266:	f73f ae07 	bgt.w	80a3e78 <__ieee754_pow+0x638>
 80a426a:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 80a426e:	469a      	mov	sl, r3
 80a4270:	469b      	mov	fp, r3
 80a4272:	e62e      	b.n	80a3ed2 <__ieee754_pow+0x692>
 80a4274:	4602      	mov	r2, r0
 80a4276:	460b      	mov	r3, r1
 80a4278:	f7ff bbb9 	b.w	80a39ee <__ieee754_pow+0x1ae>
 80a427c:	4b20      	ldr	r3, [pc, #128]	; (80a4300 <__ieee754_pow+0xac0>)
 80a427e:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80a4282:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a4286:	a316      	add	r3, pc, #88	; (adr r3, 80a42e0 <__ieee754_pow+0xaa0>)
 80a4288:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a428c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a4290:	a315      	add	r3, pc, #84	; (adr r3, 80a42e8 <__ieee754_pow+0xaa8>)
 80a4292:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4296:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a429a:	f7ff bbf9 	b.w	80a3a90 <__ieee754_pow+0x250>
 80a429e:	465a      	mov	r2, fp
 80a42a0:	f000 f996 	bl	80a45d0 <scalbn>
 80a42a4:	e6c5      	b.n	80a4032 <__ieee754_pow+0x7f2>
 80a42a6:	f002 0201 	and.w	r2, r2, #1
 80a42aa:	f1c2 0402 	rsb	r4, r2, #2
 80a42ae:	f7ff baf9 	b.w	80a38a4 <__ieee754_pow+0x64>
 80a42b2:	bf00      	nop
 80a42b4:	f3af 8000 	nop.w
 80a42b8:	60000000 	.word	0x60000000
 80a42bc:	3ff71547 	.word	0x3ff71547
 80a42c0:	f85ddf44 	.word	0xf85ddf44
 80a42c4:	3e54ae0b 	.word	0x3e54ae0b
 80a42c8:	55555555 	.word	0x55555555
 80a42cc:	3fd55555 	.word	0x3fd55555
 80a42d0:	652b82fe 	.word	0x652b82fe
 80a42d4:	3ff71547 	.word	0x3ff71547
 80a42d8:	8800759c 	.word	0x8800759c
 80a42dc:	7e37e43c 	.word	0x7e37e43c
 80a42e0:	40000000 	.word	0x40000000
 80a42e4:	3fe2b803 	.word	0x3fe2b803
 80a42e8:	43cfd006 	.word	0x43cfd006
 80a42ec:	3e4cfdeb 	.word	0x3e4cfdeb
 80a42f0:	3feffffe 	.word	0x3feffffe
 80a42f4:	3ff00000 	.word	0x3ff00000
 80a42f8:	3fd00000 	.word	0x3fd00000
 80a42fc:	3fe00000 	.word	0x3fe00000
 80a4300:	3ff80000 	.word	0x3ff80000

080a4304 <__ieee754_sqrt>:
 80a4304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4308:	4e5f      	ldr	r6, [pc, #380]	; (80a4488 <__ieee754_sqrt+0x184>)
 80a430a:	460c      	mov	r4, r1
 80a430c:	46b6      	mov	lr, r6
 80a430e:	400e      	ands	r6, r1
 80a4310:	4576      	cmp	r6, lr
 80a4312:	4605      	mov	r5, r0
 80a4314:	f000 8098 	beq.w	80a4448 <__ieee754_sqrt+0x144>
 80a4318:	2900      	cmp	r1, #0
 80a431a:	460b      	mov	r3, r1
 80a431c:	4602      	mov	r2, r0
 80a431e:	dd74      	ble.n	80a440a <__ieee754_sqrt+0x106>
 80a4320:	ea5f 5e21 	movs.w	lr, r1, asr #20
 80a4324:	d07f      	beq.n	80a4426 <__ieee754_sqrt+0x122>
 80a4326:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 80a432a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a432e:	f01e 0f01 	tst.w	lr, #1
 80a4332:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a4336:	d163      	bne.n	80a4400 <__ieee754_sqrt+0xfc>
 80a4338:	2700      	movs	r7, #0
 80a433a:	463e      	mov	r6, r7
 80a433c:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 80a4340:	440b      	add	r3, r1
 80a4342:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80a4346:	0052      	lsls	r2, r2, #1
 80a4348:	2016      	movs	r0, #22
 80a434a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80a434e:	1874      	adds	r4, r6, r1
 80a4350:	429c      	cmp	r4, r3
 80a4352:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 80a4356:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a435a:	dc02      	bgt.n	80a4362 <__ieee754_sqrt+0x5e>
 80a435c:	1b1b      	subs	r3, r3, r4
 80a435e:	1866      	adds	r6, r4, r1
 80a4360:	440f      	add	r7, r1
 80a4362:	3801      	subs	r0, #1
 80a4364:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80a4368:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a436c:	d1ef      	bne.n	80a434e <__ieee754_sqrt+0x4a>
 80a436e:	4684      	mov	ip, r0
 80a4370:	2420      	movs	r4, #32
 80a4372:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80a4376:	e009      	b.n	80a438c <__ieee754_sqrt+0x88>
 80a4378:	d020      	beq.n	80a43bc <__ieee754_sqrt+0xb8>
 80a437a:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 80a437e:	3c01      	subs	r4, #1
 80a4380:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a4384:	442b      	add	r3, r5
 80a4386:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a438a:	d020      	beq.n	80a43ce <__ieee754_sqrt+0xca>
 80a438c:	429e      	cmp	r6, r3
 80a438e:	eb01 050c 	add.w	r5, r1, ip
 80a4392:	daf1      	bge.n	80a4378 <__ieee754_sqrt+0x74>
 80a4394:	2d00      	cmp	r5, #0
 80a4396:	eb05 0c01 	add.w	ip, r5, r1
 80a439a:	db09      	blt.n	80a43b0 <__ieee754_sqrt+0xac>
 80a439c:	46b0      	mov	r8, r6
 80a439e:	4295      	cmp	r5, r2
 80a43a0:	eba3 0306 	sub.w	r3, r3, r6
 80a43a4:	d900      	bls.n	80a43a8 <__ieee754_sqrt+0xa4>
 80a43a6:	3b01      	subs	r3, #1
 80a43a8:	4646      	mov	r6, r8
 80a43aa:	1b52      	subs	r2, r2, r5
 80a43ac:	4408      	add	r0, r1
 80a43ae:	e7e4      	b.n	80a437a <__ieee754_sqrt+0x76>
 80a43b0:	f1bc 0f00 	cmp.w	ip, #0
 80a43b4:	dbf2      	blt.n	80a439c <__ieee754_sqrt+0x98>
 80a43b6:	f106 0801 	add.w	r8, r6, #1
 80a43ba:	e7f0      	b.n	80a439e <__ieee754_sqrt+0x9a>
 80a43bc:	4295      	cmp	r5, r2
 80a43be:	d817      	bhi.n	80a43f0 <__ieee754_sqrt+0xec>
 80a43c0:	2d00      	cmp	r5, #0
 80a43c2:	eb05 0c01 	add.w	ip, r5, r1
 80a43c6:	db49      	blt.n	80a445c <__ieee754_sqrt+0x158>
 80a43c8:	4698      	mov	r8, r3
 80a43ca:	2300      	movs	r3, #0
 80a43cc:	e7ec      	b.n	80a43a8 <__ieee754_sqrt+0xa4>
 80a43ce:	4313      	orrs	r3, r2
 80a43d0:	d110      	bne.n	80a43f4 <__ieee754_sqrt+0xf0>
 80a43d2:	0840      	lsrs	r0, r0, #1
 80a43d4:	107b      	asrs	r3, r7, #1
 80a43d6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80a43da:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a43de:	07fa      	lsls	r2, r7, #31
 80a43e0:	eb03 570e 	add.w	r7, r3, lr, lsl #20
 80a43e4:	4639      	mov	r1, r7
 80a43e6:	bf48      	it	mi
 80a43e8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 80a43ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a43f0:	4633      	mov	r3, r6
 80a43f2:	e7c2      	b.n	80a437a <__ieee754_sqrt+0x76>
 80a43f4:	1c41      	adds	r1, r0, #1
 80a43f6:	d035      	beq.n	80a4464 <__ieee754_sqrt+0x160>
 80a43f8:	f000 0301 	and.w	r3, r0, #1
 80a43fc:	4418      	add	r0, r3
 80a43fe:	e7e8      	b.n	80a43d2 <__ieee754_sqrt+0xce>
 80a4400:	005b      	lsls	r3, r3, #1
 80a4402:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80a4406:	0052      	lsls	r2, r2, #1
 80a4408:	e796      	b.n	80a4338 <__ieee754_sqrt+0x34>
 80a440a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a440e:	4306      	orrs	r6, r0
 80a4410:	d0ec      	beq.n	80a43ec <__ieee754_sqrt+0xe8>
 80a4412:	bb79      	cbnz	r1, 80a4474 <__ieee754_sqrt+0x170>
 80a4414:	468e      	mov	lr, r1
 80a4416:	0ad3      	lsrs	r3, r2, #11
 80a4418:	f1ae 0e15 	sub.w	lr, lr, #21
 80a441c:	0552      	lsls	r2, r2, #21
 80a441e:	2b00      	cmp	r3, #0
 80a4420:	d0f9      	beq.n	80a4416 <__ieee754_sqrt+0x112>
 80a4422:	02dd      	lsls	r5, r3, #11
 80a4424:	d421      	bmi.n	80a446a <__ieee754_sqrt+0x166>
 80a4426:	2100      	movs	r1, #0
 80a4428:	e000      	b.n	80a442c <__ieee754_sqrt+0x128>
 80a442a:	4601      	mov	r1, r0
 80a442c:	005b      	lsls	r3, r3, #1
 80a442e:	02dc      	lsls	r4, r3, #11
 80a4430:	f101 0001 	add.w	r0, r1, #1
 80a4434:	d5f9      	bpl.n	80a442a <__ieee754_sqrt+0x126>
 80a4436:	f1c0 0420 	rsb	r4, r0, #32
 80a443a:	fa22 f404 	lsr.w	r4, r2, r4
 80a443e:	4323      	orrs	r3, r4
 80a4440:	ebc1 0e0e 	rsb	lr, r1, lr
 80a4444:	4082      	lsls	r2, r0
 80a4446:	e76e      	b.n	80a4326 <__ieee754_sqrt+0x22>
 80a4448:	4602      	mov	r2, r0
 80a444a:	460b      	mov	r3, r1
 80a444c:	f000 faf2 	bl	80a4a34 <__aeabi_dmul>
 80a4450:	462a      	mov	r2, r5
 80a4452:	4623      	mov	r3, r4
 80a4454:	f000 f93c 	bl	80a46d0 <__adddf3>
 80a4458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a445c:	f1bc 0f00 	cmp.w	ip, #0
 80a4460:	daa9      	bge.n	80a43b6 <__ieee754_sqrt+0xb2>
 80a4462:	e7b1      	b.n	80a43c8 <__ieee754_sqrt+0xc4>
 80a4464:	3701      	adds	r7, #1
 80a4466:	4620      	mov	r0, r4
 80a4468:	e7b4      	b.n	80a43d4 <__ieee754_sqrt+0xd0>
 80a446a:	2420      	movs	r4, #32
 80a446c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80a4470:	2000      	movs	r0, #0
 80a4472:	e7e2      	b.n	80a443a <__ieee754_sqrt+0x136>
 80a4474:	4602      	mov	r2, r0
 80a4476:	460b      	mov	r3, r1
 80a4478:	f000 f928 	bl	80a46cc <__aeabi_dsub>
 80a447c:	4602      	mov	r2, r0
 80a447e:	460b      	mov	r3, r1
 80a4480:	f000 fc02 	bl	80a4c88 <__aeabi_ddiv>
 80a4484:	e7b2      	b.n	80a43ec <__ieee754_sqrt+0xe8>
 80a4486:	bf00      	nop
 80a4488:	7ff00000 	.word	0x7ff00000

080a448c <fabs>:
 80a448c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4490:	4770      	bx	lr
 80a4492:	bf00      	nop

080a4494 <finite>:
 80a4494:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80a4498:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80a449c:	0fc0      	lsrs	r0, r0, #31
 80a449e:	4770      	bx	lr

080a44a0 <matherr>:
 80a44a0:	2000      	movs	r0, #0
 80a44a2:	4770      	bx	lr

080a44a4 <nan>:
 80a44a4:	2000      	movs	r0, #0
 80a44a6:	4901      	ldr	r1, [pc, #4]	; (80a44ac <nan+0x8>)
 80a44a8:	4770      	bx	lr
 80a44aa:	bf00      	nop
 80a44ac:	7ff80000 	.word	0x7ff80000

080a44b0 <rint>:
 80a44b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a44b2:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 80a44b6:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
 80a44ba:	2e13      	cmp	r6, #19
 80a44bc:	b083      	sub	sp, #12
 80a44be:	4602      	mov	r2, r0
 80a44c0:	460b      	mov	r3, r1
 80a44c2:	460c      	mov	r4, r1
 80a44c4:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80a44c8:	4607      	mov	r7, r0
 80a44ca:	dc2e      	bgt.n	80a452a <rint+0x7a>
 80a44cc:	2e00      	cmp	r6, #0
 80a44ce:	db49      	blt.n	80a4564 <rint+0xb4>
 80a44d0:	493d      	ldr	r1, [pc, #244]	; (80a45c8 <rint+0x118>)
 80a44d2:	4131      	asrs	r1, r6
 80a44d4:	ea03 0001 	and.w	r0, r3, r1
 80a44d8:	4310      	orrs	r0, r2
 80a44da:	d02b      	beq.n	80a4534 <rint+0x84>
 80a44dc:	0849      	lsrs	r1, r1, #1
 80a44de:	400b      	ands	r3, r1
 80a44e0:	ea53 0702 	orrs.w	r7, r3, r2
 80a44e4:	d00c      	beq.n	80a4500 <rint+0x50>
 80a44e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80a44ea:	2e13      	cmp	r6, #19
 80a44ec:	ea24 0101 	bic.w	r1, r4, r1
 80a44f0:	fa43 f406 	asr.w	r4, r3, r6
 80a44f4:	ea44 0401 	orr.w	r4, r4, r1
 80a44f8:	bf0c      	ite	eq
 80a44fa:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80a44fe:	2700      	movne	r7, #0
 80a4500:	4b32      	ldr	r3, [pc, #200]	; (80a45cc <rint+0x11c>)
 80a4502:	4621      	mov	r1, r4
 80a4504:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80a4508:	e9d5 4500 	ldrd	r4, r5, [r5]
 80a450c:	4638      	mov	r0, r7
 80a450e:	4622      	mov	r2, r4
 80a4510:	462b      	mov	r3, r5
 80a4512:	f000 f8dd 	bl	80a46d0 <__adddf3>
 80a4516:	e9cd 0100 	strd	r0, r1, [sp]
 80a451a:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a451e:	4622      	mov	r2, r4
 80a4520:	462b      	mov	r3, r5
 80a4522:	f000 f8d3 	bl	80a46cc <__aeabi_dsub>
 80a4526:	b003      	add	sp, #12
 80a4528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a452a:	2e33      	cmp	r6, #51	; 0x33
 80a452c:	dd06      	ble.n	80a453c <rint+0x8c>
 80a452e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a4532:	d045      	beq.n	80a45c0 <rint+0x110>
 80a4534:	4610      	mov	r0, r2
 80a4536:	4619      	mov	r1, r3
 80a4538:	b003      	add	sp, #12
 80a453a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a453c:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 80a4540:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80a4544:	fa21 f10e 	lsr.w	r1, r1, lr
 80a4548:	4208      	tst	r0, r1
 80a454a:	d0f3      	beq.n	80a4534 <rint+0x84>
 80a454c:	0849      	lsrs	r1, r1, #1
 80a454e:	4208      	tst	r0, r1
 80a4550:	d0d6      	beq.n	80a4500 <rint+0x50>
 80a4552:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a4556:	ea20 0101 	bic.w	r1, r0, r1
 80a455a:	fa43 fe0e 	asr.w	lr, r3, lr
 80a455e:	ea4e 0701 	orr.w	r7, lr, r1
 80a4562:	e7cd      	b.n	80a4500 <rint+0x50>
 80a4564:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4568:	4301      	orrs	r1, r0
 80a456a:	4619      	mov	r1, r3
 80a456c:	d0e4      	beq.n	80a4538 <rint+0x88>
 80a456e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a4572:	ea43 0c00 	orr.w	ip, r3, r0
 80a4576:	f1cc 0300 	rsb	r3, ip, #0
 80a457a:	ea43 0c0c 	orr.w	ip, r3, ip
 80a457e:	4b13      	ldr	r3, [pc, #76]	; (80a45cc <rint+0x11c>)
 80a4580:	0c64      	lsrs	r4, r4, #17
 80a4582:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
 80a4586:	f40c 2c00 	and.w	ip, ip, #524288	; 0x80000
 80a458a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80a458e:	0464      	lsls	r4, r4, #17
 80a4590:	e9d3 6700 	ldrd	r6, r7, [r3]
 80a4594:	ea4c 0104 	orr.w	r1, ip, r4
 80a4598:	4632      	mov	r2, r6
 80a459a:	463b      	mov	r3, r7
 80a459c:	f000 f898 	bl	80a46d0 <__adddf3>
 80a45a0:	e9cd 0100 	strd	r0, r1, [sp]
 80a45a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a45a8:	4632      	mov	r2, r6
 80a45aa:	463b      	mov	r3, r7
 80a45ac:	f000 f88e 	bl	80a46cc <__aeabi_dsub>
 80a45b0:	4602      	mov	r2, r0
 80a45b2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a45b6:	ea41 73c5 	orr.w	r3, r1, r5, lsl #31
 80a45ba:	4610      	mov	r0, r2
 80a45bc:	4619      	mov	r1, r3
 80a45be:	e7bb      	b.n	80a4538 <rint+0x88>
 80a45c0:	f000 f886 	bl	80a46d0 <__adddf3>
 80a45c4:	e7b8      	b.n	80a4538 <rint+0x88>
 80a45c6:	bf00      	nop
 80a45c8:	000fffff 	.word	0x000fffff
 80a45cc:	080a6588 	.word	0x080a6588

080a45d0 <scalbn>:
 80a45d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a45d2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80a45d6:	4604      	mov	r4, r0
 80a45d8:	460d      	mov	r5, r1
 80a45da:	460b      	mov	r3, r1
 80a45dc:	4617      	mov	r7, r2
 80a45de:	bb06      	cbnz	r6, 80a4622 <scalbn+0x52>
 80a45e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a45e4:	4303      	orrs	r3, r0
 80a45e6:	d025      	beq.n	80a4634 <scalbn+0x64>
 80a45e8:	2200      	movs	r2, #0
 80a45ea:	4b2f      	ldr	r3, [pc, #188]	; (80a46a8 <scalbn+0xd8>)
 80a45ec:	f000 fa22 	bl	80a4a34 <__aeabi_dmul>
 80a45f0:	4a2e      	ldr	r2, [pc, #184]	; (80a46ac <scalbn+0xdc>)
 80a45f2:	4604      	mov	r4, r0
 80a45f4:	4297      	cmp	r7, r2
 80a45f6:	460d      	mov	r5, r1
 80a45f8:	460b      	mov	r3, r1
 80a45fa:	db2a      	blt.n	80a4652 <scalbn+0x82>
 80a45fc:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80a4600:	3e36      	subs	r6, #54	; 0x36
 80a4602:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80a4606:	443e      	add	r6, r7
 80a4608:	4296      	cmp	r6, r2
 80a460a:	dc28      	bgt.n	80a465e <scalbn+0x8e>
 80a460c:	2e00      	cmp	r6, #0
 80a460e:	dd12      	ble.n	80a4636 <scalbn+0x66>
 80a4610:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80a4614:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80a4618:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80a461c:	4620      	mov	r0, r4
 80a461e:	4629      	mov	r1, r5
 80a4620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4622:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80a4626:	4296      	cmp	r6, r2
 80a4628:	d1eb      	bne.n	80a4602 <scalbn+0x32>
 80a462a:	4602      	mov	r2, r0
 80a462c:	460b      	mov	r3, r1
 80a462e:	f000 f84f 	bl	80a46d0 <__adddf3>
 80a4632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4636:	f116 0f35 	cmn.w	r6, #53	; 0x35
 80a463a:	da1d      	bge.n	80a4678 <scalbn+0xa8>
 80a463c:	f24c 3350 	movw	r3, #50000	; 0xc350
 80a4640:	429f      	cmp	r7, r3
 80a4642:	dc0c      	bgt.n	80a465e <scalbn+0x8e>
 80a4644:	a114      	add	r1, pc, #80	; (adr r1, 80a4698 <scalbn+0xc8>)
 80a4646:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a464a:	4622      	mov	r2, r4
 80a464c:	462b      	mov	r3, r5
 80a464e:	f000 f831 	bl	80a46b4 <copysign>
 80a4652:	a311      	add	r3, pc, #68	; (adr r3, 80a4698 <scalbn+0xc8>)
 80a4654:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4658:	f000 f9ec 	bl	80a4a34 <__aeabi_dmul>
 80a465c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a465e:	4622      	mov	r2, r4
 80a4660:	a10f      	add	r1, pc, #60	; (adr r1, 80a46a0 <scalbn+0xd0>)
 80a4662:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a4666:	462b      	mov	r3, r5
 80a4668:	f000 f824 	bl	80a46b4 <copysign>
 80a466c:	a30c      	add	r3, pc, #48	; (adr r3, 80a46a0 <scalbn+0xd0>)
 80a466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4672:	f000 f9df 	bl	80a4a34 <__aeabi_dmul>
 80a4676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4678:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80a467c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80a4680:	3636      	adds	r6, #54	; 0x36
 80a4682:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80a4686:	4620      	mov	r0, r4
 80a4688:	4629      	mov	r1, r5
 80a468a:	2200      	movs	r2, #0
 80a468c:	4b08      	ldr	r3, [pc, #32]	; (80a46b0 <scalbn+0xe0>)
 80a468e:	f000 f9d1 	bl	80a4a34 <__aeabi_dmul>
 80a4692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4694:	f3af 8000 	nop.w
 80a4698:	c2f8f359 	.word	0xc2f8f359
 80a469c:	01a56e1f 	.word	0x01a56e1f
 80a46a0:	8800759c 	.word	0x8800759c
 80a46a4:	7e37e43c 	.word	0x7e37e43c
 80a46a8:	43500000 	.word	0x43500000
 80a46ac:	ffff3cb0 	.word	0xffff3cb0
 80a46b0:	3c900000 	.word	0x3c900000

080a46b4 <copysign>:
 80a46b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80a46b8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80a46bc:	ea42 0103 	orr.w	r1, r2, r3
 80a46c0:	4770      	bx	lr
 80a46c2:	bf00      	nop

080a46c4 <__aeabi_drsub>:
 80a46c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a46c8:	e002      	b.n	80a46d0 <__adddf3>
 80a46ca:	bf00      	nop

080a46cc <__aeabi_dsub>:
 80a46cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a46d0 <__adddf3>:
 80a46d0:	b530      	push	{r4, r5, lr}
 80a46d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a46d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a46da:	ea94 0f05 	teq	r4, r5
 80a46de:	bf08      	it	eq
 80a46e0:	ea90 0f02 	teqeq	r0, r2
 80a46e4:	bf1f      	itttt	ne
 80a46e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a46ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a46ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a46f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a46f6:	f000 80e2 	beq.w	80a48be <__adddf3+0x1ee>
 80a46fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a46fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a4702:	bfb8      	it	lt
 80a4704:	426d      	neglt	r5, r5
 80a4706:	dd0c      	ble.n	80a4722 <__adddf3+0x52>
 80a4708:	442c      	add	r4, r5
 80a470a:	ea80 0202 	eor.w	r2, r0, r2
 80a470e:	ea81 0303 	eor.w	r3, r1, r3
 80a4712:	ea82 0000 	eor.w	r0, r2, r0
 80a4716:	ea83 0101 	eor.w	r1, r3, r1
 80a471a:	ea80 0202 	eor.w	r2, r0, r2
 80a471e:	ea81 0303 	eor.w	r3, r1, r3
 80a4722:	2d36      	cmp	r5, #54	; 0x36
 80a4724:	bf88      	it	hi
 80a4726:	bd30      	pophi	{r4, r5, pc}
 80a4728:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a472c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4730:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a4734:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a4738:	d002      	beq.n	80a4740 <__adddf3+0x70>
 80a473a:	4240      	negs	r0, r0
 80a473c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4740:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a4744:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4748:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a474c:	d002      	beq.n	80a4754 <__adddf3+0x84>
 80a474e:	4252      	negs	r2, r2
 80a4750:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a4754:	ea94 0f05 	teq	r4, r5
 80a4758:	f000 80a7 	beq.w	80a48aa <__adddf3+0x1da>
 80a475c:	f1a4 0401 	sub.w	r4, r4, #1
 80a4760:	f1d5 0e20 	rsbs	lr, r5, #32
 80a4764:	db0d      	blt.n	80a4782 <__adddf3+0xb2>
 80a4766:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a476a:	fa22 f205 	lsr.w	r2, r2, r5
 80a476e:	1880      	adds	r0, r0, r2
 80a4770:	f141 0100 	adc.w	r1, r1, #0
 80a4774:	fa03 f20e 	lsl.w	r2, r3, lr
 80a4778:	1880      	adds	r0, r0, r2
 80a477a:	fa43 f305 	asr.w	r3, r3, r5
 80a477e:	4159      	adcs	r1, r3
 80a4780:	e00e      	b.n	80a47a0 <__adddf3+0xd0>
 80a4782:	f1a5 0520 	sub.w	r5, r5, #32
 80a4786:	f10e 0e20 	add.w	lr, lr, #32
 80a478a:	2a01      	cmp	r2, #1
 80a478c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a4790:	bf28      	it	cs
 80a4792:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a4796:	fa43 f305 	asr.w	r3, r3, r5
 80a479a:	18c0      	adds	r0, r0, r3
 80a479c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a47a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a47a4:	d507      	bpl.n	80a47b6 <__adddf3+0xe6>
 80a47a6:	f04f 0e00 	mov.w	lr, #0
 80a47aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80a47ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a47b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80a47b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a47ba:	d31b      	bcc.n	80a47f4 <__adddf3+0x124>
 80a47bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a47c0:	d30c      	bcc.n	80a47dc <__adddf3+0x10c>
 80a47c2:	0849      	lsrs	r1, r1, #1
 80a47c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80a47c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a47cc:	f104 0401 	add.w	r4, r4, #1
 80a47d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a47d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a47d8:	f080 809a 	bcs.w	80a4910 <__adddf3+0x240>
 80a47dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a47e0:	bf08      	it	eq
 80a47e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a47e6:	f150 0000 	adcs.w	r0, r0, #0
 80a47ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a47ee:	ea41 0105 	orr.w	r1, r1, r5
 80a47f2:	bd30      	pop	{r4, r5, pc}
 80a47f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a47f8:	4140      	adcs	r0, r0
 80a47fa:	eb41 0101 	adc.w	r1, r1, r1
 80a47fe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4802:	f1a4 0401 	sub.w	r4, r4, #1
 80a4806:	d1e9      	bne.n	80a47dc <__adddf3+0x10c>
 80a4808:	f091 0f00 	teq	r1, #0
 80a480c:	bf04      	itt	eq
 80a480e:	4601      	moveq	r1, r0
 80a4810:	2000      	moveq	r0, #0
 80a4812:	fab1 f381 	clz	r3, r1
 80a4816:	bf08      	it	eq
 80a4818:	3320      	addeq	r3, #32
 80a481a:	f1a3 030b 	sub.w	r3, r3, #11
 80a481e:	f1b3 0220 	subs.w	r2, r3, #32
 80a4822:	da0c      	bge.n	80a483e <__adddf3+0x16e>
 80a4824:	320c      	adds	r2, #12
 80a4826:	dd08      	ble.n	80a483a <__adddf3+0x16a>
 80a4828:	f102 0c14 	add.w	ip, r2, #20
 80a482c:	f1c2 020c 	rsb	r2, r2, #12
 80a4830:	fa01 f00c 	lsl.w	r0, r1, ip
 80a4834:	fa21 f102 	lsr.w	r1, r1, r2
 80a4838:	e00c      	b.n	80a4854 <__adddf3+0x184>
 80a483a:	f102 0214 	add.w	r2, r2, #20
 80a483e:	bfd8      	it	le
 80a4840:	f1c2 0c20 	rsble	ip, r2, #32
 80a4844:	fa01 f102 	lsl.w	r1, r1, r2
 80a4848:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a484c:	bfdc      	itt	le
 80a484e:	ea41 010c 	orrle.w	r1, r1, ip
 80a4852:	4090      	lslle	r0, r2
 80a4854:	1ae4      	subs	r4, r4, r3
 80a4856:	bfa2      	ittt	ge
 80a4858:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a485c:	4329      	orrge	r1, r5
 80a485e:	bd30      	popge	{r4, r5, pc}
 80a4860:	ea6f 0404 	mvn.w	r4, r4
 80a4864:	3c1f      	subs	r4, #31
 80a4866:	da1c      	bge.n	80a48a2 <__adddf3+0x1d2>
 80a4868:	340c      	adds	r4, #12
 80a486a:	dc0e      	bgt.n	80a488a <__adddf3+0x1ba>
 80a486c:	f104 0414 	add.w	r4, r4, #20
 80a4870:	f1c4 0220 	rsb	r2, r4, #32
 80a4874:	fa20 f004 	lsr.w	r0, r0, r4
 80a4878:	fa01 f302 	lsl.w	r3, r1, r2
 80a487c:	ea40 0003 	orr.w	r0, r0, r3
 80a4880:	fa21 f304 	lsr.w	r3, r1, r4
 80a4884:	ea45 0103 	orr.w	r1, r5, r3
 80a4888:	bd30      	pop	{r4, r5, pc}
 80a488a:	f1c4 040c 	rsb	r4, r4, #12
 80a488e:	f1c4 0220 	rsb	r2, r4, #32
 80a4892:	fa20 f002 	lsr.w	r0, r0, r2
 80a4896:	fa01 f304 	lsl.w	r3, r1, r4
 80a489a:	ea40 0003 	orr.w	r0, r0, r3
 80a489e:	4629      	mov	r1, r5
 80a48a0:	bd30      	pop	{r4, r5, pc}
 80a48a2:	fa21 f004 	lsr.w	r0, r1, r4
 80a48a6:	4629      	mov	r1, r5
 80a48a8:	bd30      	pop	{r4, r5, pc}
 80a48aa:	f094 0f00 	teq	r4, #0
 80a48ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a48b2:	bf06      	itte	eq
 80a48b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a48b8:	3401      	addeq	r4, #1
 80a48ba:	3d01      	subne	r5, #1
 80a48bc:	e74e      	b.n	80a475c <__adddf3+0x8c>
 80a48be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a48c2:	bf18      	it	ne
 80a48c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a48c8:	d029      	beq.n	80a491e <__adddf3+0x24e>
 80a48ca:	ea94 0f05 	teq	r4, r5
 80a48ce:	bf08      	it	eq
 80a48d0:	ea90 0f02 	teqeq	r0, r2
 80a48d4:	d005      	beq.n	80a48e2 <__adddf3+0x212>
 80a48d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80a48da:	bf04      	itt	eq
 80a48dc:	4619      	moveq	r1, r3
 80a48de:	4610      	moveq	r0, r2
 80a48e0:	bd30      	pop	{r4, r5, pc}
 80a48e2:	ea91 0f03 	teq	r1, r3
 80a48e6:	bf1e      	ittt	ne
 80a48e8:	2100      	movne	r1, #0
 80a48ea:	2000      	movne	r0, #0
 80a48ec:	bd30      	popne	{r4, r5, pc}
 80a48ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a48f2:	d105      	bne.n	80a4900 <__adddf3+0x230>
 80a48f4:	0040      	lsls	r0, r0, #1
 80a48f6:	4149      	adcs	r1, r1
 80a48f8:	bf28      	it	cs
 80a48fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a48fe:	bd30      	pop	{r4, r5, pc}
 80a4900:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a4904:	bf3c      	itt	cc
 80a4906:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a490a:	bd30      	popcc	{r4, r5, pc}
 80a490c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4910:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a4914:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4918:	f04f 0000 	mov.w	r0, #0
 80a491c:	bd30      	pop	{r4, r5, pc}
 80a491e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a4922:	bf1a      	itte	ne
 80a4924:	4619      	movne	r1, r3
 80a4926:	4610      	movne	r0, r2
 80a4928:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a492c:	bf1c      	itt	ne
 80a492e:	460b      	movne	r3, r1
 80a4930:	4602      	movne	r2, r0
 80a4932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4936:	bf06      	itte	eq
 80a4938:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a493c:	ea91 0f03 	teqeq	r1, r3
 80a4940:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a4944:	bd30      	pop	{r4, r5, pc}
 80a4946:	bf00      	nop

080a4948 <__aeabi_ui2d>:
 80a4948:	f090 0f00 	teq	r0, #0
 80a494c:	bf04      	itt	eq
 80a494e:	2100      	moveq	r1, #0
 80a4950:	4770      	bxeq	lr
 80a4952:	b530      	push	{r4, r5, lr}
 80a4954:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4958:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a495c:	f04f 0500 	mov.w	r5, #0
 80a4960:	f04f 0100 	mov.w	r1, #0
 80a4964:	e750      	b.n	80a4808 <__adddf3+0x138>
 80a4966:	bf00      	nop

080a4968 <__aeabi_i2d>:
 80a4968:	f090 0f00 	teq	r0, #0
 80a496c:	bf04      	itt	eq
 80a496e:	2100      	moveq	r1, #0
 80a4970:	4770      	bxeq	lr
 80a4972:	b530      	push	{r4, r5, lr}
 80a4974:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4978:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a497c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a4980:	bf48      	it	mi
 80a4982:	4240      	negmi	r0, r0
 80a4984:	f04f 0100 	mov.w	r1, #0
 80a4988:	e73e      	b.n	80a4808 <__adddf3+0x138>
 80a498a:	bf00      	nop

080a498c <__aeabi_f2d>:
 80a498c:	0042      	lsls	r2, r0, #1
 80a498e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a4992:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4996:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a499a:	bf1f      	itttt	ne
 80a499c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a49a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a49a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a49a8:	4770      	bxne	lr
 80a49aa:	f092 0f00 	teq	r2, #0
 80a49ae:	bf14      	ite	ne
 80a49b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a49b4:	4770      	bxeq	lr
 80a49b6:	b530      	push	{r4, r5, lr}
 80a49b8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a49bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a49c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a49c4:	e720      	b.n	80a4808 <__adddf3+0x138>
 80a49c6:	bf00      	nop

080a49c8 <__aeabi_ul2d>:
 80a49c8:	ea50 0201 	orrs.w	r2, r0, r1
 80a49cc:	bf08      	it	eq
 80a49ce:	4770      	bxeq	lr
 80a49d0:	b530      	push	{r4, r5, lr}
 80a49d2:	f04f 0500 	mov.w	r5, #0
 80a49d6:	e00a      	b.n	80a49ee <__aeabi_l2d+0x16>

080a49d8 <__aeabi_l2d>:
 80a49d8:	ea50 0201 	orrs.w	r2, r0, r1
 80a49dc:	bf08      	it	eq
 80a49de:	4770      	bxeq	lr
 80a49e0:	b530      	push	{r4, r5, lr}
 80a49e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a49e6:	d502      	bpl.n	80a49ee <__aeabi_l2d+0x16>
 80a49e8:	4240      	negs	r0, r0
 80a49ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a49ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a49f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a49f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a49fa:	f43f aedc 	beq.w	80a47b6 <__adddf3+0xe6>
 80a49fe:	f04f 0203 	mov.w	r2, #3
 80a4a02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a4a06:	bf18      	it	ne
 80a4a08:	3203      	addne	r2, #3
 80a4a0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a4a0e:	bf18      	it	ne
 80a4a10:	3203      	addne	r2, #3
 80a4a12:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a4a16:	f1c2 0320 	rsb	r3, r2, #32
 80a4a1a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a4a1e:	fa20 f002 	lsr.w	r0, r0, r2
 80a4a22:	fa01 fe03 	lsl.w	lr, r1, r3
 80a4a26:	ea40 000e 	orr.w	r0, r0, lr
 80a4a2a:	fa21 f102 	lsr.w	r1, r1, r2
 80a4a2e:	4414      	add	r4, r2
 80a4a30:	e6c1      	b.n	80a47b6 <__adddf3+0xe6>
 80a4a32:	bf00      	nop

080a4a34 <__aeabi_dmul>:
 80a4a34:	b570      	push	{r4, r5, r6, lr}
 80a4a36:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4a3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4a3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4a42:	bf1d      	ittte	ne
 80a4a44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4a48:	ea94 0f0c 	teqne	r4, ip
 80a4a4c:	ea95 0f0c 	teqne	r5, ip
 80a4a50:	f000 f8de 	bleq	80a4c10 <__aeabi_dmul+0x1dc>
 80a4a54:	442c      	add	r4, r5
 80a4a56:	ea81 0603 	eor.w	r6, r1, r3
 80a4a5a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a4a5e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a4a62:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a4a66:	bf18      	it	ne
 80a4a68:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a4a6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4a70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a4a74:	d038      	beq.n	80a4ae8 <__aeabi_dmul+0xb4>
 80a4a76:	fba0 ce02 	umull	ip, lr, r0, r2
 80a4a7a:	f04f 0500 	mov.w	r5, #0
 80a4a7e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a4a82:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a4a86:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a4a8a:	f04f 0600 	mov.w	r6, #0
 80a4a8e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a4a92:	f09c 0f00 	teq	ip, #0
 80a4a96:	bf18      	it	ne
 80a4a98:	f04e 0e01 	orrne.w	lr, lr, #1
 80a4a9c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a4aa0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a4aa4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a4aa8:	d204      	bcs.n	80a4ab4 <__aeabi_dmul+0x80>
 80a4aaa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a4aae:	416d      	adcs	r5, r5
 80a4ab0:	eb46 0606 	adc.w	r6, r6, r6
 80a4ab4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a4ab8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a4abc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a4ac0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a4ac4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a4ac8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4acc:	bf88      	it	hi
 80a4ace:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4ad2:	d81e      	bhi.n	80a4b12 <__aeabi_dmul+0xde>
 80a4ad4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a4ad8:	bf08      	it	eq
 80a4ada:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a4ade:	f150 0000 	adcs.w	r0, r0, #0
 80a4ae2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4ae6:	bd70      	pop	{r4, r5, r6, pc}
 80a4ae8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a4aec:	ea46 0101 	orr.w	r1, r6, r1
 80a4af0:	ea40 0002 	orr.w	r0, r0, r2
 80a4af4:	ea81 0103 	eor.w	r1, r1, r3
 80a4af8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a4afc:	bfc2      	ittt	gt
 80a4afe:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4b02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4b06:	bd70      	popgt	{r4, r5, r6, pc}
 80a4b08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4b0c:	f04f 0e00 	mov.w	lr, #0
 80a4b10:	3c01      	subs	r4, #1
 80a4b12:	f300 80ab 	bgt.w	80a4c6c <__aeabi_dmul+0x238>
 80a4b16:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a4b1a:	bfde      	ittt	le
 80a4b1c:	2000      	movle	r0, #0
 80a4b1e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a4b22:	bd70      	pople	{r4, r5, r6, pc}
 80a4b24:	f1c4 0400 	rsb	r4, r4, #0
 80a4b28:	3c20      	subs	r4, #32
 80a4b2a:	da35      	bge.n	80a4b98 <__aeabi_dmul+0x164>
 80a4b2c:	340c      	adds	r4, #12
 80a4b2e:	dc1b      	bgt.n	80a4b68 <__aeabi_dmul+0x134>
 80a4b30:	f104 0414 	add.w	r4, r4, #20
 80a4b34:	f1c4 0520 	rsb	r5, r4, #32
 80a4b38:	fa00 f305 	lsl.w	r3, r0, r5
 80a4b3c:	fa20 f004 	lsr.w	r0, r0, r4
 80a4b40:	fa01 f205 	lsl.w	r2, r1, r5
 80a4b44:	ea40 0002 	orr.w	r0, r0, r2
 80a4b48:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a4b4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4b50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4b54:	fa21 f604 	lsr.w	r6, r1, r4
 80a4b58:	eb42 0106 	adc.w	r1, r2, r6
 80a4b5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4b60:	bf08      	it	eq
 80a4b62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4b66:	bd70      	pop	{r4, r5, r6, pc}
 80a4b68:	f1c4 040c 	rsb	r4, r4, #12
 80a4b6c:	f1c4 0520 	rsb	r5, r4, #32
 80a4b70:	fa00 f304 	lsl.w	r3, r0, r4
 80a4b74:	fa20 f005 	lsr.w	r0, r0, r5
 80a4b78:	fa01 f204 	lsl.w	r2, r1, r4
 80a4b7c:	ea40 0002 	orr.w	r0, r0, r2
 80a4b80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4b84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4b88:	f141 0100 	adc.w	r1, r1, #0
 80a4b8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4b90:	bf08      	it	eq
 80a4b92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4b96:	bd70      	pop	{r4, r5, r6, pc}
 80a4b98:	f1c4 0520 	rsb	r5, r4, #32
 80a4b9c:	fa00 f205 	lsl.w	r2, r0, r5
 80a4ba0:	ea4e 0e02 	orr.w	lr, lr, r2
 80a4ba4:	fa20 f304 	lsr.w	r3, r0, r4
 80a4ba8:	fa01 f205 	lsl.w	r2, r1, r5
 80a4bac:	ea43 0302 	orr.w	r3, r3, r2
 80a4bb0:	fa21 f004 	lsr.w	r0, r1, r4
 80a4bb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4bb8:	fa21 f204 	lsr.w	r2, r1, r4
 80a4bbc:	ea20 0002 	bic.w	r0, r0, r2
 80a4bc0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a4bc4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4bc8:	bf08      	it	eq
 80a4bca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4bce:	bd70      	pop	{r4, r5, r6, pc}
 80a4bd0:	f094 0f00 	teq	r4, #0
 80a4bd4:	d10f      	bne.n	80a4bf6 <__aeabi_dmul+0x1c2>
 80a4bd6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a4bda:	0040      	lsls	r0, r0, #1
 80a4bdc:	eb41 0101 	adc.w	r1, r1, r1
 80a4be0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4be4:	bf08      	it	eq
 80a4be6:	3c01      	subeq	r4, #1
 80a4be8:	d0f7      	beq.n	80a4bda <__aeabi_dmul+0x1a6>
 80a4bea:	ea41 0106 	orr.w	r1, r1, r6
 80a4bee:	f095 0f00 	teq	r5, #0
 80a4bf2:	bf18      	it	ne
 80a4bf4:	4770      	bxne	lr
 80a4bf6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a4bfa:	0052      	lsls	r2, r2, #1
 80a4bfc:	eb43 0303 	adc.w	r3, r3, r3
 80a4c00:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a4c04:	bf08      	it	eq
 80a4c06:	3d01      	subeq	r5, #1
 80a4c08:	d0f7      	beq.n	80a4bfa <__aeabi_dmul+0x1c6>
 80a4c0a:	ea43 0306 	orr.w	r3, r3, r6
 80a4c0e:	4770      	bx	lr
 80a4c10:	ea94 0f0c 	teq	r4, ip
 80a4c14:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a4c18:	bf18      	it	ne
 80a4c1a:	ea95 0f0c 	teqne	r5, ip
 80a4c1e:	d00c      	beq.n	80a4c3a <__aeabi_dmul+0x206>
 80a4c20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4c24:	bf18      	it	ne
 80a4c26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4c2a:	d1d1      	bne.n	80a4bd0 <__aeabi_dmul+0x19c>
 80a4c2c:	ea81 0103 	eor.w	r1, r1, r3
 80a4c30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4c34:	f04f 0000 	mov.w	r0, #0
 80a4c38:	bd70      	pop	{r4, r5, r6, pc}
 80a4c3a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4c3e:	bf06      	itte	eq
 80a4c40:	4610      	moveq	r0, r2
 80a4c42:	4619      	moveq	r1, r3
 80a4c44:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4c48:	d019      	beq.n	80a4c7e <__aeabi_dmul+0x24a>
 80a4c4a:	ea94 0f0c 	teq	r4, ip
 80a4c4e:	d102      	bne.n	80a4c56 <__aeabi_dmul+0x222>
 80a4c50:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a4c54:	d113      	bne.n	80a4c7e <__aeabi_dmul+0x24a>
 80a4c56:	ea95 0f0c 	teq	r5, ip
 80a4c5a:	d105      	bne.n	80a4c68 <__aeabi_dmul+0x234>
 80a4c5c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a4c60:	bf1c      	itt	ne
 80a4c62:	4610      	movne	r0, r2
 80a4c64:	4619      	movne	r1, r3
 80a4c66:	d10a      	bne.n	80a4c7e <__aeabi_dmul+0x24a>
 80a4c68:	ea81 0103 	eor.w	r1, r1, r3
 80a4c6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4c70:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4c74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4c78:	f04f 0000 	mov.w	r0, #0
 80a4c7c:	bd70      	pop	{r4, r5, r6, pc}
 80a4c7e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4c82:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a4c86:	bd70      	pop	{r4, r5, r6, pc}

080a4c88 <__aeabi_ddiv>:
 80a4c88:	b570      	push	{r4, r5, r6, lr}
 80a4c8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4c8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4c92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4c96:	bf1d      	ittte	ne
 80a4c98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4c9c:	ea94 0f0c 	teqne	r4, ip
 80a4ca0:	ea95 0f0c 	teqne	r5, ip
 80a4ca4:	f000 f8a7 	bleq	80a4df6 <__aeabi_ddiv+0x16e>
 80a4ca8:	eba4 0405 	sub.w	r4, r4, r5
 80a4cac:	ea81 0e03 	eor.w	lr, r1, r3
 80a4cb0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4cb4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4cb8:	f000 8088 	beq.w	80a4dcc <__aeabi_ddiv+0x144>
 80a4cbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4cc0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a4cc4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a4cc8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a4ccc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a4cd0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a4cd4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a4cd8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a4cdc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a4ce0:	429d      	cmp	r5, r3
 80a4ce2:	bf08      	it	eq
 80a4ce4:	4296      	cmpeq	r6, r2
 80a4ce6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a4cea:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a4cee:	d202      	bcs.n	80a4cf6 <__aeabi_ddiv+0x6e>
 80a4cf0:	085b      	lsrs	r3, r3, #1
 80a4cf2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4cf6:	1ab6      	subs	r6, r6, r2
 80a4cf8:	eb65 0503 	sbc.w	r5, r5, r3
 80a4cfc:	085b      	lsrs	r3, r3, #1
 80a4cfe:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4d02:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a4d06:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a4d0a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4d0e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4d12:	bf22      	ittt	cs
 80a4d14:	1ab6      	subcs	r6, r6, r2
 80a4d16:	4675      	movcs	r5, lr
 80a4d18:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4d1c:	085b      	lsrs	r3, r3, #1
 80a4d1e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4d22:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4d26:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4d2a:	bf22      	ittt	cs
 80a4d2c:	1ab6      	subcs	r6, r6, r2
 80a4d2e:	4675      	movcs	r5, lr
 80a4d30:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4d34:	085b      	lsrs	r3, r3, #1
 80a4d36:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4d3a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4d3e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4d42:	bf22      	ittt	cs
 80a4d44:	1ab6      	subcs	r6, r6, r2
 80a4d46:	4675      	movcs	r5, lr
 80a4d48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4d4c:	085b      	lsrs	r3, r3, #1
 80a4d4e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4d52:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4d56:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4d5a:	bf22      	ittt	cs
 80a4d5c:	1ab6      	subcs	r6, r6, r2
 80a4d5e:	4675      	movcs	r5, lr
 80a4d60:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4d64:	ea55 0e06 	orrs.w	lr, r5, r6
 80a4d68:	d018      	beq.n	80a4d9c <__aeabi_ddiv+0x114>
 80a4d6a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a4d6e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a4d72:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a4d76:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a4d7a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a4d7e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a4d82:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a4d86:	d1c0      	bne.n	80a4d0a <__aeabi_ddiv+0x82>
 80a4d88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4d8c:	d10b      	bne.n	80a4da6 <__aeabi_ddiv+0x11e>
 80a4d8e:	ea41 0100 	orr.w	r1, r1, r0
 80a4d92:	f04f 0000 	mov.w	r0, #0
 80a4d96:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a4d9a:	e7b6      	b.n	80a4d0a <__aeabi_ddiv+0x82>
 80a4d9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4da0:	bf04      	itt	eq
 80a4da2:	4301      	orreq	r1, r0
 80a4da4:	2000      	moveq	r0, #0
 80a4da6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4daa:	bf88      	it	hi
 80a4dac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4db0:	f63f aeaf 	bhi.w	80a4b12 <__aeabi_dmul+0xde>
 80a4db4:	ebb5 0c03 	subs.w	ip, r5, r3
 80a4db8:	bf04      	itt	eq
 80a4dba:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a4dbe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4dc2:	f150 0000 	adcs.w	r0, r0, #0
 80a4dc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4dca:	bd70      	pop	{r4, r5, r6, pc}
 80a4dcc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a4dd0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a4dd4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a4dd8:	bfc2      	ittt	gt
 80a4dda:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4dde:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4de2:	bd70      	popgt	{r4, r5, r6, pc}
 80a4de4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4de8:	f04f 0e00 	mov.w	lr, #0
 80a4dec:	3c01      	subs	r4, #1
 80a4dee:	e690      	b.n	80a4b12 <__aeabi_dmul+0xde>
 80a4df0:	ea45 0e06 	orr.w	lr, r5, r6
 80a4df4:	e68d      	b.n	80a4b12 <__aeabi_dmul+0xde>
 80a4df6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a4dfa:	ea94 0f0c 	teq	r4, ip
 80a4dfe:	bf08      	it	eq
 80a4e00:	ea95 0f0c 	teqeq	r5, ip
 80a4e04:	f43f af3b 	beq.w	80a4c7e <__aeabi_dmul+0x24a>
 80a4e08:	ea94 0f0c 	teq	r4, ip
 80a4e0c:	d10a      	bne.n	80a4e24 <__aeabi_ddiv+0x19c>
 80a4e0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4e12:	f47f af34 	bne.w	80a4c7e <__aeabi_dmul+0x24a>
 80a4e16:	ea95 0f0c 	teq	r5, ip
 80a4e1a:	f47f af25 	bne.w	80a4c68 <__aeabi_dmul+0x234>
 80a4e1e:	4610      	mov	r0, r2
 80a4e20:	4619      	mov	r1, r3
 80a4e22:	e72c      	b.n	80a4c7e <__aeabi_dmul+0x24a>
 80a4e24:	ea95 0f0c 	teq	r5, ip
 80a4e28:	d106      	bne.n	80a4e38 <__aeabi_ddiv+0x1b0>
 80a4e2a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4e2e:	f43f aefd 	beq.w	80a4c2c <__aeabi_dmul+0x1f8>
 80a4e32:	4610      	mov	r0, r2
 80a4e34:	4619      	mov	r1, r3
 80a4e36:	e722      	b.n	80a4c7e <__aeabi_dmul+0x24a>
 80a4e38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4e3c:	bf18      	it	ne
 80a4e3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4e42:	f47f aec5 	bne.w	80a4bd0 <__aeabi_dmul+0x19c>
 80a4e46:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a4e4a:	f47f af0d 	bne.w	80a4c68 <__aeabi_dmul+0x234>
 80a4e4e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a4e52:	f47f aeeb 	bne.w	80a4c2c <__aeabi_dmul+0x1f8>
 80a4e56:	e712      	b.n	80a4c7e <__aeabi_dmul+0x24a>

080a4e58 <__gedf2>:
 80a4e58:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a4e5c:	e006      	b.n	80a4e6c <__cmpdf2+0x4>
 80a4e5e:	bf00      	nop

080a4e60 <__ledf2>:
 80a4e60:	f04f 0c01 	mov.w	ip, #1
 80a4e64:	e002      	b.n	80a4e6c <__cmpdf2+0x4>
 80a4e66:	bf00      	nop

080a4e68 <__cmpdf2>:
 80a4e68:	f04f 0c01 	mov.w	ip, #1
 80a4e6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4e70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4e74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4e78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4e7c:	bf18      	it	ne
 80a4e7e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a4e82:	d01b      	beq.n	80a4ebc <__cmpdf2+0x54>
 80a4e84:	b001      	add	sp, #4
 80a4e86:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a4e8a:	bf0c      	ite	eq
 80a4e8c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a4e90:	ea91 0f03 	teqne	r1, r3
 80a4e94:	bf02      	ittt	eq
 80a4e96:	ea90 0f02 	teqeq	r0, r2
 80a4e9a:	2000      	moveq	r0, #0
 80a4e9c:	4770      	bxeq	lr
 80a4e9e:	f110 0f00 	cmn.w	r0, #0
 80a4ea2:	ea91 0f03 	teq	r1, r3
 80a4ea6:	bf58      	it	pl
 80a4ea8:	4299      	cmppl	r1, r3
 80a4eaa:	bf08      	it	eq
 80a4eac:	4290      	cmpeq	r0, r2
 80a4eae:	bf2c      	ite	cs
 80a4eb0:	17d8      	asrcs	r0, r3, #31
 80a4eb2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a4eb6:	f040 0001 	orr.w	r0, r0, #1
 80a4eba:	4770      	bx	lr
 80a4ebc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4ec0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4ec4:	d102      	bne.n	80a4ecc <__cmpdf2+0x64>
 80a4ec6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a4eca:	d107      	bne.n	80a4edc <__cmpdf2+0x74>
 80a4ecc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4ed0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4ed4:	d1d6      	bne.n	80a4e84 <__cmpdf2+0x1c>
 80a4ed6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a4eda:	d0d3      	beq.n	80a4e84 <__cmpdf2+0x1c>
 80a4edc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a4ee0:	4770      	bx	lr
 80a4ee2:	bf00      	nop

080a4ee4 <__aeabi_cdrcmple>:
 80a4ee4:	4684      	mov	ip, r0
 80a4ee6:	4610      	mov	r0, r2
 80a4ee8:	4662      	mov	r2, ip
 80a4eea:	468c      	mov	ip, r1
 80a4eec:	4619      	mov	r1, r3
 80a4eee:	4663      	mov	r3, ip
 80a4ef0:	e000      	b.n	80a4ef4 <__aeabi_cdcmpeq>
 80a4ef2:	bf00      	nop

080a4ef4 <__aeabi_cdcmpeq>:
 80a4ef4:	b501      	push	{r0, lr}
 80a4ef6:	f7ff ffb7 	bl	80a4e68 <__cmpdf2>
 80a4efa:	2800      	cmp	r0, #0
 80a4efc:	bf48      	it	mi
 80a4efe:	f110 0f00 	cmnmi.w	r0, #0
 80a4f02:	bd01      	pop	{r0, pc}

080a4f04 <__aeabi_dcmpeq>:
 80a4f04:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4f08:	f7ff fff4 	bl	80a4ef4 <__aeabi_cdcmpeq>
 80a4f0c:	bf0c      	ite	eq
 80a4f0e:	2001      	moveq	r0, #1
 80a4f10:	2000      	movne	r0, #0
 80a4f12:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4f16:	bf00      	nop

080a4f18 <__aeabi_dcmplt>:
 80a4f18:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4f1c:	f7ff ffea 	bl	80a4ef4 <__aeabi_cdcmpeq>
 80a4f20:	bf34      	ite	cc
 80a4f22:	2001      	movcc	r0, #1
 80a4f24:	2000      	movcs	r0, #0
 80a4f26:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4f2a:	bf00      	nop

080a4f2c <__aeabi_dcmple>:
 80a4f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4f30:	f7ff ffe0 	bl	80a4ef4 <__aeabi_cdcmpeq>
 80a4f34:	bf94      	ite	ls
 80a4f36:	2001      	movls	r0, #1
 80a4f38:	2000      	movhi	r0, #0
 80a4f3a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4f3e:	bf00      	nop

080a4f40 <__aeabi_dcmpge>:
 80a4f40:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4f44:	f7ff ffce 	bl	80a4ee4 <__aeabi_cdrcmple>
 80a4f48:	bf94      	ite	ls
 80a4f4a:	2001      	movls	r0, #1
 80a4f4c:	2000      	movhi	r0, #0
 80a4f4e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4f52:	bf00      	nop

080a4f54 <__aeabi_dcmpgt>:
 80a4f54:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4f58:	f7ff ffc4 	bl	80a4ee4 <__aeabi_cdrcmple>
 80a4f5c:	bf34      	ite	cc
 80a4f5e:	2001      	movcc	r0, #1
 80a4f60:	2000      	movcs	r0, #0
 80a4f62:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4f66:	bf00      	nop

080a4f68 <__aeabi_dcmpun>:
 80a4f68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4f6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4f70:	d102      	bne.n	80a4f78 <__aeabi_dcmpun+0x10>
 80a4f72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a4f76:	d10a      	bne.n	80a4f8e <__aeabi_dcmpun+0x26>
 80a4f78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4f7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4f80:	d102      	bne.n	80a4f88 <__aeabi_dcmpun+0x20>
 80a4f82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a4f86:	d102      	bne.n	80a4f8e <__aeabi_dcmpun+0x26>
 80a4f88:	f04f 0000 	mov.w	r0, #0
 80a4f8c:	4770      	bx	lr
 80a4f8e:	f04f 0001 	mov.w	r0, #1
 80a4f92:	4770      	bx	lr

080a4f94 <__aeabi_d2iz>:
 80a4f94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a4f98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a4f9c:	d215      	bcs.n	80a4fca <__aeabi_d2iz+0x36>
 80a4f9e:	d511      	bpl.n	80a4fc4 <__aeabi_d2iz+0x30>
 80a4fa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a4fa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a4fa8:	d912      	bls.n	80a4fd0 <__aeabi_d2iz+0x3c>
 80a4faa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4fae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4fb2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a4fb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4fba:	fa23 f002 	lsr.w	r0, r3, r2
 80a4fbe:	bf18      	it	ne
 80a4fc0:	4240      	negne	r0, r0
 80a4fc2:	4770      	bx	lr
 80a4fc4:	f04f 0000 	mov.w	r0, #0
 80a4fc8:	4770      	bx	lr
 80a4fca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a4fce:	d105      	bne.n	80a4fdc <__aeabi_d2iz+0x48>
 80a4fd0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a4fd4:	bf08      	it	eq
 80a4fd6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a4fda:	4770      	bx	lr
 80a4fdc:	f04f 0000 	mov.w	r0, #0
 80a4fe0:	4770      	bx	lr
 80a4fe2:	bf00      	nop

080a4fe4 <__aeabi_d2uiz>:
 80a4fe4:	004a      	lsls	r2, r1, #1
 80a4fe6:	d211      	bcs.n	80a500c <__aeabi_d2uiz+0x28>
 80a4fe8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a4fec:	d211      	bcs.n	80a5012 <__aeabi_d2uiz+0x2e>
 80a4fee:	d50d      	bpl.n	80a500c <__aeabi_d2uiz+0x28>
 80a4ff0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a4ff4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a4ff8:	d40e      	bmi.n	80a5018 <__aeabi_d2uiz+0x34>
 80a4ffa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4ffe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5002:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a5006:	fa23 f002 	lsr.w	r0, r3, r2
 80a500a:	4770      	bx	lr
 80a500c:	f04f 0000 	mov.w	r0, #0
 80a5010:	4770      	bx	lr
 80a5012:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a5016:	d102      	bne.n	80a501e <__aeabi_d2uiz+0x3a>
 80a5018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a501c:	4770      	bx	lr
 80a501e:	f04f 0000 	mov.w	r0, #0
 80a5022:	4770      	bx	lr

080a5024 <__aeabi_d2f>:
 80a5024:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a5028:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a502c:	bf24      	itt	cs
 80a502e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a5032:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a5036:	d90d      	bls.n	80a5054 <__aeabi_d2f+0x30>
 80a5038:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a503c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a5040:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a5044:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a5048:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a504c:	bf08      	it	eq
 80a504e:	f020 0001 	biceq.w	r0, r0, #1
 80a5052:	4770      	bx	lr
 80a5054:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a5058:	d121      	bne.n	80a509e <__aeabi_d2f+0x7a>
 80a505a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a505e:	bfbc      	itt	lt
 80a5060:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a5064:	4770      	bxlt	lr
 80a5066:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a506a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a506e:	f1c2 0218 	rsb	r2, r2, #24
 80a5072:	f1c2 0c20 	rsb	ip, r2, #32
 80a5076:	fa10 f30c 	lsls.w	r3, r0, ip
 80a507a:	fa20 f002 	lsr.w	r0, r0, r2
 80a507e:	bf18      	it	ne
 80a5080:	f040 0001 	orrne.w	r0, r0, #1
 80a5084:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5088:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a508c:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a5090:	ea40 000c 	orr.w	r0, r0, ip
 80a5094:	fa23 f302 	lsr.w	r3, r3, r2
 80a5098:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a509c:	e7cc      	b.n	80a5038 <__aeabi_d2f+0x14>
 80a509e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a50a2:	d107      	bne.n	80a50b4 <__aeabi_d2f+0x90>
 80a50a4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a50a8:	bf1e      	ittt	ne
 80a50aa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a50ae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a50b2:	4770      	bxne	lr
 80a50b4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a50b8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a50bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a50c0:	4770      	bx	lr
 80a50c2:	bf00      	nop

080a50c4 <__aeabi_frsub>:
 80a50c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a50c8:	e002      	b.n	80a50d0 <__addsf3>
 80a50ca:	bf00      	nop

080a50cc <__aeabi_fsub>:
 80a50cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a50d0 <__addsf3>:
 80a50d0:	0042      	lsls	r2, r0, #1
 80a50d2:	bf1f      	itttt	ne
 80a50d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a50d8:	ea92 0f03 	teqne	r2, r3
 80a50dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a50e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a50e4:	d06a      	beq.n	80a51bc <__addsf3+0xec>
 80a50e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a50ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a50ee:	bfc1      	itttt	gt
 80a50f0:	18d2      	addgt	r2, r2, r3
 80a50f2:	4041      	eorgt	r1, r0
 80a50f4:	4048      	eorgt	r0, r1
 80a50f6:	4041      	eorgt	r1, r0
 80a50f8:	bfb8      	it	lt
 80a50fa:	425b      	neglt	r3, r3
 80a50fc:	2b19      	cmp	r3, #25
 80a50fe:	bf88      	it	hi
 80a5100:	4770      	bxhi	lr
 80a5102:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a5106:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a510a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a510e:	bf18      	it	ne
 80a5110:	4240      	negne	r0, r0
 80a5112:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5116:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a511a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a511e:	bf18      	it	ne
 80a5120:	4249      	negne	r1, r1
 80a5122:	ea92 0f03 	teq	r2, r3
 80a5126:	d03f      	beq.n	80a51a8 <__addsf3+0xd8>
 80a5128:	f1a2 0201 	sub.w	r2, r2, #1
 80a512c:	fa41 fc03 	asr.w	ip, r1, r3
 80a5130:	eb10 000c 	adds.w	r0, r0, ip
 80a5134:	f1c3 0320 	rsb	r3, r3, #32
 80a5138:	fa01 f103 	lsl.w	r1, r1, r3
 80a513c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a5140:	d502      	bpl.n	80a5148 <__addsf3+0x78>
 80a5142:	4249      	negs	r1, r1
 80a5144:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a5148:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a514c:	d313      	bcc.n	80a5176 <__addsf3+0xa6>
 80a514e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a5152:	d306      	bcc.n	80a5162 <__addsf3+0x92>
 80a5154:	0840      	lsrs	r0, r0, #1
 80a5156:	ea4f 0131 	mov.w	r1, r1, rrx
 80a515a:	f102 0201 	add.w	r2, r2, #1
 80a515e:	2afe      	cmp	r2, #254	; 0xfe
 80a5160:	d251      	bcs.n	80a5206 <__addsf3+0x136>
 80a5162:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a5166:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a516a:	bf08      	it	eq
 80a516c:	f020 0001 	biceq.w	r0, r0, #1
 80a5170:	ea40 0003 	orr.w	r0, r0, r3
 80a5174:	4770      	bx	lr
 80a5176:	0049      	lsls	r1, r1, #1
 80a5178:	eb40 0000 	adc.w	r0, r0, r0
 80a517c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a5180:	f1a2 0201 	sub.w	r2, r2, #1
 80a5184:	d1ed      	bne.n	80a5162 <__addsf3+0x92>
 80a5186:	fab0 fc80 	clz	ip, r0
 80a518a:	f1ac 0c08 	sub.w	ip, ip, #8
 80a518e:	ebb2 020c 	subs.w	r2, r2, ip
 80a5192:	fa00 f00c 	lsl.w	r0, r0, ip
 80a5196:	bfaa      	itet	ge
 80a5198:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a519c:	4252      	neglt	r2, r2
 80a519e:	4318      	orrge	r0, r3
 80a51a0:	bfbc      	itt	lt
 80a51a2:	40d0      	lsrlt	r0, r2
 80a51a4:	4318      	orrlt	r0, r3
 80a51a6:	4770      	bx	lr
 80a51a8:	f092 0f00 	teq	r2, #0
 80a51ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a51b0:	bf06      	itte	eq
 80a51b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a51b6:	3201      	addeq	r2, #1
 80a51b8:	3b01      	subne	r3, #1
 80a51ba:	e7b5      	b.n	80a5128 <__addsf3+0x58>
 80a51bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a51c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a51c4:	bf18      	it	ne
 80a51c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a51ca:	d021      	beq.n	80a5210 <__addsf3+0x140>
 80a51cc:	ea92 0f03 	teq	r2, r3
 80a51d0:	d004      	beq.n	80a51dc <__addsf3+0x10c>
 80a51d2:	f092 0f00 	teq	r2, #0
 80a51d6:	bf08      	it	eq
 80a51d8:	4608      	moveq	r0, r1
 80a51da:	4770      	bx	lr
 80a51dc:	ea90 0f01 	teq	r0, r1
 80a51e0:	bf1c      	itt	ne
 80a51e2:	2000      	movne	r0, #0
 80a51e4:	4770      	bxne	lr
 80a51e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a51ea:	d104      	bne.n	80a51f6 <__addsf3+0x126>
 80a51ec:	0040      	lsls	r0, r0, #1
 80a51ee:	bf28      	it	cs
 80a51f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a51f4:	4770      	bx	lr
 80a51f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a51fa:	bf3c      	itt	cc
 80a51fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a5200:	4770      	bxcc	lr
 80a5202:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a5206:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a520a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a520e:	4770      	bx	lr
 80a5210:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a5214:	bf16      	itet	ne
 80a5216:	4608      	movne	r0, r1
 80a5218:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a521c:	4601      	movne	r1, r0
 80a521e:	0242      	lsls	r2, r0, #9
 80a5220:	bf06      	itte	eq
 80a5222:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a5226:	ea90 0f01 	teqeq	r0, r1
 80a522a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a522e:	4770      	bx	lr

080a5230 <__aeabi_ui2f>:
 80a5230:	f04f 0300 	mov.w	r3, #0
 80a5234:	e004      	b.n	80a5240 <__aeabi_i2f+0x8>
 80a5236:	bf00      	nop

080a5238 <__aeabi_i2f>:
 80a5238:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a523c:	bf48      	it	mi
 80a523e:	4240      	negmi	r0, r0
 80a5240:	ea5f 0c00 	movs.w	ip, r0
 80a5244:	bf08      	it	eq
 80a5246:	4770      	bxeq	lr
 80a5248:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a524c:	4601      	mov	r1, r0
 80a524e:	f04f 0000 	mov.w	r0, #0
 80a5252:	e01c      	b.n	80a528e <__aeabi_l2f+0x2a>

080a5254 <__aeabi_ul2f>:
 80a5254:	ea50 0201 	orrs.w	r2, r0, r1
 80a5258:	bf08      	it	eq
 80a525a:	4770      	bxeq	lr
 80a525c:	f04f 0300 	mov.w	r3, #0
 80a5260:	e00a      	b.n	80a5278 <__aeabi_l2f+0x14>
 80a5262:	bf00      	nop

080a5264 <__aeabi_l2f>:
 80a5264:	ea50 0201 	orrs.w	r2, r0, r1
 80a5268:	bf08      	it	eq
 80a526a:	4770      	bxeq	lr
 80a526c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a5270:	d502      	bpl.n	80a5278 <__aeabi_l2f+0x14>
 80a5272:	4240      	negs	r0, r0
 80a5274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5278:	ea5f 0c01 	movs.w	ip, r1
 80a527c:	bf02      	ittt	eq
 80a527e:	4684      	moveq	ip, r0
 80a5280:	4601      	moveq	r1, r0
 80a5282:	2000      	moveq	r0, #0
 80a5284:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a5288:	bf08      	it	eq
 80a528a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a528e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a5292:	fabc f28c 	clz	r2, ip
 80a5296:	3a08      	subs	r2, #8
 80a5298:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a529c:	db10      	blt.n	80a52c0 <__aeabi_l2f+0x5c>
 80a529e:	fa01 fc02 	lsl.w	ip, r1, r2
 80a52a2:	4463      	add	r3, ip
 80a52a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80a52a8:	f1c2 0220 	rsb	r2, r2, #32
 80a52ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a52b0:	fa20 f202 	lsr.w	r2, r0, r2
 80a52b4:	eb43 0002 	adc.w	r0, r3, r2
 80a52b8:	bf08      	it	eq
 80a52ba:	f020 0001 	biceq.w	r0, r0, #1
 80a52be:	4770      	bx	lr
 80a52c0:	f102 0220 	add.w	r2, r2, #32
 80a52c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80a52c8:	f1c2 0220 	rsb	r2, r2, #32
 80a52cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a52d0:	fa21 f202 	lsr.w	r2, r1, r2
 80a52d4:	eb43 0002 	adc.w	r0, r3, r2
 80a52d8:	bf08      	it	eq
 80a52da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a52de:	4770      	bx	lr

080a52e0 <__aeabi_fmul>:
 80a52e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a52e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a52e8:	bf1e      	ittt	ne
 80a52ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a52ee:	ea92 0f0c 	teqne	r2, ip
 80a52f2:	ea93 0f0c 	teqne	r3, ip
 80a52f6:	d06f      	beq.n	80a53d8 <__aeabi_fmul+0xf8>
 80a52f8:	441a      	add	r2, r3
 80a52fa:	ea80 0c01 	eor.w	ip, r0, r1
 80a52fe:	0240      	lsls	r0, r0, #9
 80a5300:	bf18      	it	ne
 80a5302:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a5306:	d01e      	beq.n	80a5346 <__aeabi_fmul+0x66>
 80a5308:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a530c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a5310:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a5314:	fba0 3101 	umull	r3, r1, r0, r1
 80a5318:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a531c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a5320:	bf3e      	ittt	cc
 80a5322:	0049      	lslcc	r1, r1, #1
 80a5324:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a5328:	005b      	lslcc	r3, r3, #1
 80a532a:	ea40 0001 	orr.w	r0, r0, r1
 80a532e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a5332:	2afd      	cmp	r2, #253	; 0xfd
 80a5334:	d81d      	bhi.n	80a5372 <__aeabi_fmul+0x92>
 80a5336:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a533a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a533e:	bf08      	it	eq
 80a5340:	f020 0001 	biceq.w	r0, r0, #1
 80a5344:	4770      	bx	lr
 80a5346:	f090 0f00 	teq	r0, #0
 80a534a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a534e:	bf08      	it	eq
 80a5350:	0249      	lsleq	r1, r1, #9
 80a5352:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a5356:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a535a:	3a7f      	subs	r2, #127	; 0x7f
 80a535c:	bfc2      	ittt	gt
 80a535e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a5362:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a5366:	4770      	bxgt	lr
 80a5368:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a536c:	f04f 0300 	mov.w	r3, #0
 80a5370:	3a01      	subs	r2, #1
 80a5372:	dc5d      	bgt.n	80a5430 <__aeabi_fmul+0x150>
 80a5374:	f112 0f19 	cmn.w	r2, #25
 80a5378:	bfdc      	itt	le
 80a537a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a537e:	4770      	bxle	lr
 80a5380:	f1c2 0200 	rsb	r2, r2, #0
 80a5384:	0041      	lsls	r1, r0, #1
 80a5386:	fa21 f102 	lsr.w	r1, r1, r2
 80a538a:	f1c2 0220 	rsb	r2, r2, #32
 80a538e:	fa00 fc02 	lsl.w	ip, r0, r2
 80a5392:	ea5f 0031 	movs.w	r0, r1, rrx
 80a5396:	f140 0000 	adc.w	r0, r0, #0
 80a539a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a539e:	bf08      	it	eq
 80a53a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a53a4:	4770      	bx	lr
 80a53a6:	f092 0f00 	teq	r2, #0
 80a53aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a53ae:	bf02      	ittt	eq
 80a53b0:	0040      	lsleq	r0, r0, #1
 80a53b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a53b6:	3a01      	subeq	r2, #1
 80a53b8:	d0f9      	beq.n	80a53ae <__aeabi_fmul+0xce>
 80a53ba:	ea40 000c 	orr.w	r0, r0, ip
 80a53be:	f093 0f00 	teq	r3, #0
 80a53c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a53c6:	bf02      	ittt	eq
 80a53c8:	0049      	lsleq	r1, r1, #1
 80a53ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a53ce:	3b01      	subeq	r3, #1
 80a53d0:	d0f9      	beq.n	80a53c6 <__aeabi_fmul+0xe6>
 80a53d2:	ea41 010c 	orr.w	r1, r1, ip
 80a53d6:	e78f      	b.n	80a52f8 <__aeabi_fmul+0x18>
 80a53d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a53dc:	ea92 0f0c 	teq	r2, ip
 80a53e0:	bf18      	it	ne
 80a53e2:	ea93 0f0c 	teqne	r3, ip
 80a53e6:	d00a      	beq.n	80a53fe <__aeabi_fmul+0x11e>
 80a53e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a53ec:	bf18      	it	ne
 80a53ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a53f2:	d1d8      	bne.n	80a53a6 <__aeabi_fmul+0xc6>
 80a53f4:	ea80 0001 	eor.w	r0, r0, r1
 80a53f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a53fc:	4770      	bx	lr
 80a53fe:	f090 0f00 	teq	r0, #0
 80a5402:	bf17      	itett	ne
 80a5404:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a5408:	4608      	moveq	r0, r1
 80a540a:	f091 0f00 	teqne	r1, #0
 80a540e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a5412:	d014      	beq.n	80a543e <__aeabi_fmul+0x15e>
 80a5414:	ea92 0f0c 	teq	r2, ip
 80a5418:	d101      	bne.n	80a541e <__aeabi_fmul+0x13e>
 80a541a:	0242      	lsls	r2, r0, #9
 80a541c:	d10f      	bne.n	80a543e <__aeabi_fmul+0x15e>
 80a541e:	ea93 0f0c 	teq	r3, ip
 80a5422:	d103      	bne.n	80a542c <__aeabi_fmul+0x14c>
 80a5424:	024b      	lsls	r3, r1, #9
 80a5426:	bf18      	it	ne
 80a5428:	4608      	movne	r0, r1
 80a542a:	d108      	bne.n	80a543e <__aeabi_fmul+0x15e>
 80a542c:	ea80 0001 	eor.w	r0, r0, r1
 80a5430:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a5434:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5438:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a543c:	4770      	bx	lr
 80a543e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5442:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a5446:	4770      	bx	lr

080a5448 <__aeabi_fdiv>:
 80a5448:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a544c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a5450:	bf1e      	ittt	ne
 80a5452:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a5456:	ea92 0f0c 	teqne	r2, ip
 80a545a:	ea93 0f0c 	teqne	r3, ip
 80a545e:	d069      	beq.n	80a5534 <__aeabi_fdiv+0xec>
 80a5460:	eba2 0203 	sub.w	r2, r2, r3
 80a5464:	ea80 0c01 	eor.w	ip, r0, r1
 80a5468:	0249      	lsls	r1, r1, #9
 80a546a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a546e:	d037      	beq.n	80a54e0 <__aeabi_fdiv+0x98>
 80a5470:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a5474:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a5478:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a547c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a5480:	428b      	cmp	r3, r1
 80a5482:	bf38      	it	cc
 80a5484:	005b      	lslcc	r3, r3, #1
 80a5486:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a548a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a548e:	428b      	cmp	r3, r1
 80a5490:	bf24      	itt	cs
 80a5492:	1a5b      	subcs	r3, r3, r1
 80a5494:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5498:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a549c:	bf24      	itt	cs
 80a549e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a54a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a54a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a54aa:	bf24      	itt	cs
 80a54ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a54b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a54b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a54b8:	bf24      	itt	cs
 80a54ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a54be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a54c2:	011b      	lsls	r3, r3, #4
 80a54c4:	bf18      	it	ne
 80a54c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a54ca:	d1e0      	bne.n	80a548e <__aeabi_fdiv+0x46>
 80a54cc:	2afd      	cmp	r2, #253	; 0xfd
 80a54ce:	f63f af50 	bhi.w	80a5372 <__aeabi_fmul+0x92>
 80a54d2:	428b      	cmp	r3, r1
 80a54d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a54d8:	bf08      	it	eq
 80a54da:	f020 0001 	biceq.w	r0, r0, #1
 80a54de:	4770      	bx	lr
 80a54e0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a54e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a54e8:	327f      	adds	r2, #127	; 0x7f
 80a54ea:	bfc2      	ittt	gt
 80a54ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a54f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a54f4:	4770      	bxgt	lr
 80a54f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a54fa:	f04f 0300 	mov.w	r3, #0
 80a54fe:	3a01      	subs	r2, #1
 80a5500:	e737      	b.n	80a5372 <__aeabi_fmul+0x92>
 80a5502:	f092 0f00 	teq	r2, #0
 80a5506:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a550a:	bf02      	ittt	eq
 80a550c:	0040      	lsleq	r0, r0, #1
 80a550e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a5512:	3a01      	subeq	r2, #1
 80a5514:	d0f9      	beq.n	80a550a <__aeabi_fdiv+0xc2>
 80a5516:	ea40 000c 	orr.w	r0, r0, ip
 80a551a:	f093 0f00 	teq	r3, #0
 80a551e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5522:	bf02      	ittt	eq
 80a5524:	0049      	lsleq	r1, r1, #1
 80a5526:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a552a:	3b01      	subeq	r3, #1
 80a552c:	d0f9      	beq.n	80a5522 <__aeabi_fdiv+0xda>
 80a552e:	ea41 010c 	orr.w	r1, r1, ip
 80a5532:	e795      	b.n	80a5460 <__aeabi_fdiv+0x18>
 80a5534:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a5538:	ea92 0f0c 	teq	r2, ip
 80a553c:	d108      	bne.n	80a5550 <__aeabi_fdiv+0x108>
 80a553e:	0242      	lsls	r2, r0, #9
 80a5540:	f47f af7d 	bne.w	80a543e <__aeabi_fmul+0x15e>
 80a5544:	ea93 0f0c 	teq	r3, ip
 80a5548:	f47f af70 	bne.w	80a542c <__aeabi_fmul+0x14c>
 80a554c:	4608      	mov	r0, r1
 80a554e:	e776      	b.n	80a543e <__aeabi_fmul+0x15e>
 80a5550:	ea93 0f0c 	teq	r3, ip
 80a5554:	d104      	bne.n	80a5560 <__aeabi_fdiv+0x118>
 80a5556:	024b      	lsls	r3, r1, #9
 80a5558:	f43f af4c 	beq.w	80a53f4 <__aeabi_fmul+0x114>
 80a555c:	4608      	mov	r0, r1
 80a555e:	e76e      	b.n	80a543e <__aeabi_fmul+0x15e>
 80a5560:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a5564:	bf18      	it	ne
 80a5566:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a556a:	d1ca      	bne.n	80a5502 <__aeabi_fdiv+0xba>
 80a556c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a5570:	f47f af5c 	bne.w	80a542c <__aeabi_fmul+0x14c>
 80a5574:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a5578:	f47f af3c 	bne.w	80a53f4 <__aeabi_fmul+0x114>
 80a557c:	e75f      	b.n	80a543e <__aeabi_fmul+0x15e>
 80a557e:	bf00      	nop

080a5580 <asctime>:
 80a5580:	4b09      	ldr	r3, [pc, #36]	; (80a55a8 <asctime+0x28>)
 80a5582:	b570      	push	{r4, r5, r6, lr}
 80a5584:	681c      	ldr	r4, [r3, #0]
 80a5586:	4606      	mov	r6, r0
 80a5588:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80a558a:	b93d      	cbnz	r5, 80a559c <asctime+0x1c>
 80a558c:	201a      	movs	r0, #26
 80a558e:	f7fc f827 	bl	80a15e0 <malloc>
 80a5592:	221a      	movs	r2, #26
 80a5594:	6420      	str	r0, [r4, #64]	; 0x40
 80a5596:	4629      	mov	r1, r5
 80a5598:	f000 f93f 	bl	80a581a <memset>
 80a559c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80a559e:	4630      	mov	r0, r6
 80a55a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a55a4:	f000 b802 	b.w	80a55ac <asctime_r>
 80a55a8:	20000384 	.word	0x20000384

080a55ac <asctime_r>:
 80a55ac:	b510      	push	{r4, lr}
 80a55ae:	460c      	mov	r4, r1
 80a55b0:	6941      	ldr	r1, [r0, #20]
 80a55b2:	b086      	sub	sp, #24
 80a55b4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80a55b8:	6903      	ldr	r3, [r0, #16]
 80a55ba:	6982      	ldr	r2, [r0, #24]
 80a55bc:	9104      	str	r1, [sp, #16]
 80a55be:	6801      	ldr	r1, [r0, #0]
 80a55c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a55c4:	9103      	str	r1, [sp, #12]
 80a55c6:	6841      	ldr	r1, [r0, #4]
 80a55c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a55cc:	9102      	str	r1, [sp, #8]
 80a55ce:	6881      	ldr	r1, [r0, #8]
 80a55d0:	9101      	str	r1, [sp, #4]
 80a55d2:	68c1      	ldr	r1, [r0, #12]
 80a55d4:	4620      	mov	r0, r4
 80a55d6:	9100      	str	r1, [sp, #0]
 80a55d8:	4904      	ldr	r1, [pc, #16]	; (80a55ec <asctime_r+0x40>)
 80a55da:	440b      	add	r3, r1
 80a55dc:	4904      	ldr	r1, [pc, #16]	; (80a55f0 <asctime_r+0x44>)
 80a55de:	440a      	add	r2, r1
 80a55e0:	4904      	ldr	r1, [pc, #16]	; (80a55f4 <asctime_r+0x48>)
 80a55e2:	f7fc f815 	bl	80a1610 <siprintf>
 80a55e6:	4620      	mov	r0, r4
 80a55e8:	b006      	add	sp, #24
 80a55ea:	bd10      	pop	{r4, pc}
 80a55ec:	080a65ad 	.word	0x080a65ad
 80a55f0:	080a6598 	.word	0x080a6598
 80a55f4:	080a65d1 	.word	0x080a65d1

080a55f8 <__cxa_atexit>:
 80a55f8:	b510      	push	{r4, lr}
 80a55fa:	4c05      	ldr	r4, [pc, #20]	; (80a5610 <__cxa_atexit+0x18>)
 80a55fc:	4613      	mov	r3, r2
 80a55fe:	b12c      	cbz	r4, 80a560c <__cxa_atexit+0x14>
 80a5600:	460a      	mov	r2, r1
 80a5602:	4601      	mov	r1, r0
 80a5604:	2002      	movs	r0, #2
 80a5606:	f3af 8000 	nop.w
 80a560a:	bd10      	pop	{r4, pc}
 80a560c:	4620      	mov	r0, r4
 80a560e:	bd10      	pop	{r4, pc}
 80a5610:	00000000 	.word	0x00000000

080a5614 <localtime>:
 80a5614:	b538      	push	{r3, r4, r5, lr}
 80a5616:	4b07      	ldr	r3, [pc, #28]	; (80a5634 <localtime+0x20>)
 80a5618:	4605      	mov	r5, r0
 80a561a:	681c      	ldr	r4, [r3, #0]
 80a561c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a561e:	b91b      	cbnz	r3, 80a5628 <localtime+0x14>
 80a5620:	2024      	movs	r0, #36	; 0x24
 80a5622:	f7fb ffdd 	bl	80a15e0 <malloc>
 80a5626:	63e0      	str	r0, [r4, #60]	; 0x3c
 80a5628:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a562a:	4628      	mov	r0, r5
 80a562c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a5630:	f000 b802 	b.w	80a5638 <localtime_r>
 80a5634:	20000384 	.word	0x20000384

080a5638 <localtime_r>:
 80a5638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a563c:	460c      	mov	r4, r1
 80a563e:	4680      	mov	r8, r0
 80a5640:	f000 fc62 	bl	80a5f08 <__gettzinfo>
 80a5644:	4621      	mov	r1, r4
 80a5646:	4607      	mov	r7, r0
 80a5648:	4640      	mov	r0, r8
 80a564a:	f000 fc61 	bl	80a5f10 <gmtime_r>
 80a564e:	6946      	ldr	r6, [r0, #20]
 80a5650:	4604      	mov	r4, r0
 80a5652:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a5656:	07b3      	lsls	r3, r6, #30
 80a5658:	d105      	bne.n	80a5666 <localtime_r+0x2e>
 80a565a:	2264      	movs	r2, #100	; 0x64
 80a565c:	fb96 f3f2 	sdiv	r3, r6, r2
 80a5660:	fb02 6313 	mls	r3, r2, r3, r6
 80a5664:	b94b      	cbnz	r3, 80a567a <localtime_r+0x42>
 80a5666:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a566a:	fb96 f3f5 	sdiv	r3, r6, r5
 80a566e:	fb05 6513 	mls	r5, r5, r3, r6
 80a5672:	fab5 f385 	clz	r3, r5
 80a5676:	095b      	lsrs	r3, r3, #5
 80a5678:	e000      	b.n	80a567c <localtime_r+0x44>
 80a567a:	2301      	movs	r3, #1
 80a567c:	4a5f      	ldr	r2, [pc, #380]	; (80a57fc <localtime_r+0x1c4>)
 80a567e:	2530      	movs	r5, #48	; 0x30
 80a5680:	fb05 2503 	mla	r5, r5, r3, r2
 80a5684:	f000 fa74 	bl	80a5b70 <__tz_lock>
 80a5688:	f000 fa74 	bl	80a5b74 <_tzset_unlocked>
 80a568c:	4b5c      	ldr	r3, [pc, #368]	; (80a5800 <localtime_r+0x1c8>)
 80a568e:	681b      	ldr	r3, [r3, #0]
 80a5690:	b1f3      	cbz	r3, 80a56d0 <localtime_r+0x98>
 80a5692:	687b      	ldr	r3, [r7, #4]
 80a5694:	429e      	cmp	r6, r3
 80a5696:	d105      	bne.n	80a56a4 <localtime_r+0x6c>
 80a5698:	6839      	ldr	r1, [r7, #0]
 80a569a:	f8d8 3000 	ldr.w	r3, [r8]
 80a569e:	69fa      	ldr	r2, [r7, #28]
 80a56a0:	b941      	cbnz	r1, 80a56b4 <localtime_r+0x7c>
 80a56a2:	e00a      	b.n	80a56ba <localtime_r+0x82>
 80a56a4:	4630      	mov	r0, r6
 80a56a6:	f000 f9bb 	bl	80a5a20 <__tzcalc_limits>
 80a56aa:	2800      	cmp	r0, #0
 80a56ac:	d1f4      	bne.n	80a5698 <localtime_r+0x60>
 80a56ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a56b2:	e00d      	b.n	80a56d0 <localtime_r+0x98>
 80a56b4:	4293      	cmp	r3, r2
 80a56b6:	db08      	blt.n	80a56ca <localtime_r+0x92>
 80a56b8:	e001      	b.n	80a56be <localtime_r+0x86>
 80a56ba:	4293      	cmp	r3, r2
 80a56bc:	da07      	bge.n	80a56ce <localtime_r+0x96>
 80a56be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a56c0:	4293      	cmp	r3, r2
 80a56c2:	bfac      	ite	ge
 80a56c4:	2300      	movge	r3, #0
 80a56c6:	2301      	movlt	r3, #1
 80a56c8:	e002      	b.n	80a56d0 <localtime_r+0x98>
 80a56ca:	2300      	movs	r3, #0
 80a56cc:	e000      	b.n	80a56d0 <localtime_r+0x98>
 80a56ce:	2301      	movs	r3, #1
 80a56d0:	6223      	str	r3, [r4, #32]
 80a56d2:	6a23      	ldr	r3, [r4, #32]
 80a56d4:	203c      	movs	r0, #60	; 0x3c
 80a56d6:	2b01      	cmp	r3, #1
 80a56d8:	bf0c      	ite	eq
 80a56da:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80a56dc:	6a39      	ldrne	r1, [r7, #32]
 80a56de:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a56e2:	fb91 f6f3 	sdiv	r6, r1, r3
 80a56e6:	fb03 1316 	mls	r3, r3, r6, r1
 80a56ea:	fb93 f2f0 	sdiv	r2, r3, r0
 80a56ee:	fb00 3012 	mls	r0, r0, r2, r3
 80a56f2:	6861      	ldr	r1, [r4, #4]
 80a56f4:	6823      	ldr	r3, [r4, #0]
 80a56f6:	1a89      	subs	r1, r1, r2
 80a56f8:	68a2      	ldr	r2, [r4, #8]
 80a56fa:	1a1b      	subs	r3, r3, r0
 80a56fc:	1b92      	subs	r2, r2, r6
 80a56fe:	2b3b      	cmp	r3, #59	; 0x3b
 80a5700:	6023      	str	r3, [r4, #0]
 80a5702:	6061      	str	r1, [r4, #4]
 80a5704:	60a2      	str	r2, [r4, #8]
 80a5706:	dd03      	ble.n	80a5710 <localtime_r+0xd8>
 80a5708:	3101      	adds	r1, #1
 80a570a:	6061      	str	r1, [r4, #4]
 80a570c:	3b3c      	subs	r3, #60	; 0x3c
 80a570e:	e004      	b.n	80a571a <localtime_r+0xe2>
 80a5710:	2b00      	cmp	r3, #0
 80a5712:	da03      	bge.n	80a571c <localtime_r+0xe4>
 80a5714:	3901      	subs	r1, #1
 80a5716:	6061      	str	r1, [r4, #4]
 80a5718:	333c      	adds	r3, #60	; 0x3c
 80a571a:	6023      	str	r3, [r4, #0]
 80a571c:	6863      	ldr	r3, [r4, #4]
 80a571e:	2b3b      	cmp	r3, #59	; 0x3b
 80a5720:	dd03      	ble.n	80a572a <localtime_r+0xf2>
 80a5722:	3201      	adds	r2, #1
 80a5724:	60a2      	str	r2, [r4, #8]
 80a5726:	3b3c      	subs	r3, #60	; 0x3c
 80a5728:	e004      	b.n	80a5734 <localtime_r+0xfc>
 80a572a:	2b00      	cmp	r3, #0
 80a572c:	da03      	bge.n	80a5736 <localtime_r+0xfe>
 80a572e:	3a01      	subs	r2, #1
 80a5730:	60a2      	str	r2, [r4, #8]
 80a5732:	333c      	adds	r3, #60	; 0x3c
 80a5734:	6063      	str	r3, [r4, #4]
 80a5736:	68a3      	ldr	r3, [r4, #8]
 80a5738:	2b17      	cmp	r3, #23
 80a573a:	dd22      	ble.n	80a5782 <localtime_r+0x14a>
 80a573c:	69e2      	ldr	r2, [r4, #28]
 80a573e:	3b18      	subs	r3, #24
 80a5740:	3201      	adds	r2, #1
 80a5742:	61e2      	str	r2, [r4, #28]
 80a5744:	69a2      	ldr	r2, [r4, #24]
 80a5746:	60a3      	str	r3, [r4, #8]
 80a5748:	3201      	adds	r2, #1
 80a574a:	2a06      	cmp	r2, #6
 80a574c:	bfc8      	it	gt
 80a574e:	2200      	movgt	r2, #0
 80a5750:	61a2      	str	r2, [r4, #24]
 80a5752:	68e2      	ldr	r2, [r4, #12]
 80a5754:	6923      	ldr	r3, [r4, #16]
 80a5756:	3201      	adds	r2, #1
 80a5758:	60e2      	str	r2, [r4, #12]
 80a575a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a575e:	428a      	cmp	r2, r1
 80a5760:	dd46      	ble.n	80a57f0 <localtime_r+0x1b8>
 80a5762:	3301      	adds	r3, #1
 80a5764:	2b0c      	cmp	r3, #12
 80a5766:	bf08      	it	eq
 80a5768:	6963      	ldreq	r3, [r4, #20]
 80a576a:	eba2 0201 	sub.w	r2, r2, r1
 80a576e:	60e2      	str	r2, [r4, #12]
 80a5770:	bf05      	ittet	eq
 80a5772:	3301      	addeq	r3, #1
 80a5774:	2200      	moveq	r2, #0
 80a5776:	6123      	strne	r3, [r4, #16]
 80a5778:	6122      	streq	r2, [r4, #16]
 80a577a:	bf04      	itt	eq
 80a577c:	6163      	streq	r3, [r4, #20]
 80a577e:	61e2      	streq	r2, [r4, #28]
 80a5780:	e036      	b.n	80a57f0 <localtime_r+0x1b8>
 80a5782:	2b00      	cmp	r3, #0
 80a5784:	da34      	bge.n	80a57f0 <localtime_r+0x1b8>
 80a5786:	69e2      	ldr	r2, [r4, #28]
 80a5788:	3318      	adds	r3, #24
 80a578a:	3a01      	subs	r2, #1
 80a578c:	61e2      	str	r2, [r4, #28]
 80a578e:	69a2      	ldr	r2, [r4, #24]
 80a5790:	60a3      	str	r3, [r4, #8]
 80a5792:	3a01      	subs	r2, #1
 80a5794:	bf48      	it	mi
 80a5796:	2206      	movmi	r2, #6
 80a5798:	61a2      	str	r2, [r4, #24]
 80a579a:	68e2      	ldr	r2, [r4, #12]
 80a579c:	3a01      	subs	r2, #1
 80a579e:	60e2      	str	r2, [r4, #12]
 80a57a0:	bb32      	cbnz	r2, 80a57f0 <localtime_r+0x1b8>
 80a57a2:	6923      	ldr	r3, [r4, #16]
 80a57a4:	3b01      	subs	r3, #1
 80a57a6:	d401      	bmi.n	80a57ac <localtime_r+0x174>
 80a57a8:	6123      	str	r3, [r4, #16]
 80a57aa:	e01d      	b.n	80a57e8 <localtime_r+0x1b0>
 80a57ac:	230b      	movs	r3, #11
 80a57ae:	6123      	str	r3, [r4, #16]
 80a57b0:	6963      	ldr	r3, [r4, #20]
 80a57b2:	1e5a      	subs	r2, r3, #1
 80a57b4:	f012 0f03 	tst.w	r2, #3
 80a57b8:	6162      	str	r2, [r4, #20]
 80a57ba:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a57be:	d105      	bne.n	80a57cc <localtime_r+0x194>
 80a57c0:	2164      	movs	r1, #100	; 0x64
 80a57c2:	fb93 f2f1 	sdiv	r2, r3, r1
 80a57c6:	fb01 3212 	mls	r2, r1, r2, r3
 80a57ca:	b94a      	cbnz	r2, 80a57e0 <localtime_r+0x1a8>
 80a57cc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a57d0:	fb93 f2f1 	sdiv	r2, r3, r1
 80a57d4:	fb01 3312 	mls	r3, r1, r2, r3
 80a57d8:	fab3 f383 	clz	r3, r3
 80a57dc:	095b      	lsrs	r3, r3, #5
 80a57de:	e000      	b.n	80a57e2 <localtime_r+0x1aa>
 80a57e0:	2301      	movs	r3, #1
 80a57e2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a57e6:	61e3      	str	r3, [r4, #28]
 80a57e8:	6923      	ldr	r3, [r4, #16]
 80a57ea:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a57ee:	60e3      	str	r3, [r4, #12]
 80a57f0:	f000 f9bf 	bl	80a5b72 <__tz_unlock>
 80a57f4:	4620      	mov	r0, r4
 80a57f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a57fa:	bf00      	nop
 80a57fc:	080a6758 	.word	0x080a6758
 80a5800:	20000ac0 	.word	0x20000ac0

080a5804 <memcpy>:
 80a5804:	b510      	push	{r4, lr}
 80a5806:	1e43      	subs	r3, r0, #1
 80a5808:	440a      	add	r2, r1
 80a580a:	4291      	cmp	r1, r2
 80a580c:	d004      	beq.n	80a5818 <memcpy+0x14>
 80a580e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a5812:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a5816:	e7f8      	b.n	80a580a <memcpy+0x6>
 80a5818:	bd10      	pop	{r4, pc}

080a581a <memset>:
 80a581a:	4603      	mov	r3, r0
 80a581c:	4402      	add	r2, r0
 80a581e:	4293      	cmp	r3, r2
 80a5820:	d002      	beq.n	80a5828 <memset+0xe>
 80a5822:	f803 1b01 	strb.w	r1, [r3], #1
 80a5826:	e7fa      	b.n	80a581e <memset+0x4>
 80a5828:	4770      	bx	lr
	...

080a582c <srand>:
 80a582c:	b538      	push	{r3, r4, r5, lr}
 80a582e:	4b12      	ldr	r3, [pc, #72]	; (80a5878 <srand+0x4c>)
 80a5830:	4605      	mov	r5, r0
 80a5832:	681c      	ldr	r4, [r3, #0]
 80a5834:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a5836:	b9d3      	cbnz	r3, 80a586e <srand+0x42>
 80a5838:	2018      	movs	r0, #24
 80a583a:	f7fb fed1 	bl	80a15e0 <malloc>
 80a583e:	f243 330e 	movw	r3, #13070	; 0x330e
 80a5842:	63a0      	str	r0, [r4, #56]	; 0x38
 80a5844:	8003      	strh	r3, [r0, #0]
 80a5846:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a584a:	8043      	strh	r3, [r0, #2]
 80a584c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a5850:	8083      	strh	r3, [r0, #4]
 80a5852:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a5856:	80c3      	strh	r3, [r0, #6]
 80a5858:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a585c:	8103      	strh	r3, [r0, #8]
 80a585e:	2305      	movs	r3, #5
 80a5860:	8143      	strh	r3, [r0, #10]
 80a5862:	230b      	movs	r3, #11
 80a5864:	8183      	strh	r3, [r0, #12]
 80a5866:	2201      	movs	r2, #1
 80a5868:	2300      	movs	r3, #0
 80a586a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a586e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a5870:	2200      	movs	r2, #0
 80a5872:	611d      	str	r5, [r3, #16]
 80a5874:	615a      	str	r2, [r3, #20]
 80a5876:	bd38      	pop	{r3, r4, r5, pc}
 80a5878:	20000384 	.word	0x20000384

080a587c <strcmp>:
 80a587c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a5880:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a5884:	2a01      	cmp	r2, #1
 80a5886:	bf28      	it	cs
 80a5888:	429a      	cmpcs	r2, r3
 80a588a:	d0f7      	beq.n	80a587c <strcmp>
 80a588c:	1ad0      	subs	r0, r2, r3
 80a588e:	4770      	bx	lr

080a5890 <strcpy>:
 80a5890:	4603      	mov	r3, r0
 80a5892:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a5896:	f803 2b01 	strb.w	r2, [r3], #1
 80a589a:	2a00      	cmp	r2, #0
 80a589c:	d1f9      	bne.n	80a5892 <strcpy+0x2>
 80a589e:	4770      	bx	lr

080a58a0 <strdup>:
 80a58a0:	4b02      	ldr	r3, [pc, #8]	; (80a58ac <strdup+0xc>)
 80a58a2:	4601      	mov	r1, r0
 80a58a4:	6818      	ldr	r0, [r3, #0]
 80a58a6:	f000 b803 	b.w	80a58b0 <_strdup_r>
 80a58aa:	bf00      	nop
 80a58ac:	20000384 	.word	0x20000384

080a58b0 <_strdup_r>:
 80a58b0:	b570      	push	{r4, r5, r6, lr}
 80a58b2:	4606      	mov	r6, r0
 80a58b4:	4608      	mov	r0, r1
 80a58b6:	460c      	mov	r4, r1
 80a58b8:	f000 f80d 	bl	80a58d6 <strlen>
 80a58bc:	1c45      	adds	r5, r0, #1
 80a58be:	4629      	mov	r1, r5
 80a58c0:	4630      	mov	r0, r6
 80a58c2:	f7fb fec5 	bl	80a1650 <_malloc_r>
 80a58c6:	4606      	mov	r6, r0
 80a58c8:	b118      	cbz	r0, 80a58d2 <_strdup_r+0x22>
 80a58ca:	462a      	mov	r2, r5
 80a58cc:	4621      	mov	r1, r4
 80a58ce:	f7ff ff99 	bl	80a5804 <memcpy>
 80a58d2:	4630      	mov	r0, r6
 80a58d4:	bd70      	pop	{r4, r5, r6, pc}

080a58d6 <strlen>:
 80a58d6:	4603      	mov	r3, r0
 80a58d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a58dc:	2a00      	cmp	r2, #0
 80a58de:	d1fb      	bne.n	80a58d8 <strlen+0x2>
 80a58e0:	1a18      	subs	r0, r3, r0
 80a58e2:	3801      	subs	r0, #1
 80a58e4:	4770      	bx	lr

080a58e6 <strncmp>:
 80a58e6:	b530      	push	{r4, r5, lr}
 80a58e8:	b182      	cbz	r2, 80a590c <strncmp+0x26>
 80a58ea:	1e45      	subs	r5, r0, #1
 80a58ec:	3901      	subs	r1, #1
 80a58ee:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a58f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a58f6:	42a3      	cmp	r3, r4
 80a58f8:	d106      	bne.n	80a5908 <strncmp+0x22>
 80a58fa:	43ec      	mvns	r4, r5
 80a58fc:	4414      	add	r4, r2
 80a58fe:	42e0      	cmn	r0, r4
 80a5900:	d001      	beq.n	80a5906 <strncmp+0x20>
 80a5902:	2b00      	cmp	r3, #0
 80a5904:	d1f3      	bne.n	80a58ee <strncmp+0x8>
 80a5906:	461c      	mov	r4, r3
 80a5908:	1b18      	subs	r0, r3, r4
 80a590a:	bd30      	pop	{r4, r5, pc}
 80a590c:	4610      	mov	r0, r2
 80a590e:	bd30      	pop	{r4, r5, pc}

080a5910 <_strtoul_r>:
 80a5910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a5914:	460e      	mov	r6, r1
 80a5916:	4680      	mov	r8, r0
 80a5918:	483b      	ldr	r0, [pc, #236]	; (80a5a08 <_strtoul_r+0xf8>)
 80a591a:	f8d0 9000 	ldr.w	r9, [r0]
 80a591e:	4635      	mov	r5, r6
 80a5920:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a5924:	eb09 0004 	add.w	r0, r9, r4
 80a5928:	7840      	ldrb	r0, [r0, #1]
 80a592a:	f000 0008 	and.w	r0, r0, #8
 80a592e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80a5932:	b108      	cbz	r0, 80a5938 <_strtoul_r+0x28>
 80a5934:	462e      	mov	r6, r5
 80a5936:	e7f2      	b.n	80a591e <_strtoul_r+0xe>
 80a5938:	2c2d      	cmp	r4, #45	; 0x2d
 80a593a:	d103      	bne.n	80a5944 <_strtoul_r+0x34>
 80a593c:	1cb5      	adds	r5, r6, #2
 80a593e:	7874      	ldrb	r4, [r6, #1]
 80a5940:	2701      	movs	r7, #1
 80a5942:	e003      	b.n	80a594c <_strtoul_r+0x3c>
 80a5944:	2c2b      	cmp	r4, #43	; 0x2b
 80a5946:	bf04      	itt	eq
 80a5948:	7874      	ldrbeq	r4, [r6, #1]
 80a594a:	1cb5      	addeq	r5, r6, #2
 80a594c:	b113      	cbz	r3, 80a5954 <_strtoul_r+0x44>
 80a594e:	2b10      	cmp	r3, #16
 80a5950:	d10a      	bne.n	80a5968 <_strtoul_r+0x58>
 80a5952:	e053      	b.n	80a59fc <_strtoul_r+0xec>
 80a5954:	2c30      	cmp	r4, #48	; 0x30
 80a5956:	d14f      	bne.n	80a59f8 <_strtoul_r+0xe8>
 80a5958:	7828      	ldrb	r0, [r5, #0]
 80a595a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a595e:	2858      	cmp	r0, #88	; 0x58
 80a5960:	d145      	bne.n	80a59ee <_strtoul_r+0xde>
 80a5962:	786c      	ldrb	r4, [r5, #1]
 80a5964:	2310      	movs	r3, #16
 80a5966:	3502      	adds	r5, #2
 80a5968:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a596c:	fbbc fcf3 	udiv	ip, ip, r3
 80a5970:	fb03 fa0c 	mul.w	sl, r3, ip
 80a5974:	2600      	movs	r6, #0
 80a5976:	ea6f 0a0a 	mvn.w	sl, sl
 80a597a:	4630      	mov	r0, r6
 80a597c:	eb09 0e04 	add.w	lr, r9, r4
 80a5980:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a5984:	f01e 0f04 	tst.w	lr, #4
 80a5988:	d001      	beq.n	80a598e <_strtoul_r+0x7e>
 80a598a:	3c30      	subs	r4, #48	; 0x30
 80a598c:	e00b      	b.n	80a59a6 <_strtoul_r+0x96>
 80a598e:	f01e 0e03 	ands.w	lr, lr, #3
 80a5992:	d01a      	beq.n	80a59ca <_strtoul_r+0xba>
 80a5994:	f1be 0f01 	cmp.w	lr, #1
 80a5998:	bf0c      	ite	eq
 80a599a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a599e:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a59a2:	ebce 0404 	rsb	r4, lr, r4
 80a59a6:	42a3      	cmp	r3, r4
 80a59a8:	dd0f      	ble.n	80a59ca <_strtoul_r+0xba>
 80a59aa:	2e00      	cmp	r6, #0
 80a59ac:	db08      	blt.n	80a59c0 <_strtoul_r+0xb0>
 80a59ae:	4560      	cmp	r0, ip
 80a59b0:	d806      	bhi.n	80a59c0 <_strtoul_r+0xb0>
 80a59b2:	d101      	bne.n	80a59b8 <_strtoul_r+0xa8>
 80a59b4:	4554      	cmp	r4, sl
 80a59b6:	dc03      	bgt.n	80a59c0 <_strtoul_r+0xb0>
 80a59b8:	fb03 4000 	mla	r0, r3, r0, r4
 80a59bc:	2601      	movs	r6, #1
 80a59be:	e001      	b.n	80a59c4 <_strtoul_r+0xb4>
 80a59c0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a59c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a59c8:	e7d8      	b.n	80a597c <_strtoul_r+0x6c>
 80a59ca:	2e00      	cmp	r6, #0
 80a59cc:	da07      	bge.n	80a59de <_strtoul_r+0xce>
 80a59ce:	2322      	movs	r3, #34	; 0x22
 80a59d0:	f8c8 3000 	str.w	r3, [r8]
 80a59d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a59d8:	b92a      	cbnz	r2, 80a59e6 <_strtoul_r+0xd6>
 80a59da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a59de:	b107      	cbz	r7, 80a59e2 <_strtoul_r+0xd2>
 80a59e0:	4240      	negs	r0, r0
 80a59e2:	b172      	cbz	r2, 80a5a02 <_strtoul_r+0xf2>
 80a59e4:	b106      	cbz	r6, 80a59e8 <_strtoul_r+0xd8>
 80a59e6:	1e69      	subs	r1, r5, #1
 80a59e8:	6011      	str	r1, [r2, #0]
 80a59ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a59ee:	2430      	movs	r4, #48	; 0x30
 80a59f0:	2b00      	cmp	r3, #0
 80a59f2:	d1b9      	bne.n	80a5968 <_strtoul_r+0x58>
 80a59f4:	2308      	movs	r3, #8
 80a59f6:	e7b7      	b.n	80a5968 <_strtoul_r+0x58>
 80a59f8:	230a      	movs	r3, #10
 80a59fa:	e7b5      	b.n	80a5968 <_strtoul_r+0x58>
 80a59fc:	2c30      	cmp	r4, #48	; 0x30
 80a59fe:	d0ab      	beq.n	80a5958 <_strtoul_r+0x48>
 80a5a00:	e7b2      	b.n	80a5968 <_strtoul_r+0x58>
 80a5a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a5a06:	bf00      	nop
 80a5a08:	20000320 	.word	0x20000320

080a5a0c <strtoul>:
 80a5a0c:	4613      	mov	r3, r2
 80a5a0e:	460a      	mov	r2, r1
 80a5a10:	4601      	mov	r1, r0
 80a5a12:	4802      	ldr	r0, [pc, #8]	; (80a5a1c <strtoul+0x10>)
 80a5a14:	6800      	ldr	r0, [r0, #0]
 80a5a16:	f7ff bf7b 	b.w	80a5910 <_strtoul_r>
 80a5a1a:	bf00      	nop
 80a5a1c:	20000384 	.word	0x20000384

080a5a20 <__tzcalc_limits>:
 80a5a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5a24:	4604      	mov	r4, r0
 80a5a26:	f000 fa6f 	bl	80a5f08 <__gettzinfo>
 80a5a2a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a5a2e:	429c      	cmp	r4, r3
 80a5a30:	f340 8096 	ble.w	80a5b60 <__tzcalc_limits+0x140>
 80a5a34:	f240 156d 	movw	r5, #365	; 0x16d
 80a5a38:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a5a3c:	18e3      	adds	r3, r4, r3
 80a5a3e:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80a5a42:	109b      	asrs	r3, r3, #2
 80a5a44:	fb05 3502 	mla	r5, r5, r2, r3
 80a5a48:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80a5a4c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80a5a50:	fb92 f3f3 	sdiv	r3, r2, r3
 80a5a54:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a5a58:	442b      	add	r3, r5
 80a5a5a:	18a5      	adds	r5, r4, r2
 80a5a5c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a5a60:	fb94 f7f2 	sdiv	r7, r4, r2
 80a5a64:	fb95 f5f2 	sdiv	r5, r5, r2
 80a5a68:	fb02 4717 	mls	r7, r2, r7, r4
 80a5a6c:	441d      	add	r5, r3
 80a5a6e:	2364      	movs	r3, #100	; 0x64
 80a5a70:	fb94 f6f3 	sdiv	r6, r4, r3
 80a5a74:	fab7 fe87 	clz	lr, r7
 80a5a78:	4601      	mov	r1, r0
 80a5a7a:	fb03 4616 	mls	r6, r3, r6, r4
 80a5a7e:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80a5a82:	9301      	str	r3, [sp, #4]
 80a5a84:	f004 0303 	and.w	r3, r4, #3
 80a5a88:	6044      	str	r4, [r0, #4]
 80a5a8a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80a5a8e:	9300      	str	r3, [sp, #0]
 80a5a90:	f04f 0c07 	mov.w	ip, #7
 80a5a94:	7a0b      	ldrb	r3, [r1, #8]
 80a5a96:	2b4a      	cmp	r3, #74	; 0x4a
 80a5a98:	d10e      	bne.n	80a5ab8 <__tzcalc_limits+0x98>
 80a5a9a:	694b      	ldr	r3, [r1, #20]
 80a5a9c:	9a00      	ldr	r2, [sp, #0]
 80a5a9e:	18ec      	adds	r4, r5, r3
 80a5aa0:	b902      	cbnz	r2, 80a5aa4 <__tzcalc_limits+0x84>
 80a5aa2:	b906      	cbnz	r6, 80a5aa6 <__tzcalc_limits+0x86>
 80a5aa4:	b927      	cbnz	r7, 80a5ab0 <__tzcalc_limits+0x90>
 80a5aa6:	2b3b      	cmp	r3, #59	; 0x3b
 80a5aa8:	bfd4      	ite	le
 80a5aaa:	2300      	movle	r3, #0
 80a5aac:	2301      	movgt	r3, #1
 80a5aae:	e000      	b.n	80a5ab2 <__tzcalc_limits+0x92>
 80a5ab0:	2300      	movs	r3, #0
 80a5ab2:	4423      	add	r3, r4
 80a5ab4:	3b01      	subs	r3, #1
 80a5ab6:	e03f      	b.n	80a5b38 <__tzcalc_limits+0x118>
 80a5ab8:	2b44      	cmp	r3, #68	; 0x44
 80a5aba:	d102      	bne.n	80a5ac2 <__tzcalc_limits+0xa2>
 80a5abc:	694b      	ldr	r3, [r1, #20]
 80a5abe:	442b      	add	r3, r5
 80a5ac0:	e03a      	b.n	80a5b38 <__tzcalc_limits+0x118>
 80a5ac2:	9b00      	ldr	r3, [sp, #0]
 80a5ac4:	b92b      	cbnz	r3, 80a5ad2 <__tzcalc_limits+0xb2>
 80a5ac6:	2e00      	cmp	r6, #0
 80a5ac8:	bf0c      	ite	eq
 80a5aca:	46f0      	moveq	r8, lr
 80a5acc:	f04f 0801 	movne.w	r8, #1
 80a5ad0:	e000      	b.n	80a5ad4 <__tzcalc_limits+0xb4>
 80a5ad2:	46f0      	mov	r8, lr
 80a5ad4:	46a9      	mov	r9, r5
 80a5ad6:	4b24      	ldr	r3, [pc, #144]	; (80a5b68 <__tzcalc_limits+0x148>)
 80a5ad8:	2230      	movs	r2, #48	; 0x30
 80a5ada:	fb02 3808 	mla	r8, r2, r8, r3
 80a5ade:	68cc      	ldr	r4, [r1, #12]
 80a5ae0:	f1a8 0a04 	sub.w	sl, r8, #4
 80a5ae4:	2301      	movs	r3, #1
 80a5ae6:	42a3      	cmp	r3, r4
 80a5ae8:	da04      	bge.n	80a5af4 <__tzcalc_limits+0xd4>
 80a5aea:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80a5aee:	3301      	adds	r3, #1
 80a5af0:	44d9      	add	r9, fp
 80a5af2:	e7f8      	b.n	80a5ae6 <__tzcalc_limits+0xc6>
 80a5af4:	f109 0304 	add.w	r3, r9, #4
 80a5af8:	fb93 fbfc 	sdiv	fp, r3, ip
 80a5afc:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80a5b00:	ebca 0a03 	rsb	sl, sl, r3
 80a5b04:	694b      	ldr	r3, [r1, #20]
 80a5b06:	2c01      	cmp	r4, #1
 80a5b08:	bfb8      	it	lt
 80a5b0a:	2401      	movlt	r4, #1
 80a5b0c:	ebb3 0a0a 	subs.w	sl, r3, sl
 80a5b10:	690b      	ldr	r3, [r1, #16]
 80a5b12:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80a5b16:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80a5b1a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80a5b1e:	bf48      	it	mi
 80a5b20:	f10a 0a07 	addmi.w	sl, sl, #7
 80a5b24:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a5b28:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80a5b2c:	4453      	add	r3, sl
 80a5b2e:	42a3      	cmp	r3, r4
 80a5b30:	db01      	blt.n	80a5b36 <__tzcalc_limits+0x116>
 80a5b32:	3b07      	subs	r3, #7
 80a5b34:	e7fb      	b.n	80a5b2e <__tzcalc_limits+0x10e>
 80a5b36:	444b      	add	r3, r9
 80a5b38:	698c      	ldr	r4, [r1, #24]
 80a5b3a:	4a0c      	ldr	r2, [pc, #48]	; (80a5b6c <__tzcalc_limits+0x14c>)
 80a5b3c:	fb02 4303 	mla	r3, r2, r3, r4
 80a5b40:	6a0c      	ldr	r4, [r1, #32]
 80a5b42:	4423      	add	r3, r4
 80a5b44:	f841 3f1c 	str.w	r3, [r1, #28]!
 80a5b48:	9b01      	ldr	r3, [sp, #4]
 80a5b4a:	4299      	cmp	r1, r3
 80a5b4c:	d1a2      	bne.n	80a5a94 <__tzcalc_limits+0x74>
 80a5b4e:	69c3      	ldr	r3, [r0, #28]
 80a5b50:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80a5b52:	4293      	cmp	r3, r2
 80a5b54:	bfac      	ite	ge
 80a5b56:	2300      	movge	r3, #0
 80a5b58:	2301      	movlt	r3, #1
 80a5b5a:	6003      	str	r3, [r0, #0]
 80a5b5c:	2001      	movs	r0, #1
 80a5b5e:	e000      	b.n	80a5b62 <__tzcalc_limits+0x142>
 80a5b60:	2000      	movs	r0, #0
 80a5b62:	b003      	add	sp, #12
 80a5b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5b68:	080a6758 	.word	0x080a6758
 80a5b6c:	00015180 	.word	0x00015180

080a5b70 <__tz_lock>:
 80a5b70:	4770      	bx	lr

080a5b72 <__tz_unlock>:
 80a5b72:	4770      	bx	lr

080a5b74 <_tzset_unlocked>:
 80a5b74:	4b01      	ldr	r3, [pc, #4]	; (80a5b7c <_tzset_unlocked+0x8>)
 80a5b76:	6818      	ldr	r0, [r3, #0]
 80a5b78:	f000 b802 	b.w	80a5b80 <_tzset_unlocked_r>
 80a5b7c:	20000384 	.word	0x20000384

080a5b80 <_tzset_unlocked_r>:
 80a5b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5b84:	b08d      	sub	sp, #52	; 0x34
 80a5b86:	4607      	mov	r7, r0
 80a5b88:	f000 f9be 	bl	80a5f08 <__gettzinfo>
 80a5b8c:	49b0      	ldr	r1, [pc, #704]	; (80a5e50 <_tzset_unlocked_r+0x2d0>)
 80a5b8e:	4604      	mov	r4, r0
 80a5b90:	4638      	mov	r0, r7
 80a5b92:	f000 f9b1 	bl	80a5ef8 <_getenv_r>
 80a5b96:	4eaf      	ldr	r6, [pc, #700]	; (80a5e54 <_tzset_unlocked_r+0x2d4>)
 80a5b98:	4605      	mov	r5, r0
 80a5b9a:	b960      	cbnz	r0, 80a5bb6 <_tzset_unlocked_r+0x36>
 80a5b9c:	4bae      	ldr	r3, [pc, #696]	; (80a5e58 <_tzset_unlocked_r+0x2d8>)
 80a5b9e:	4aaf      	ldr	r2, [pc, #700]	; (80a5e5c <_tzset_unlocked_r+0x2dc>)
 80a5ba0:	6018      	str	r0, [r3, #0]
 80a5ba2:	4baf      	ldr	r3, [pc, #700]	; (80a5e60 <_tzset_unlocked_r+0x2e0>)
 80a5ba4:	6018      	str	r0, [r3, #0]
 80a5ba6:	4baf      	ldr	r3, [pc, #700]	; (80a5e64 <_tzset_unlocked_r+0x2e4>)
 80a5ba8:	6830      	ldr	r0, [r6, #0]
 80a5baa:	601a      	str	r2, [r3, #0]
 80a5bac:	605a      	str	r2, [r3, #4]
 80a5bae:	f7fb fd1f 	bl	80a15f0 <free>
 80a5bb2:	6035      	str	r5, [r6, #0]
 80a5bb4:	e148      	b.n	80a5e48 <_tzset_unlocked_r+0x2c8>
 80a5bb6:	6831      	ldr	r1, [r6, #0]
 80a5bb8:	b979      	cbnz	r1, 80a5bda <_tzset_unlocked_r+0x5a>
 80a5bba:	6830      	ldr	r0, [r6, #0]
 80a5bbc:	f7fb fd18 	bl	80a15f0 <free>
 80a5bc0:	4628      	mov	r0, r5
 80a5bc2:	f7ff fe88 	bl	80a58d6 <strlen>
 80a5bc6:	1c41      	adds	r1, r0, #1
 80a5bc8:	4638      	mov	r0, r7
 80a5bca:	f7fb fd41 	bl	80a1650 <_malloc_r>
 80a5bce:	6030      	str	r0, [r6, #0]
 80a5bd0:	b148      	cbz	r0, 80a5be6 <_tzset_unlocked_r+0x66>
 80a5bd2:	4629      	mov	r1, r5
 80a5bd4:	f7ff fe5c 	bl	80a5890 <strcpy>
 80a5bd8:	e005      	b.n	80a5be6 <_tzset_unlocked_r+0x66>
 80a5bda:	f7ff fe4f 	bl	80a587c <strcmp>
 80a5bde:	2800      	cmp	r0, #0
 80a5be0:	f000 8132 	beq.w	80a5e48 <_tzset_unlocked_r+0x2c8>
 80a5be4:	e7e9      	b.n	80a5bba <_tzset_unlocked_r+0x3a>
 80a5be6:	782b      	ldrb	r3, [r5, #0]
 80a5be8:	ae0a      	add	r6, sp, #40	; 0x28
 80a5bea:	2b3a      	cmp	r3, #58	; 0x3a
 80a5bec:	bf08      	it	eq
 80a5bee:	3501      	addeq	r5, #1
 80a5bf0:	4633      	mov	r3, r6
 80a5bf2:	4a9d      	ldr	r2, [pc, #628]	; (80a5e68 <_tzset_unlocked_r+0x2e8>)
 80a5bf4:	499d      	ldr	r1, [pc, #628]	; (80a5e6c <_tzset_unlocked_r+0x2ec>)
 80a5bf6:	4628      	mov	r0, r5
 80a5bf8:	f7fb fd12 	bl	80a1620 <siscanf>
 80a5bfc:	2800      	cmp	r0, #0
 80a5bfe:	f340 8123 	ble.w	80a5e48 <_tzset_unlocked_r+0x2c8>
 80a5c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5c04:	18ef      	adds	r7, r5, r3
 80a5c06:	5ceb      	ldrb	r3, [r5, r3]
 80a5c08:	2b2d      	cmp	r3, #45	; 0x2d
 80a5c0a:	d103      	bne.n	80a5c14 <_tzset_unlocked_r+0x94>
 80a5c0c:	3701      	adds	r7, #1
 80a5c0e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80a5c12:	e003      	b.n	80a5c1c <_tzset_unlocked_r+0x9c>
 80a5c14:	2b2b      	cmp	r3, #43	; 0x2b
 80a5c16:	bf08      	it	eq
 80a5c18:	3701      	addeq	r7, #1
 80a5c1a:	2501      	movs	r5, #1
 80a5c1c:	f10d 0a20 	add.w	sl, sp, #32
 80a5c20:	f10d 0b1e 	add.w	fp, sp, #30
 80a5c24:	f04f 0800 	mov.w	r8, #0
 80a5c28:	9603      	str	r6, [sp, #12]
 80a5c2a:	f8cd a008 	str.w	sl, [sp, #8]
 80a5c2e:	9601      	str	r6, [sp, #4]
 80a5c30:	f8cd b000 	str.w	fp, [sp]
 80a5c34:	4633      	mov	r3, r6
 80a5c36:	aa07      	add	r2, sp, #28
 80a5c38:	498d      	ldr	r1, [pc, #564]	; (80a5e70 <_tzset_unlocked_r+0x2f0>)
 80a5c3a:	4638      	mov	r0, r7
 80a5c3c:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a5c40:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a5c44:	f7fb fcec 	bl	80a1620 <siscanf>
 80a5c48:	4540      	cmp	r0, r8
 80a5c4a:	f340 80fd 	ble.w	80a5e48 <_tzset_unlocked_r+0x2c8>
 80a5c4e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a5c52:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a5c56:	213c      	movs	r1, #60	; 0x3c
 80a5c58:	fb01 3302 	mla	r3, r1, r2, r3
 80a5c5c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a5c60:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a5c64:	fb01 3302 	mla	r3, r1, r2, r3
 80a5c68:	435d      	muls	r5, r3
 80a5c6a:	4b7f      	ldr	r3, [pc, #508]	; (80a5e68 <_tzset_unlocked_r+0x2e8>)
 80a5c6c:	6225      	str	r5, [r4, #32]
 80a5c6e:	4d7d      	ldr	r5, [pc, #500]	; (80a5e64 <_tzset_unlocked_r+0x2e4>)
 80a5c70:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80a5e7c <_tzset_unlocked_r+0x2fc>
 80a5c74:	602b      	str	r3, [r5, #0]
 80a5c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5c78:	464a      	mov	r2, r9
 80a5c7a:	441f      	add	r7, r3
 80a5c7c:	497b      	ldr	r1, [pc, #492]	; (80a5e6c <_tzset_unlocked_r+0x2ec>)
 80a5c7e:	4633      	mov	r3, r6
 80a5c80:	4638      	mov	r0, r7
 80a5c82:	f7fb fccd 	bl	80a1620 <siscanf>
 80a5c86:	4540      	cmp	r0, r8
 80a5c88:	dc08      	bgt.n	80a5c9c <_tzset_unlocked_r+0x11c>
 80a5c8a:	682b      	ldr	r3, [r5, #0]
 80a5c8c:	6a22      	ldr	r2, [r4, #32]
 80a5c8e:	606b      	str	r3, [r5, #4]
 80a5c90:	4b71      	ldr	r3, [pc, #452]	; (80a5e58 <_tzset_unlocked_r+0x2d8>)
 80a5c92:	601a      	str	r2, [r3, #0]
 80a5c94:	4b72      	ldr	r3, [pc, #456]	; (80a5e60 <_tzset_unlocked_r+0x2e0>)
 80a5c96:	f8c3 8000 	str.w	r8, [r3]
 80a5c9a:	e0d5      	b.n	80a5e48 <_tzset_unlocked_r+0x2c8>
 80a5c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5c9e:	f8c5 9004 	str.w	r9, [r5, #4]
 80a5ca2:	18fd      	adds	r5, r7, r3
 80a5ca4:	5cfb      	ldrb	r3, [r7, r3]
 80a5ca6:	2b2d      	cmp	r3, #45	; 0x2d
 80a5ca8:	d103      	bne.n	80a5cb2 <_tzset_unlocked_r+0x132>
 80a5caa:	3501      	adds	r5, #1
 80a5cac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a5cb0:	e003      	b.n	80a5cba <_tzset_unlocked_r+0x13a>
 80a5cb2:	2b2b      	cmp	r3, #43	; 0x2b
 80a5cb4:	bf08      	it	eq
 80a5cb6:	3501      	addeq	r5, #1
 80a5cb8:	2701      	movs	r7, #1
 80a5cba:	2300      	movs	r3, #0
 80a5cbc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a5cc0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a5cc4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a5cc8:	930a      	str	r3, [sp, #40]	; 0x28
 80a5cca:	9603      	str	r6, [sp, #12]
 80a5ccc:	f8cd a008 	str.w	sl, [sp, #8]
 80a5cd0:	9601      	str	r6, [sp, #4]
 80a5cd2:	f8cd b000 	str.w	fp, [sp]
 80a5cd6:	4633      	mov	r3, r6
 80a5cd8:	aa07      	add	r2, sp, #28
 80a5cda:	4965      	ldr	r1, [pc, #404]	; (80a5e70 <_tzset_unlocked_r+0x2f0>)
 80a5cdc:	4628      	mov	r0, r5
 80a5cde:	f7fb fc9f 	bl	80a1620 <siscanf>
 80a5ce2:	2800      	cmp	r0, #0
 80a5ce4:	dc04      	bgt.n	80a5cf0 <_tzset_unlocked_r+0x170>
 80a5ce6:	6a23      	ldr	r3, [r4, #32]
 80a5ce8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a5cec:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a5cee:	e00e      	b.n	80a5d0e <_tzset_unlocked_r+0x18e>
 80a5cf0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a5cf4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a5cf8:	213c      	movs	r1, #60	; 0x3c
 80a5cfa:	fb01 3302 	mla	r3, r1, r2, r3
 80a5cfe:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a5d02:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a5d06:	fb01 3302 	mla	r3, r1, r2, r3
 80a5d0a:	435f      	muls	r7, r3
 80a5d0c:	63e7      	str	r7, [r4, #60]	; 0x3c
 80a5d0e:	4627      	mov	r7, r4
 80a5d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5d12:	f04f 0900 	mov.w	r9, #0
 80a5d16:	441d      	add	r5, r3
 80a5d18:	782b      	ldrb	r3, [r5, #0]
 80a5d1a:	2b2c      	cmp	r3, #44	; 0x2c
 80a5d1c:	bf08      	it	eq
 80a5d1e:	3501      	addeq	r5, #1
 80a5d20:	f895 8000 	ldrb.w	r8, [r5]
 80a5d24:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a5d28:	d126      	bne.n	80a5d78 <_tzset_unlocked_r+0x1f8>
 80a5d2a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a5d2e:	9302      	str	r3, [sp, #8]
 80a5d30:	ab09      	add	r3, sp, #36	; 0x24
 80a5d32:	9300      	str	r3, [sp, #0]
 80a5d34:	9603      	str	r6, [sp, #12]
 80a5d36:	9601      	str	r6, [sp, #4]
 80a5d38:	4633      	mov	r3, r6
 80a5d3a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a5d3e:	494d      	ldr	r1, [pc, #308]	; (80a5e74 <_tzset_unlocked_r+0x2f4>)
 80a5d40:	4628      	mov	r0, r5
 80a5d42:	f7fb fc6d 	bl	80a1620 <siscanf>
 80a5d46:	2803      	cmp	r0, #3
 80a5d48:	d17e      	bne.n	80a5e48 <_tzset_unlocked_r+0x2c8>
 80a5d4a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a5d4e:	1e4b      	subs	r3, r1, #1
 80a5d50:	2b0b      	cmp	r3, #11
 80a5d52:	d879      	bhi.n	80a5e48 <_tzset_unlocked_r+0x2c8>
 80a5d54:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a5d58:	1e53      	subs	r3, r2, #1
 80a5d5a:	2b04      	cmp	r3, #4
 80a5d5c:	d874      	bhi.n	80a5e48 <_tzset_unlocked_r+0x2c8>
 80a5d5e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a5d62:	2b06      	cmp	r3, #6
 80a5d64:	d870      	bhi.n	80a5e48 <_tzset_unlocked_r+0x2c8>
 80a5d66:	f887 8008 	strb.w	r8, [r7, #8]
 80a5d6a:	60f9      	str	r1, [r7, #12]
 80a5d6c:	613a      	str	r2, [r7, #16]
 80a5d6e:	617b      	str	r3, [r7, #20]
 80a5d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5d72:	eb05 0803 	add.w	r8, r5, r3
 80a5d76:	e02a      	b.n	80a5dce <_tzset_unlocked_r+0x24e>
 80a5d78:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a5d7c:	bf06      	itte	eq
 80a5d7e:	4643      	moveq	r3, r8
 80a5d80:	3501      	addeq	r5, #1
 80a5d82:	2344      	movne	r3, #68	; 0x44
 80a5d84:	220a      	movs	r2, #10
 80a5d86:	a90b      	add	r1, sp, #44	; 0x2c
 80a5d88:	4628      	mov	r0, r5
 80a5d8a:	9305      	str	r3, [sp, #20]
 80a5d8c:	f7ff fe3e 	bl	80a5a0c <strtoul>
 80a5d90:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a5d94:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a5d98:	4545      	cmp	r5, r8
 80a5d9a:	9b05      	ldr	r3, [sp, #20]
 80a5d9c:	d114      	bne.n	80a5dc8 <_tzset_unlocked_r+0x248>
 80a5d9e:	234d      	movs	r3, #77	; 0x4d
 80a5da0:	f1b9 0f00 	cmp.w	r9, #0
 80a5da4:	d107      	bne.n	80a5db6 <_tzset_unlocked_r+0x236>
 80a5da6:	7223      	strb	r3, [r4, #8]
 80a5da8:	2303      	movs	r3, #3
 80a5daa:	60e3      	str	r3, [r4, #12]
 80a5dac:	2302      	movs	r3, #2
 80a5dae:	6123      	str	r3, [r4, #16]
 80a5db0:	f8c4 9014 	str.w	r9, [r4, #20]
 80a5db4:	e00b      	b.n	80a5dce <_tzset_unlocked_r+0x24e>
 80a5db6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80a5dba:	230b      	movs	r3, #11
 80a5dbc:	62a3      	str	r3, [r4, #40]	; 0x28
 80a5dbe:	2301      	movs	r3, #1
 80a5dc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a5dc2:	2300      	movs	r3, #0
 80a5dc4:	6323      	str	r3, [r4, #48]	; 0x30
 80a5dc6:	e002      	b.n	80a5dce <_tzset_unlocked_r+0x24e>
 80a5dc8:	b280      	uxth	r0, r0
 80a5dca:	723b      	strb	r3, [r7, #8]
 80a5dcc:	6178      	str	r0, [r7, #20]
 80a5dce:	2302      	movs	r3, #2
 80a5dd0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a5dd4:	2300      	movs	r3, #0
 80a5dd6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a5dda:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a5dde:	930a      	str	r3, [sp, #40]	; 0x28
 80a5de0:	f898 3000 	ldrb.w	r3, [r8]
 80a5de4:	2b2f      	cmp	r3, #47	; 0x2f
 80a5de6:	d10b      	bne.n	80a5e00 <_tzset_unlocked_r+0x280>
 80a5de8:	9603      	str	r6, [sp, #12]
 80a5dea:	f8cd a008 	str.w	sl, [sp, #8]
 80a5dee:	9601      	str	r6, [sp, #4]
 80a5df0:	f8cd b000 	str.w	fp, [sp]
 80a5df4:	4633      	mov	r3, r6
 80a5df6:	aa07      	add	r2, sp, #28
 80a5df8:	491f      	ldr	r1, [pc, #124]	; (80a5e78 <_tzset_unlocked_r+0x2f8>)
 80a5dfa:	4640      	mov	r0, r8
 80a5dfc:	f7fb fc10 	bl	80a1620 <siscanf>
 80a5e00:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a5e04:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a5e08:	213c      	movs	r1, #60	; 0x3c
 80a5e0a:	fb01 3302 	mla	r3, r1, r2, r3
 80a5e0e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a5e12:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a5e16:	fb01 3302 	mla	r3, r1, r2, r3
 80a5e1a:	61bb      	str	r3, [r7, #24]
 80a5e1c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a5e1e:	f109 0901 	add.w	r9, r9, #1
 80a5e22:	f1b9 0f02 	cmp.w	r9, #2
 80a5e26:	4445      	add	r5, r8
 80a5e28:	f107 071c 	add.w	r7, r7, #28
 80a5e2c:	f47f af74 	bne.w	80a5d18 <_tzset_unlocked_r+0x198>
 80a5e30:	6860      	ldr	r0, [r4, #4]
 80a5e32:	f7ff fdf5 	bl	80a5a20 <__tzcalc_limits>
 80a5e36:	6a22      	ldr	r2, [r4, #32]
 80a5e38:	4b07      	ldr	r3, [pc, #28]	; (80a5e58 <_tzset_unlocked_r+0x2d8>)
 80a5e3a:	601a      	str	r2, [r3, #0]
 80a5e3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a5e3e:	1a9b      	subs	r3, r3, r2
 80a5e40:	4a07      	ldr	r2, [pc, #28]	; (80a5e60 <_tzset_unlocked_r+0x2e0>)
 80a5e42:	bf18      	it	ne
 80a5e44:	2301      	movne	r3, #1
 80a5e46:	6013      	str	r3, [r2, #0]
 80a5e48:	b00d      	add	sp, #52	; 0x34
 80a5e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5e4e:	bf00      	nop
 80a5e50:	080a67b8 	.word	0x080a67b8
 80a5e54:	20000abc 	.word	0x20000abc
 80a5e58:	20000ac4 	.word	0x20000ac4
 80a5e5c:	080a67bb 	.word	0x080a67bb
 80a5e60:	20000ac0 	.word	0x20000ac0
 80a5e64:	20000388 	.word	0x20000388
 80a5e68:	20000aaf 	.word	0x20000aaf
 80a5e6c:	080a67bf 	.word	0x080a67bf
 80a5e70:	080a67e2 	.word	0x080a67e2
 80a5e74:	080a67ce 	.word	0x080a67ce
 80a5e78:	080a67e1 	.word	0x080a67e1
 80a5e7c:	20000aa4 	.word	0x20000aa4

080a5e80 <_findenv_r>:
 80a5e80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5e84:	4607      	mov	r7, r0
 80a5e86:	468b      	mov	fp, r1
 80a5e88:	4690      	mov	r8, r2
 80a5e8a:	f000 f8d7 	bl	80a603c <__env_lock>
 80a5e8e:	4b19      	ldr	r3, [pc, #100]	; (80a5ef4 <_findenv_r+0x74>)
 80a5e90:	681d      	ldr	r5, [r3, #0]
 80a5e92:	469a      	mov	sl, r3
 80a5e94:	b13d      	cbz	r5, 80a5ea6 <_findenv_r+0x26>
 80a5e96:	465c      	mov	r4, fp
 80a5e98:	4623      	mov	r3, r4
 80a5e9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a5e9e:	b142      	cbz	r2, 80a5eb2 <_findenv_r+0x32>
 80a5ea0:	2a3d      	cmp	r2, #61	; 0x3d
 80a5ea2:	461c      	mov	r4, r3
 80a5ea4:	d1f8      	bne.n	80a5e98 <_findenv_r+0x18>
 80a5ea6:	4638      	mov	r0, r7
 80a5ea8:	f000 f8c9 	bl	80a603e <__env_unlock>
 80a5eac:	2000      	movs	r0, #0
 80a5eae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5eb2:	ebcb 0404 	rsb	r4, fp, r4
 80a5eb6:	46a9      	mov	r9, r5
 80a5eb8:	f859 0b04 	ldr.w	r0, [r9], #4
 80a5ebc:	2800      	cmp	r0, #0
 80a5ebe:	d0f2      	beq.n	80a5ea6 <_findenv_r+0x26>
 80a5ec0:	4622      	mov	r2, r4
 80a5ec2:	4659      	mov	r1, fp
 80a5ec4:	f7ff fd0f 	bl	80a58e6 <strncmp>
 80a5ec8:	b988      	cbnz	r0, 80a5eee <_findenv_r+0x6e>
 80a5eca:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80a5ece:	191e      	adds	r6, r3, r4
 80a5ed0:	5d1b      	ldrb	r3, [r3, r4]
 80a5ed2:	2b3d      	cmp	r3, #61	; 0x3d
 80a5ed4:	d10b      	bne.n	80a5eee <_findenv_r+0x6e>
 80a5ed6:	f8da 3000 	ldr.w	r3, [sl]
 80a5eda:	4638      	mov	r0, r7
 80a5edc:	1aed      	subs	r5, r5, r3
 80a5ede:	10ad      	asrs	r5, r5, #2
 80a5ee0:	f8c8 5000 	str.w	r5, [r8]
 80a5ee4:	f000 f8ab 	bl	80a603e <__env_unlock>
 80a5ee8:	1c70      	adds	r0, r6, #1
 80a5eea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5eee:	464d      	mov	r5, r9
 80a5ef0:	e7e1      	b.n	80a5eb6 <_findenv_r+0x36>
 80a5ef2:	bf00      	nop
 80a5ef4:	200003d0 	.word	0x200003d0

080a5ef8 <_getenv_r>:
 80a5ef8:	b507      	push	{r0, r1, r2, lr}
 80a5efa:	aa01      	add	r2, sp, #4
 80a5efc:	f7ff ffc0 	bl	80a5e80 <_findenv_r>
 80a5f00:	b003      	add	sp, #12
 80a5f02:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a5f08 <__gettzinfo>:
 80a5f08:	4800      	ldr	r0, [pc, #0]	; (80a5f0c <__gettzinfo+0x4>)
 80a5f0a:	4770      	bx	lr
 80a5f0c:	20000390 	.word	0x20000390

080a5f10 <gmtime_r>:
 80a5f10:	6802      	ldr	r2, [r0, #0]
 80a5f12:	4b46      	ldr	r3, [pc, #280]	; (80a602c <gmtime_r+0x11c>)
 80a5f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a5f16:	fb92 f4f3 	sdiv	r4, r2, r3
 80a5f1a:	fb03 2214 	mls	r2, r3, r4, r2
 80a5f1e:	2a00      	cmp	r2, #0
 80a5f20:	bfbc      	itt	lt
 80a5f22:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a5f26:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a5f2a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a5f2e:	fb92 f3f0 	sdiv	r3, r2, r0
 80a5f32:	fb00 2213 	mls	r2, r0, r3, r2
 80a5f36:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a5f3a:	608b      	str	r3, [r1, #8]
 80a5f3c:	fb92 f3f0 	sdiv	r3, r2, r0
 80a5f40:	fb00 2213 	mls	r2, r0, r3, r2
 80a5f44:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80a5f48:	bfac      	ite	ge
 80a5f4a:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80a5f4e:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80a5f52:	604b      	str	r3, [r1, #4]
 80a5f54:	600a      	str	r2, [r1, #0]
 80a5f56:	2307      	movs	r3, #7
 80a5f58:	1ce2      	adds	r2, r4, #3
 80a5f5a:	fb92 f3f3 	sdiv	r3, r2, r3
 80a5f5e:	4d34      	ldr	r5, [pc, #208]	; (80a6030 <gmtime_r+0x120>)
 80a5f60:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a5f64:	fb94 f5f5 	sdiv	r5, r4, r5
 80a5f68:	1ad3      	subs	r3, r2, r3
 80a5f6a:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a5f6e:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80a5f72:	618b      	str	r3, [r1, #24]
 80a5f74:	4b2f      	ldr	r3, [pc, #188]	; (80a6034 <gmtime_r+0x124>)
 80a5f76:	4830      	ldr	r0, [pc, #192]	; (80a6038 <gmtime_r+0x128>)
 80a5f78:	fb03 4405 	mla	r4, r3, r5, r4
 80a5f7c:	fbb4 f2f2 	udiv	r2, r4, r2
 80a5f80:	fbb4 f3f7 	udiv	r3, r4, r7
 80a5f84:	fbb4 f0f0 	udiv	r0, r4, r0
 80a5f88:	4422      	add	r2, r4
 80a5f8a:	1ad2      	subs	r2, r2, r3
 80a5f8c:	f648 6694 	movw	r6, #36500	; 0x8e94
 80a5f90:	1a13      	subs	r3, r2, r0
 80a5f92:	f240 126d 	movw	r2, #365	; 0x16d
 80a5f96:	fbb3 f6f6 	udiv	r6, r3, r6
 80a5f9a:	fbb3 f0f2 	udiv	r0, r3, r2
 80a5f9e:	fbb3 f3f7 	udiv	r3, r3, r7
 80a5fa2:	4434      	add	r4, r6
 80a5fa4:	1ae3      	subs	r3, r4, r3
 80a5fa6:	fb02 3310 	mls	r3, r2, r0, r3
 80a5faa:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80a5fae:	2499      	movs	r4, #153	; 0x99
 80a5fb0:	3202      	adds	r2, #2
 80a5fb2:	fbb2 f2f4 	udiv	r2, r2, r4
 80a5fb6:	4354      	muls	r4, r2
 80a5fb8:	1ca6      	adds	r6, r4, #2
 80a5fba:	2405      	movs	r4, #5
 80a5fbc:	fbb6 f4f4 	udiv	r4, r6, r4
 80a5fc0:	2a0a      	cmp	r2, #10
 80a5fc2:	bf34      	ite	cc
 80a5fc4:	2602      	movcc	r6, #2
 80a5fc6:	f06f 0609 	mvncs.w	r6, #9
 80a5fca:	4416      	add	r6, r2
 80a5fcc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a5fd0:	fb02 0505 	mla	r5, r2, r5, r0
 80a5fd4:	1c5f      	adds	r7, r3, #1
 80a5fd6:	2e01      	cmp	r6, #1
 80a5fd8:	bf98      	it	ls
 80a5fda:	3501      	addls	r5, #1
 80a5fdc:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a5fe0:	eba7 0704 	sub.w	r7, r7, r4
 80a5fe4:	d302      	bcc.n	80a5fec <gmtime_r+0xdc>
 80a5fe6:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80a5fea:	e014      	b.n	80a6016 <gmtime_r+0x106>
 80a5fec:	0782      	lsls	r2, r0, #30
 80a5fee:	d105      	bne.n	80a5ffc <gmtime_r+0xec>
 80a5ff0:	2464      	movs	r4, #100	; 0x64
 80a5ff2:	fbb0 f2f4 	udiv	r2, r0, r4
 80a5ff6:	fb04 0212 	mls	r2, r4, r2, r0
 80a5ffa:	b94a      	cbnz	r2, 80a6010 <gmtime_r+0x100>
 80a5ffc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a6000:	fbb0 f4f2 	udiv	r4, r0, r2
 80a6004:	fb02 0014 	mls	r0, r2, r4, r0
 80a6008:	fab0 f280 	clz	r2, r0
 80a600c:	0952      	lsrs	r2, r2, #5
 80a600e:	e000      	b.n	80a6012 <gmtime_r+0x102>
 80a6010:	2201      	movs	r2, #1
 80a6012:	333b      	adds	r3, #59	; 0x3b
 80a6014:	441a      	add	r2, r3
 80a6016:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a601a:	2300      	movs	r3, #0
 80a601c:	61ca      	str	r2, [r1, #28]
 80a601e:	614d      	str	r5, [r1, #20]
 80a6020:	610e      	str	r6, [r1, #16]
 80a6022:	60cf      	str	r7, [r1, #12]
 80a6024:	620b      	str	r3, [r1, #32]
 80a6026:	4608      	mov	r0, r1
 80a6028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a602a:	bf00      	nop
 80a602c:	00015180 	.word	0x00015180
 80a6030:	00023ab1 	.word	0x00023ab1
 80a6034:	fffdc54f 	.word	0xfffdc54f
 80a6038:	00023ab0 	.word	0x00023ab0

080a603c <__env_lock>:
 80a603c:	4770      	bx	lr

080a603e <__env_unlock>:
 80a603e:	4770      	bx	lr

080a6040 <dynalib_user>:
 80a6040:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a6050:	0000 0000                                   ....

080a6054 <_ZTV5Timer>:
	...
 80a605c:	028d 080a 02d5 080a 00e1 080a 6c63 736f     ............clos
 80a606c:	0065 704f 6e65 6e69 2067 6167 6172 6567     e.Opening garage
 80a607c:	6420 6f6f 2072 2e2e 002e 6c43 736f 6e69      door ....Closin
 80a608c:	2067 6167 6172 6567 6420 6f6f 2072 2e2e     g garage door ..
 80a609c:	002e 666f 0066 7473 7461 7375 4100 656c     ..off.status.Ale
 80a60ac:	7472 4700 7261 6761 4465 6f6f 0072 6147     rt.GarageDoor.Ga
 80a60bc:	6172 6567 6420 6f6f 2072 706f 6e65 4700     rage door open.G
 80a60cc:	7261 6761 2065 6f64 726f 6920 206e 7274     arage door in tr
 80a60dc:	6e61 6973 6974 6e6f 4700 7261 6761 2065     ansition.Garage 
 80a60ec:	6f64 726f 6320 6f6c 6573 0064 6553 736e     door closed.Sens
 80a60fc:	726f 6620 6961 756c 6572 4700 7261 6761     or failure.Garag
 80a610c:	2065 6f64 726f 6620 6961 756c 6572 0021     e door failure!.
 80a611c:	6554 706d 7265 7461 7275 0065 0a0a 5200     Temperature....R
 80a612c:	7465 6972 7665 6e69 2067 6e69 6f66 6d72     etrieving inform
 80a613c:	7461 6f69 206e 7266 6d6f 7320 6e65 6f73     ation from senso
 80a614c:	2e72 0020 6552 6461 7320 6e65 6f73 3a72     r. .Read sensor:
 80a615c:	0020 4b4f 4500 7272 726f 0d0a 4309 6568      .OK.Error...Che
 80a616c:	6b63 7573 206d 7265 6f72 0072 7245 6f72     cksum error.Erro
 80a617c:	0a72 090d 5349 2052 6974 656d 6f20 7475     r...ISR time out
 80a618c:	6520 7272 726f 4500 7272 726f 0d0a 5209      error.Error...R
 80a619c:	7365 6f70 736e 2065 6974 656d 6f20 7475     esponse time out
 80a61ac:	6520 7272 726f 4500 7272 726f 0d0a 4409      error.Error...D
 80a61bc:	7461 2061 6974 656d 6f20 7475 6520 7272     ata time out err
 80a61cc:	726f 4500 7272 726f 0d0a 4109 7163 6975     or.Error...Acqui
 80a61dc:	6972 676e 4500 7272 726f 0d0a 4409 6c65     ring.Error...Del
 80a61ec:	6174 7420 6d69 2065 6f74 7320 616d 6c6c     ta time to small
 80a61fc:	4500 7272 726f 0d0a 4e09 746f 7320 6174     .Error...Not sta
 80a620c:	7472 6465 5500 6b6e 6f6e 6e77 6520 7272     rted.Unknown err
 80a621c:	726f 4800 6d75 6469 7469 2079 2528 3a29     or.Humidity (%):
 80a622c:	0020 6554 706d 7265 7461 7275 2065 c228      .Temperature (.
 80a623c:	43b0 3a29 0020 6544 2077 6f50 6e69 2074     .C): .Dew Point 
 80a624c:	c228 43b0 3a29 0020 6544 2077 6f50 6e69     (..C): .Dew Poin
 80a625c:	2074 6c53 776f 2820 b0c2 2943 203a 5400     t Slow (..C): .T
 80a626c:	6d69 2065 7075 6164 6574 2064 7461 2520     ime updated at %
 80a627c:	2e73 2e2e 6900 736e 6469 0065 756f 7374     s....inside.outs
 80a628c:	6469 0065 7953 7473 6d65 7620 7265 6973     ide.System versi
 80a629c:	6e6f 203a 7325 4600 7269 776d 7261 2065     on: %s.Firmware 
 80a62ac:	6576 7372 6f69 3a6e 2520 0073 2d2d 2d2d     version: %s.----
 80a62bc:	2d2d 2d2d 2d2d 2d2d 2d2d 002d 5746 562d     -----------.FW-V
 80a62cc:	7265 6973 6e6f 5400 6d65 5370 6174 7574     ersion.TempStatu
 80a62dc:	0073 7548 696d 6964 7974 6700 7261 6761     s.Humidity.garag
 80a62ec:	4465 6f6f 5372 6174 6574 7600 6865 6369     eDoorState.vehic
 80a62fc:	656c 7453 7461 0065 6167 6172 6567 7254     leState.garageTr
 80a630c:	6769 6567 0072 7561 6f74 616d 6974 4d63     igger.automaticM
 80a631c:	646f 0065 6e49 7469 6169 696c 617a 6974     ode.Initializati
 80a632c:	6e6f 7600 2e30 2e33 0031 0000               on.v0.3.1...

080a6338 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a6340:	169f 080a 16a5 080a 16bd 080a 16b3 080a     ................
 80a6350:	16a1 080a                                   ....

080a6354 <_ZTV7TwoWire>:
	...
 80a635c:	1c69 080a 1cb3 080a 1c8b 080a 1c6b 080a     i...........k...
 80a636c:	1c93 080a 1c9b 080a 1ca3 080a 1cab 080a     ................

080a637c <_ZTV9IPAddress>:
	...
 80a6384:	1df5 080a 1de5 080a 1de7 080a 6e6c 6600     ............ln.f
 80a6394:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
 80a63a4:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
 80a63b4:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
 80a63c4:	2500 0069 6564 6174 6c69 2073 203d 6200     .%i.details = .b
 80a63d4:	7561 0064 6553 6972 6c61 5500 4253 6553     aud.Serial.USBSe
 80a63e4:	6972 6c61 0031 7974 6570 7000 7261 6d61     rial1.type.param
 80a63f4:	6300 646d 6900 0064 6e68 0064 7473 6d72     .cmd.id.hnd.strm
 80a6404:	6600 6c69 0074 766c 006c 6461 4864 6e61     .filt.lvl.addHan
 80a6414:	6c64 7265 7200 6d65 766f 4865 6e61 6c64     dler.removeHandl
 80a6424:	7265 6500 756e 486d 6e61 6c64 7265 0073     er.enumHandlers.
 80a6434:	534a 4e4f 7453 6572 6d61 6f4c 4867 6e61     JSONStreamLogHan
 80a6444:	6c64 7265 6100 7070 6e00 6e6f 0065 7274     dler.app.none.tr
 80a6454:	6361 0065 6e69 6f66 7700 7261 006e 6170     ace.info.warn.pa
 80a6464:	696e 0063                                   nic.

080a6468 <_ZTVN5spark12NetworkClassE>:
	...
 80a6470:	1ebd 080a 1ec7 080a 1ed1 080a 1edb 080a     ................
 80a6480:	1ee5 080a 1ef1 080a 1efd 080a 1f09 080a     ................
 80a6490:	1f11 080a 1f1b 080a 1f25 080a 616e 006e     ........%...nan.
 80a64a0:	766f 0066 6e69 0066                         ovf.inf.

080a64a8 <_ZTV8SPIClass>:
	...
 80a64b0:	22c1 080a 22c3 080a 2b25 3330 3a64 3025     ."..."..%+03d:%0
 80a64c0:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 80a64d0:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

080a64e0 <_ZTV11USARTSerial>:
	...
 80a64e8:	2509 080a 2559 080a 2567 080a 1f89 080a     .%..Y%..g%......
 80a64f8:	251d 080a 253f 080a 252b 080a 2553 080a     .%..?%..+%..S%..
 80a6508:	250b 080a 250f 080a                         .%...%..

080a6510 <_ZTV9USBSerial>:
	...
 80a6518:	2611 080a 2661 080a 266f 080a 1f89 080a     .&..a&..o&......
 80a6528:	264d 080a 2613 080a 2629 080a 265b 080a     M&...&..)&..[&..
 80a6538:	263f 080a 260d 080a                         ?&...&..

080a6540 <_ZTVN5spark9WiFiClassE>:
	...
 80a6548:	2853 080a 2849 080a 283f 080a 27b1 080a     S(..I(..?(...'..
 80a6558:	2833 080a 2827 080a 281b 080a 2813 080a     3(..'(...(...(..
 80a6568:	2809 080a 27ff 080a 27bb 080a 6f6c 0067     .(...'...'..log.
 80a6578:	0000 0000 6f6c 3167 0030 0000 6f70 0077     ....log10...pow.

080a6588 <TWO52>:
 80a6588:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

080a6598 <day_name.4723>:
 80a6598:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80a65a8:	6972 6153 4a74                                   riSat

080a65ad <mon_name.4724>:
 80a65ad:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80a65bd:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80a65cd:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 80a65dd:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 80a65ed:	6425 000a                                   %d..

080a65f1 <_ctype_>:
 80a65f1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a6601:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a6611:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a6621:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a6631:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a6641:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a6651:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a6661:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a6671:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a66f4 <__sf_fake_stdin>:
	...

080a6714 <__sf_fake_stdout>:
	...

080a6734 <__sf_fake_stderr>:
	...
 80a6754:	0043 0000                                   C...

080a6758 <__month_lengths>:
 80a6758:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a6768:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a6778:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a6788:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a6798:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a67a8:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a67b8:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 80a67c8:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 80a67d8:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 80a67e8:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

080a67f4 <link_const_variable_data_end>:
 80a67f4:	080a0911 	.word	0x080a0911
 80a67f8:	080a1131 	.word	0x080a1131
 80a67fc:	080a1ead 	.word	0x080a1ead
 80a6800:	080a1f75 	.word	0x080a1f75
 80a6804:	080a22a5 	.word	0x080a22a5
 80a6808:	080a242d 	.word	0x080a242d
 80a680c:	080a24f5 	.word	0x080a24f5
 80a6810:	080a285d 	.word	0x080a285d
 80a6814:	080a2aad 	.word	0x080a2aad
 80a6818:	080a2add 	.word	0x080a2add
 80a681c:	080a2b35 	.word	0x080a2b35
 80a6820:	080a2bf9 	.word	0x080a2bf9
 80a6824:	080a2c7d 	.word	0x080a2c7d
 80a6828:	080a2d01 	.word	0x080a2d01

080a682c <link_constructors_end>:
 80a682c:	00000000 	.word	0x00000000
