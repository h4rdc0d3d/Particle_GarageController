
/Users/Tim/github/Particle_GarageController/target/Particle_GarageController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069d8  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a69f0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         000000e0  20000300  080a69f4  00030300  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000006fc  200003e0  200003e0  000403e0  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a6ad4  080a6ad4  00036ad4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a6afc  080a6afc  00036afc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000bad93  00000000  00000000  00036b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000109df  00000000  00000000  000f1893  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00014668  00000000  00000000  00102272  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001ff0  00000000  00000000  001168da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003588  00000000  00000000  001188ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000250af  00000000  00000000  0011be52  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00023d01  00000000  00000000  00140f01  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a8313  00000000  00000000  00164c02  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c1a0  00000000  00000000  0020cf18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	f8 61 0a 08                                         .a..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f005 fcc5 	bl	80a59bc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f005 fcca 	bl	80a59d2 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a69f4 	.word	0x080a69f4
 80a004c:	200003e0 	.word	0x200003e0
 80a0050:	200003e0 	.word	0x200003e0
 80a0054:	20000adc 	.word	0x20000adc
 80a0058:	20000adc 	.word	0x20000adc

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fd4f 	bl	80a2b00 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a69ac 	.word	0x080a69ac
 80a0084:	080a69e4 	.word	0x080a69e4

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bc6e 	b.w	80a0968 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fc4d 	bl	80a092c <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 bcf5 	b.w	80a2a84 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f001 bb79 	b.w	80a1790 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f001 bb7f 	b.w	80a17a0 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
 80a00b2:	6810      	ldr	r0, [r2, #0]
 80a00b4:	4770      	bx	lr

080a00b6 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80a00b6:	6803      	ldr	r3, [r0, #0]
 80a00b8:	4718      	bx	r3

080a00ba <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a00ba:	2a01      	cmp	r2, #1
 80a00bc:	d002      	beq.n	80a00c4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 80a00be:	2a02      	cmp	r2, #2
 80a00c0:	d002      	beq.n	80a00c8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 80a00c2:	e004      	b.n	80a00ce <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a00c4:	6001      	str	r1, [r0, #0]
	      break;
 80a00c6:	e002      	b.n	80a00ce <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a00c8:	680b      	ldr	r3, [r1, #0]
 80a00ca:	b100      	cbz	r0, 80a00ce <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 80a00cc:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a00ce:	2000      	movs	r0, #0
 80a00d0:	4770      	bx	lr
	...

080a00d4 <_Z11dht_wrapperv>:
  * Output         : None
  *******************************************************************************/
void dht_wrapper()
{

  DHT.isrCallback();
 80a00d4:	4801      	ldr	r0, [pc, #4]	; (80a00dc <_Z11dht_wrapperv+0x8>)
 80a00d6:	f000 bf0d 	b.w	80a0ef4 <_ZN14PietteTech_DHT11isrCallbackEv>
 80a00da:	bf00      	nop
 80a00dc:	20000448 	.word	0x20000448

080a00e0 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
 80a00e0:	6943      	ldr	r3, [r0, #20]
 80a00e2:	b113      	cbz	r3, 80a00ea <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a00e4:	6983      	ldr	r3, [r0, #24]
 80a00e6:	300c      	adds	r0, #12
 80a00e8:	4718      	bx	r3
 80a00ea:	4770      	bx	lr

080a00ec <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 80a00ec:	b513      	push	{r0, r1, r4, lr}
 80a00ee:	4604      	mov	r4, r0
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
 80a00f0:	2100      	movs	r1, #0
 80a00f2:	4608      	mov	r0, r1
 80a00f4:	f001 f8f6 	bl	80a12e4 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 80a00f8:	a902      	add	r1, sp, #8
 80a00fa:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
 80a00fc:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 80a00fe:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
 80a0102:	f001 f907 	bl	80a1314 <os_timer_get_id>
            t = static_cast<Timer*>(id);
 80a0106:	9c01      	ldr	r4, [sp, #4]
            if (t) {
 80a0108:	b10c      	cbz	r4, 80a010e <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
 80a010a:	2301      	movs	r3, #1
 80a010c:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
 80a010e:	2100      	movs	r1, #0
 80a0110:	2001      	movs	r0, #1
 80a0112:	f001 f8e7 	bl	80a12e4 <os_thread_scheduling>
            }
        }
        if (t) {
 80a0116:	b12c      	cbz	r4, 80a0124 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
 80a0118:	6823      	ldr	r3, [r4, #0]
 80a011a:	4620      	mov	r0, r4
 80a011c:	689b      	ldr	r3, [r3, #8]
 80a011e:	4798      	blx	r3
            t->running = false;
 80a0120:	2300      	movs	r3, #0
 80a0122:	7123      	strb	r3, [r4, #4]
        }
    }
 80a0124:	b002      	add	sp, #8
 80a0126:	bd10      	pop	{r4, pc}

080a0128 <_Z13triggerGarage6String>:
 * Description    : Trigger for opening / closing the garage door
 * Input          : open / close
 * Output         : 1 = opening, 0 = closing, -1 = invalid command
 *******************************************************************************/
int triggerGarage(String command)
{
 80a0128:	b538      	push	{r3, r4, r5, lr}

  if (garageDoorState > 2 && command == "open")
 80a012a:	4b1d      	ldr	r3, [pc, #116]	; (80a01a0 <_Z13triggerGarage6String+0x78>)
 * Description    : Trigger for opening / closing the garage door
 * Input          : open / close
 * Output         : 1 = opening, 0 = closing, -1 = invalid command
 *******************************************************************************/
int triggerGarage(String command)
{
 80a012c:	4605      	mov	r5, r0

  if (garageDoorState > 2 && command == "open")
 80a012e:	681a      	ldr	r2, [r3, #0]
 80a0130:	461c      	mov	r4, r3
 80a0132:	2a02      	cmp	r2, #2
 80a0134:	dd03      	ble.n	80a013e <_Z13triggerGarage6String+0x16>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a0136:	491b      	ldr	r1, [pc, #108]	; (80a01a4 <_Z13triggerGarage6String+0x7c>)
 80a0138:	f002 fa3e 	bl	80a25b8 <_ZNK6String6equalsEPKc>
 80a013c:	b9d0      	cbnz	r0, 80a0174 <_Z13triggerGarage6String+0x4c>
    delay(500);
    digitalWrite(garageTrigger, LOW);

    return 1;
  }
  else if (garageDoorState < 2 && command == "close")
 80a013e:	6823      	ldr	r3, [r4, #0]
 80a0140:	2b01      	cmp	r3, #1
 80a0142:	dc2a      	bgt.n	80a019a <_Z13triggerGarage6String+0x72>
 80a0144:	4918      	ldr	r1, [pc, #96]	; (80a01a8 <_Z13triggerGarage6String+0x80>)
 80a0146:	4628      	mov	r0, r5
 80a0148:	f002 fa36 	bl	80a25b8 <_ZNK6String6equalsEPKc>
 80a014c:	b328      	cbz	r0, 80a019a <_Z13triggerGarage6String+0x72>
  {

    Serial.println("Closing garage door ...");
 80a014e:	f002 fba5 	bl	80a289c <_Z16_fetch_usbserialv>
 80a0152:	4916      	ldr	r1, [pc, #88]	; (80a01ac <_Z13triggerGarage6String+0x84>)
 80a0154:	f002 f829 	bl	80a21aa <_ZN5Print7printlnEPKc>

    digitalWrite(garageTrigger, HIGH);
 80a0158:	2101      	movs	r1, #1
 80a015a:	200a      	movs	r0, #10
 80a015c:	f002 fd31 	bl	80a2bc2 <digitalWrite>
    delay(500);
 80a0160:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0164:	f001 fb5c 	bl	80a1820 <delay>
    digitalWrite(garageTrigger, LOW);
 80a0168:	2100      	movs	r1, #0
 80a016a:	200a      	movs	r0, #10
 80a016c:	f002 fd29 	bl	80a2bc2 <digitalWrite>

    return 0;
 80a0170:	2000      	movs	r0, #0
 80a0172:	bd38      	pop	{r3, r4, r5, pc}
{

  if (garageDoorState > 2 && command == "open")
  {

    Serial.println("Opening garage door ...");
 80a0174:	f002 fb92 	bl	80a289c <_Z16_fetch_usbserialv>
 80a0178:	490d      	ldr	r1, [pc, #52]	; (80a01b0 <_Z13triggerGarage6String+0x88>)
 80a017a:	f002 f816 	bl	80a21aa <_ZN5Print7printlnEPKc>

    digitalWrite(garageTrigger, HIGH);
 80a017e:	2101      	movs	r1, #1
 80a0180:	200a      	movs	r0, #10
 80a0182:	f002 fd1e 	bl	80a2bc2 <digitalWrite>
    delay(500);
 80a0186:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a018a:	f001 fb49 	bl	80a1820 <delay>
    digitalWrite(garageTrigger, LOW);
 80a018e:	2100      	movs	r1, #0
 80a0190:	200a      	movs	r0, #10
 80a0192:	f002 fd16 	bl	80a2bc2 <digitalWrite>
 80a0196:	2001      	movs	r0, #1
 80a0198:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
  }
  else
  {

    return -1;
 80a019a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
}
 80a019e:	bd38      	pop	{r3, r4, r5, pc}
 80a01a0:	2000031c 	.word	0x2000031c
 80a01a4:	080a627e 	.word	0x080a627e
 80a01a8:	080a6220 	.word	0x080a6220
 80a01ac:	080a623e 	.word	0x080a623e
 80a01b0:	080a6226 	.word	0x080a6226

080a01b4 <_Z13automaticMode6String>:
 * Description    : Setting mode for automatic opening / closing the garage door
 * Input          : on / off / status
 * Output         : 1 = activated, 0 = deactivated, -1 = invalid command
 *******************************************************************************/
int automaticMode(String command)
{
 80a01b4:	b538      	push	{r3, r4, r5, lr}
 80a01b6:	490f      	ldr	r1, [pc, #60]	; (80a01f4 <_Z13automaticMode6String+0x40>)
 80a01b8:	4605      	mov	r5, r0
 80a01ba:	f002 f9fd 	bl	80a25b8 <_ZNK6String6equalsEPKc>

  if (command == "on")
 80a01be:	4604      	mov	r4, r0
 80a01c0:	b118      	cbz	r0, 80a01ca <_Z13automaticMode6String+0x16>
  {

    bAutomaticDoorOperation = true;
 80a01c2:	4b0d      	ldr	r3, [pc, #52]	; (80a01f8 <_Z13automaticMode6String+0x44>)
 80a01c4:	2001      	movs	r0, #1
 80a01c6:	7018      	strb	r0, [r3, #0]
    return 1;
 80a01c8:	bd38      	pop	{r3, r4, r5, pc}
 80a01ca:	490c      	ldr	r1, [pc, #48]	; (80a01fc <_Z13automaticMode6String+0x48>)
 80a01cc:	4628      	mov	r0, r5
 80a01ce:	f002 f9f3 	bl	80a25b8 <_ZNK6String6equalsEPKc>
  }
  else if (command == "off")
 80a01d2:	b118      	cbz	r0, 80a01dc <_Z13automaticMode6String+0x28>
  {

    bAutomaticDoorOperation = false;
 80a01d4:	4b08      	ldr	r3, [pc, #32]	; (80a01f8 <_Z13automaticMode6String+0x44>)
    return 0;
 80a01d6:	4620      	mov	r0, r4
    return 1;
  }
  else if (command == "off")
  {

    bAutomaticDoorOperation = false;
 80a01d8:	701c      	strb	r4, [r3, #0]
    return 0;
 80a01da:	bd38      	pop	{r3, r4, r5, pc}
 80a01dc:	4908      	ldr	r1, [pc, #32]	; (80a0200 <_Z13automaticMode6String+0x4c>)
 80a01de:	4628      	mov	r0, r5
 80a01e0:	f002 f9ea 	bl	80a25b8 <_ZNK6String6equalsEPKc>
  }
  else if (command == "status")
 80a01e4:	b110      	cbz	r0, 80a01ec <_Z13automaticMode6String+0x38>
  {

    if (bAutomaticDoorOperation)
 80a01e6:	4b04      	ldr	r3, [pc, #16]	; (80a01f8 <_Z13automaticMode6String+0x44>)

  if (command == "on")
  {

    bAutomaticDoorOperation = true;
    return 1;
 80a01e8:	7818      	ldrb	r0, [r3, #0]
 80a01ea:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
  else
  {

    return -1;
 80a01ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
}
 80a01f0:	bd38      	pop	{r3, r4, r5, pc}
 80a01f2:	bf00      	nop
 80a01f4:	080a6488 	.word	0x080a6488
 80a01f8:	200004a4 	.word	0x200004a4
 80a01fc:	080a6256 	.word	0x080a6256
 80a0200:	080a625a 	.word	0x080a625a

080a0204 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.6.constprop.32>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a0204:	b510      	push	{r4, lr}
 80a0206:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a0208:	6803      	ldr	r3, [r0, #0]
 80a020a:	689b      	ldr	r3, [r3, #8]
 80a020c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a020e:	68a3      	ldr	r3, [r4, #8]
 80a0210:	3b01      	subs	r3, #1
 80a0212:	60a3      	str	r3, [r4, #8]
 80a0214:	b92b      	cbnz	r3, 80a0222 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.6.constprop.32+0x1e>
            _M_destroy();
 80a0216:	6823      	ldr	r3, [r4, #0]
 80a0218:	4620      	mov	r0, r4
        }
    }
 80a021a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a021e:	68db      	ldr	r3, [r3, #12]
 80a0220:	4718      	bx	r3
 80a0222:	bd10      	pop	{r4, pc}

080a0224 <_Z22garageDoorNotificationv>:
 * Description    : Notifies user about a left open garage door (see threshold)
 * Input          : None
 * Output         : None
 *******************************************************************************/
void garageDoorNotification()
{
 80a0224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a0226:	4b0a      	ldr	r3, [pc, #40]	; (80a0250 <_Z22garageDoorNotificationv+0x2c>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0228:	a802      	add	r0, sp, #8
 80a022a:	781b      	ldrb	r3, [r3, #0]
 80a022c:	4a09      	ldr	r2, [pc, #36]	; (80a0254 <_Z22garageDoorNotificationv+0x30>)
 80a022e:	f88d 3000 	strb.w	r3, [sp]
 80a0232:	4909      	ldr	r1, [pc, #36]	; (80a0258 <_Z22garageDoorNotificationv+0x34>)
 80a0234:	233c      	movs	r3, #60	; 0x3c
 80a0236:	f001 fc89 	bl	80a1b4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a023a:	9803      	ldr	r0, [sp, #12]
 80a023c:	b128      	cbz	r0, 80a024a <_Z22garageDoorNotificationv+0x26>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a023e:	6843      	ldr	r3, [r0, #4]
 80a0240:	3b01      	subs	r3, #1
 80a0242:	6043      	str	r3, [r0, #4]
 80a0244:	b90b      	cbnz	r3, 80a024a <_Z22garageDoorNotificationv+0x26>
 80a0246:	f7ff ffdd 	bl	80a0204 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.6.constprop.32>

  Particle.publish("GarageDoor", "Alert");
}
 80a024a:	b005      	add	sp, #20
 80a024c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0250:	200003e4 	.word	0x200003e4
 80a0254:	080a6261 	.word	0x080a6261
 80a0258:	080a6267 	.word	0x080a6267

080a025c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a025c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a025e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0260:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0262:	b113      	cbz	r3, 80a026a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0264:	2203      	movs	r2, #3
 80a0266:	4601      	mov	r1, r0
 80a0268:	4798      	blx	r3
    }
 80a026a:	4620      	mov	r0, r4
 80a026c:	bd10      	pop	{r4, pc}

080a026e <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
 80a026e:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 80a0270:	6880      	ldr	r0, [r0, #8]
 80a0272:	2300      	movs	r3, #0
 80a0274:	b138      	cbz	r0, 80a0286 <_ZN5Timer5_stopEjb+0x18>
 80a0276:	e88d 000a 	stmia.w	sp, {r1, r3}
 80a027a:	2102      	movs	r1, #2
 80a027c:	f001 f852 	bl	80a1324 <os_timer_change>
 80a0280:	fab0 f080 	clz	r0, r0
 80a0284:	0940      	lsrs	r0, r0, #5
    }
 80a0286:	b003      	add	sp, #12
 80a0288:	f85d fb04 	ldr.w	pc, [sp], #4

080a028c <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80a028c:	b538      	push	{r3, r4, r5, lr}
 80a028e:	4b10      	ldr	r3, [pc, #64]	; (80a02d0 <_ZN5TimerD1Ev+0x44>)
 80a0290:	4604      	mov	r4, r0
 80a0292:	6003      	str	r3, [r0, #0]
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle) {
 80a0294:	6883      	ldr	r3, [r0, #8]
 80a0296:	b1a3      	cbz	r3, 80a02c2 <_ZN5TimerD1Ev+0x36>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80a0298:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80a029c:	2200      	movs	r2, #0
 80a029e:	f7ff ffe6 	bl	80a026e <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
 80a02a2:	2100      	movs	r1, #0
 80a02a4:	68a0      	ldr	r0, [r4, #8]
 80a02a6:	f001 f84d 	bl	80a1344 <os_timer_set_id>
            while (running) {
 80a02aa:	7923      	ldrb	r3, [r4, #4]
 80a02ac:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80a02b0:	b113      	cbz	r3, 80a02b8 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
 80a02b2:	f001 f80f 	bl	80a12d4 <os_thread_yield>
 80a02b6:	e7f8      	b.n	80a02aa <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
 80a02b8:	4629      	mov	r1, r5
 80a02ba:	68a0      	ldr	r0, [r4, #8]
 80a02bc:	f001 f822 	bl	80a1304 <os_timer_destroy>
            handle = nullptr;
 80a02c0:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a02c2:	f104 000c 	add.w	r0, r4, #12
 80a02c6:	f7ff ffc9 	bl	80a025c <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80a02ca:	4620      	mov	r0, r4
 80a02cc:	bd38      	pop	{r3, r4, r5, pc}
 80a02ce:	bf00      	nop
 80a02d0:	080a6214 	.word	0x080a6214

080a02d4 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80a02d4:	b510      	push	{r4, lr}
 80a02d6:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80a02d8:	f7ff ffd8 	bl	80a028c <_ZN5TimerD1Ev>
 80a02dc:	4620      	mov	r0, r4
 80a02de:	211c      	movs	r1, #28
 80a02e0:	f002 fcfd 	bl	80a2cde <_ZdlPvj>
 80a02e4:	4620      	mov	r0, r4
 80a02e6:	bd10      	pop	{r4, pc}

080a02e8 <_Z19readGarageDoorStatev>:
 * Description    : Reads the state of the garage door
 * Input          : None
 * Output         : None
 *******************************************************************************/
void readGarageDoorState()
{
 80a02e8:	b537      	push	{r0, r1, r2, r4, r5, lr}

  int doorSwitchOpen = digitalRead(doorSensor1);
 80a02ea:	2000      	movs	r0, #0
 80a02ec:	f002 fc82 	bl	80a2bf4 <digitalRead>
 80a02f0:	4605      	mov	r5, r0
  int doorSwitchClosed = digitalRead(doorSensor2);
 80a02f2:	2001      	movs	r0, #1
 80a02f4:	f002 fc7e 	bl	80a2bf4 <digitalRead>

  if (doorSwitchOpen == HIGH && doorSwitchClosed == LOW && garageDoorState > 1)
 80a02f8:	2d01      	cmp	r5, #1
 *******************************************************************************/
void readGarageDoorState()
{

  int doorSwitchOpen = digitalRead(doorSensor1);
  int doorSwitchClosed = digitalRead(doorSensor2);
 80a02fa:	4604      	mov	r4, r0

  if (doorSwitchOpen == HIGH && doorSwitchClosed == LOW && garageDoorState > 1)
 80a02fc:	d122      	bne.n	80a0344 <_Z19readGarageDoorStatev+0x5c>
 80a02fe:	2800      	cmp	r0, #0
 80a0300:	d149      	bne.n	80a0396 <_Z19readGarageDoorStatev+0xae>
 80a0302:	4b2e      	ldr	r3, [pc, #184]	; (80a03bc <_Z19readGarageDoorStatev+0xd4>)
 80a0304:	681a      	ldr	r2, [r3, #0]
 80a0306:	2a01      	cmp	r2, #1
 80a0308:	dd56      	ble.n	80a03b8 <_Z19readGarageDoorStatev+0xd0>
  {
    // garage door open

    garageDoorState = 1; // 1 = garage door open
 80a030a:	601d      	str	r5, [r3, #0]
    garageDoorStateCloud = "open";
 80a030c:	492c      	ldr	r1, [pc, #176]	; (80a03c0 <_Z19readGarageDoorStatev+0xd8>)
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80a030e:	4d2d      	ldr	r5, [pc, #180]	; (80a03c4 <_Z19readGarageDoorStatev+0xdc>)
 80a0310:	482d      	ldr	r0, [pc, #180]	; (80a03c8 <_Z19readGarageDoorStatev+0xe0>)
 80a0312:	f002 f940 	bl	80a2596 <_ZN6StringaSEPKc>
    Serial.println("Garage door open");
 80a0316:	f002 fac1 	bl	80a289c <_Z16_fetch_usbserialv>
 80a031a:	492c      	ldr	r1, [pc, #176]	; (80a03cc <_Z19readGarageDoorStatev+0xe4>)
 80a031c:	f001 ff45 	bl	80a21aa <_ZN5Print7printlnEPKc>
 80a0320:	4622      	mov	r2, r4
 80a0322:	4621      	mov	r1, r4
 80a0324:	4628      	mov	r0, r5
 80a0326:	f7ff ffa2 	bl	80a026e <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 80a032a:	68a8      	ldr	r0, [r5, #8]
 80a032c:	2800      	cmp	r0, #0
 80a032e:	d043      	beq.n	80a03b8 <_Z19readGarageDoorStatev+0xd0>
 80a0330:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80a0334:	9300      	str	r3, [sp, #0]
 80a0336:	9401      	str	r4, [sp, #4]
 80a0338:	4623      	mov	r3, r4
 80a033a:	4622      	mov	r2, r4
 80a033c:	4621      	mov	r1, r4
 80a033e:	f000 fff1 	bl	80a1324 <os_timer_change>
 80a0342:	e039      	b.n	80a03b8 <_Z19readGarageDoorStatev+0xd0>

    // start timer for notification threshold
    garageDoorTimer.start();
  }
  else if (doorSwitchOpen == LOW && doorSwitchClosed == LOW && garageDoorState != 2)
 80a0344:	2d00      	cmp	r5, #0
 80a0346:	d137      	bne.n	80a03b8 <_Z19readGarageDoorStatev+0xd0>
 80a0348:	b9a8      	cbnz	r0, 80a0376 <_Z19readGarageDoorStatev+0x8e>
 80a034a:	4b1c      	ldr	r3, [pc, #112]	; (80a03bc <_Z19readGarageDoorStatev+0xd4>)
 80a034c:	681a      	ldr	r2, [r3, #0]
 80a034e:	2a02      	cmp	r2, #2
 80a0350:	d032      	beq.n	80a03b8 <_Z19readGarageDoorStatev+0xd0>
  {
    // garage door in transition

    garageDoorState = 2; // 2 = garage door in transition
 80a0352:	2202      	movs	r2, #2
    garageDoorStateCloud = "transition";
 80a0354:	491e      	ldr	r1, [pc, #120]	; (80a03d0 <_Z19readGarageDoorStatev+0xe8>)
 80a0356:	481c      	ldr	r0, [pc, #112]	; (80a03c8 <_Z19readGarageDoorStatev+0xe0>)
  }
  else if (doorSwitchOpen == LOW && doorSwitchClosed == LOW && garageDoorState != 2)
  {
    // garage door in transition

    garageDoorState = 2; // 2 = garage door in transition
 80a0358:	601a      	str	r2, [r3, #0]
    garageDoorStateCloud = "transition";
 80a035a:	f002 f91c 	bl	80a2596 <_ZN6StringaSEPKc>
    Serial.println("Garage door in transition");
 80a035e:	f002 fa9d 	bl	80a289c <_Z16_fetch_usbserialv>
 80a0362:	491c      	ldr	r1, [pc, #112]	; (80a03d4 <_Z19readGarageDoorStatev+0xec>)
 80a0364:	f001 ff21 	bl	80a21aa <_ZN5Print7printlnEPKc>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80a0368:	4622      	mov	r2, r4
 80a036a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80a036e:	4815      	ldr	r0, [pc, #84]	; (80a03c4 <_Z19readGarageDoorStatev+0xdc>)
 80a0370:	f7ff ff7d 	bl	80a026e <_ZN5Timer5_stopEjb>
 80a0374:	e020      	b.n	80a03b8 <_Z19readGarageDoorStatev+0xd0>

    // stop timer for notification threshold
    garageDoorTimer.stop();
  }
  else if (doorSwitchOpen == LOW && doorSwitchClosed == HIGH && garageDoorState < 3)
 80a0376:	2801      	cmp	r0, #1
 80a0378:	d11e      	bne.n	80a03b8 <_Z19readGarageDoorStatev+0xd0>
 80a037a:	4b10      	ldr	r3, [pc, #64]	; (80a03bc <_Z19readGarageDoorStatev+0xd4>)
 80a037c:	681a      	ldr	r2, [r3, #0]
 80a037e:	2a02      	cmp	r2, #2
 80a0380:	dc1a      	bgt.n	80a03b8 <_Z19readGarageDoorStatev+0xd0>
  {
    // garage door closed

    garageDoorState = 3; // 3 = garage door closed
 80a0382:	2203      	movs	r2, #3
    garageDoorStateCloud = "closed";
 80a0384:	4914      	ldr	r1, [pc, #80]	; (80a03d8 <_Z19readGarageDoorStatev+0xf0>)
 80a0386:	4810      	ldr	r0, [pc, #64]	; (80a03c8 <_Z19readGarageDoorStatev+0xe0>)
  }
  else if (doorSwitchOpen == LOW && doorSwitchClosed == HIGH && garageDoorState < 3)
  {
    // garage door closed

    garageDoorState = 3; // 3 = garage door closed
 80a0388:	601a      	str	r2, [r3, #0]
    garageDoorStateCloud = "closed";
 80a038a:	f002 f904 	bl	80a2596 <_ZN6StringaSEPKc>
    Serial.println("Garage door closed");
 80a038e:	f002 fa85 	bl	80a289c <_Z16_fetch_usbserialv>
 80a0392:	4912      	ldr	r1, [pc, #72]	; (80a03dc <_Z19readGarageDoorStatev+0xf4>)
 80a0394:	e00b      	b.n	80a03ae <_Z19readGarageDoorStatev+0xc6>
  }
  else if (doorSwitchOpen == HIGH && doorSwitchClosed == HIGH)
 80a0396:	2801      	cmp	r0, #1
 80a0398:	d10e      	bne.n	80a03b8 <_Z19readGarageDoorStatev+0xd0>
  {
    // Sensor failure

    bAutomaticDoorOperation = false; // deactivating automatic door mode, to be activated manually afterwards
 80a039a:	4b11      	ldr	r3, [pc, #68]	; (80a03e0 <_Z19readGarageDoorStatev+0xf8>)
 80a039c:	2200      	movs	r2, #0
    garageDoorStateCloud = "Sensor failure";
 80a039e:	4911      	ldr	r1, [pc, #68]	; (80a03e4 <_Z19readGarageDoorStatev+0xfc>)
 80a03a0:	4809      	ldr	r0, [pc, #36]	; (80a03c8 <_Z19readGarageDoorStatev+0xe0>)
  }
  else if (doorSwitchOpen == HIGH && doorSwitchClosed == HIGH)
  {
    // Sensor failure

    bAutomaticDoorOperation = false; // deactivating automatic door mode, to be activated manually afterwards
 80a03a2:	701a      	strb	r2, [r3, #0]
    garageDoorStateCloud = "Sensor failure";
 80a03a4:	f002 f8f7 	bl	80a2596 <_ZN6StringaSEPKc>
    // Error treatment to be defined
    Serial.println("Garage door failure!");
 80a03a8:	f002 fa78 	bl	80a289c <_Z16_fetch_usbserialv>
 80a03ac:	490e      	ldr	r1, [pc, #56]	; (80a03e8 <_Z19readGarageDoorStatev+0x100>)
  }
}
 80a03ae:	b003      	add	sp, #12
 80a03b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    // Sensor failure

    bAutomaticDoorOperation = false; // deactivating automatic door mode, to be activated manually afterwards
    garageDoorStateCloud = "Sensor failure";
    // Error treatment to be defined
    Serial.println("Garage door failure!");
 80a03b4:	f001 bef9 	b.w	80a21aa <_ZN5Print7printlnEPKc>
  }
}
 80a03b8:	b003      	add	sp, #12
 80a03ba:	bd30      	pop	{r4, r5, pc}
 80a03bc:	2000031c 	.word	0x2000031c
 80a03c0:	080a627e 	.word	0x080a627e
 80a03c4:	200004a8 	.word	0x200004a8
 80a03c8:	20000404 	.word	0x20000404
 80a03cc:	080a6272 	.word	0x080a6272
 80a03d0:	080a6292 	.word	0x080a6292
 80a03d4:	080a6283 	.word	0x080a6283
 80a03d8:	080a62a9 	.word	0x080a62a9
 80a03dc:	080a629d 	.word	0x080a629d
 80a03e0:	200004a4 	.word	0x200004a4
 80a03e4:	080a62b0 	.word	0x080a62b0
 80a03e8:	080a62bf 	.word	0x080a62bf

080a03ec <_Z23temperatureNotificationv>:
 * Description    : Notifies user about low temperature (see threshold)
 * Input          : None
 * Output         : None
 *******************************************************************************/
void temperatureNotification()
{
 80a03ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a03ee:	4b0a      	ldr	r3, [pc, #40]	; (80a0418 <_Z23temperatureNotificationv+0x2c>)
 80a03f0:	a802      	add	r0, sp, #8
 80a03f2:	781b      	ldrb	r3, [r3, #0]
 80a03f4:	4a09      	ldr	r2, [pc, #36]	; (80a041c <_Z23temperatureNotificationv+0x30>)
 80a03f6:	f88d 3000 	strb.w	r3, [sp]
 80a03fa:	4909      	ldr	r1, [pc, #36]	; (80a0420 <_Z23temperatureNotificationv+0x34>)
 80a03fc:	233c      	movs	r3, #60	; 0x3c
 80a03fe:	f001 fba5 	bl	80a1b4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0402:	9803      	ldr	r0, [sp, #12]
 80a0404:	b128      	cbz	r0, 80a0412 <_Z23temperatureNotificationv+0x26>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0406:	6843      	ldr	r3, [r0, #4]
 80a0408:	3b01      	subs	r3, #1
 80a040a:	6043      	str	r3, [r0, #4]
 80a040c:	b90b      	cbnz	r3, 80a0412 <_Z23temperatureNotificationv+0x26>
 80a040e:	f7ff fef9 	bl	80a0204 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.6.constprop.32>

  Particle.publish("Temperature", "Alert");
}
 80a0412:	b005      	add	sp, #20
 80a0414:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0418:	200003e4 	.word	0x200003e4
 80a041c:	080a6261 	.word	0x080a6261
 80a0420:	080a62d4 	.word	0x080a62d4
 80a0424:	00000000 	.word	0x00000000

080a0428 <_Z15measureDistancev>:
 * Description    : Measures the Distance to an object using ultrasonic sensors
 * Input          : Sensor Number
 * Output         : Distance (cm)
 *******************************************************************************/
int measureDistance()
{
 80a0428:	b5d0      	push	{r4, r6, r7, lr}

  uint32_t distance, timeMeasurement, timeDistance;

  // Ausbreitungsgeschwindigkeit (in Luft) = 331,5 + (0,6 * Temp°C) speedOfSound = 331,5 + ( 0.6 * dTemperature);
  //float speedOfSound = 331.5 + 0.6 * 22; // 22 °C
  double speedOfSound = 331.5 + 0.6 * dTemperature; // 22 °C
 80a042a:	a31b      	add	r3, pc, #108	; (adr r3, 80a0498 <_Z15measureDistancev+0x70>)
 80a042c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0430:	491f      	ldr	r1, [pc, #124]	; (80a04b0 <_Z15measureDistancev+0x88>)
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a0432:	4c20      	ldr	r4, [pc, #128]	; (80a04b4 <_Z15measureDistancev+0x8c>)
 80a0434:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a0438:	f004 fbd8 	bl	80a4bec <__aeabi_dmul>
 80a043c:	a318      	add	r3, pc, #96	; (adr r3, 80a04a0 <_Z15measureDistancev+0x78>)
 80a043e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0442:	f004 fa21 	bl	80a4888 <__adddf3>
 80a0446:	4606      	mov	r6, r0
 80a0448:	460f      	mov	r7, r1

  // trigger the sensor by sending a HIGH pulse of 10 or more microseconds
  digitalWrite(usTrigger, LOW);
 80a044a:	2003      	movs	r0, #3
 80a044c:	2100      	movs	r1, #0
 80a044e:	f002 fbb8 	bl	80a2bc2 <digitalWrite>
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a0452:	2003      	movs	r0, #3
 80a0454:	f000 ff86 	bl	80a1364 <HAL_Delay_Microseconds>
 80a0458:	6823      	ldr	r3, [r4, #0]
 80a045a:	200a      	movs	r0, #10
 80a045c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80a045e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80a0462:	8313      	strh	r3, [r2, #24]
 80a0464:	f000 ff7e 	bl	80a1364 <HAL_Delay_Microseconds>
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a0468:	6823      	ldr	r3, [r4, #0]
  digitalWriteFast(usTrigger, HIGH);
  delayMicroseconds(10);
  digitalWriteFast(usTrigger, LOW);

  // take ulrasonic measurement
  timeMeasurement = pulseIn(usEcho, HIGH);
 80a046a:	2101      	movs	r1, #1
 80a046c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80a046e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80a0472:	2004      	movs	r0, #4
 80a0474:	8353      	strh	r3, [r2, #26]
 80a0476:	f002 fbd0 	bl	80a2c1a <pulseIn>
  //Serial.printf("Distance %i",sensorNumber);
  //Serial.printf(": %i",distance);
  //Serial.println();

  // calclulate distance in cm
  return distance;
 80a047a:	0840      	lsrs	r0, r0, #1
 80a047c:	f004 fb40 	bl	80a4b00 <__aeabi_ui2d>
 80a0480:	4632      	mov	r2, r6
 80a0482:	463b      	mov	r3, r7
 80a0484:	f004 fbb2 	bl	80a4bec <__aeabi_dmul>
 80a0488:	a307      	add	r3, pc, #28	; (adr r3, 80a04a8 <_Z15measureDistancev+0x80>)
 80a048a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a048e:	f004 fbad 	bl	80a4bec <__aeabi_dmul>
 80a0492:	f004 fe83 	bl	80a519c <__aeabi_d2uiz>
  delayMicroseconds(50);
}
 80a0496:	bdd0      	pop	{r4, r6, r7, pc}
 80a0498:	33333333 	.word	0x33333333
 80a049c:	3fe33333 	.word	0x3fe33333
 80a04a0:	00000000 	.word	0x00000000
 80a04a4:	4074b800 	.word	0x4074b800
 80a04a8:	eb1c432d 	.word	0xeb1c432d
 80a04ac:	3f1a36e2 	.word	0x3f1a36e2
 80a04b0:	20000300 	.word	0x20000300
 80a04b4:	2000041c 	.word	0x2000041c

080a04b8 <_Z13detectVehiclev>:
 * Description    : Checks the presence of a vehcile in the garage
 * Input          : None
 * Output         : TRUE (vehicle detected), FALSE (no vehicle detected)
 *******************************************************************************/
bool detectVehicle()
{
 80a04b8:	b508      	push	{r3, lr}

  int distance = sensorHight - measureDistance();
 80a04ba:	f7ff ffb5 	bl	80a0428 <_Z15measureDistancev>
 80a04be:	f1c0 00c8 	rsb	r0, r0, #200	; 0xc8
  else
  {

    return false;
  }
}
 80a04c2:	281d      	cmp	r0, #29
 80a04c4:	bfd4      	ite	le
 80a04c6:	2000      	movle	r0, #0
 80a04c8:	2001      	movgt	r0, #1
 80a04ca:	bd08      	pop	{r3, pc}

080a04cc <_Z16takeMeasurementsi>:
 * Description    : Takes ultrasonic measurements
 * Input          : None
 * Output         : None
 *******************************************************************************/
void takeMeasurements(int interval)
{
 80a04cc:	b538      	push	{r3, r4, r5, lr}
 80a04ce:	4605      	mov	r5, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a04d0:	f000 ff58 	bl	80a1384 <HAL_Timer_Get_Milli_Seconds>

  if (millis() - previousMillisUs >= interval)
 80a04d4:	4c08      	ldr	r4, [pc, #32]	; (80a04f8 <_Z16takeMeasurementsi+0x2c>)
 80a04d6:	6823      	ldr	r3, [r4, #0]
 80a04d8:	1ac0      	subs	r0, r0, r3
 80a04da:	42a8      	cmp	r0, r5
 80a04dc:	d30a      	bcc.n	80a04f4 <_Z16takeMeasurementsi+0x28>
 80a04de:	f000 ff51 	bl	80a1384 <HAL_Timer_Get_Milli_Seconds>
  {

    // save the last time a measurement was taken
    previousMillisUs = millis();
 80a04e2:	6020      	str	r0, [r4, #0]

    // Sensor 1 = vehicle inside garage
    if (detectVehicle() == true)
 80a04e4:	f7ff ffe8 	bl	80a04b8 <_Z13detectVehiclev>
 80a04e8:	4b04      	ldr	r3, [pc, #16]	; (80a04fc <_Z16takeMeasurementsi+0x30>)
 80a04ea:	b110      	cbz	r0, 80a04f2 <_Z16takeMeasurementsi+0x26>
    {
      // vehicle in garage

      //digitalWrite(statusLEDVehicle, HIGH);
      sensorDetect = true;
 80a04ec:	2201      	movs	r2, #1
 80a04ee:	701a      	strb	r2, [r3, #0]
 80a04f0:	bd38      	pop	{r3, r4, r5, pc}
    }
    else
    {

      //digitalWrite(statusLEDVehicle, LOW);
      sensorDetect = false;
 80a04f2:	7018      	strb	r0, [r3, #0]
 80a04f4:	bd38      	pop	{r3, r4, r5, pc}
 80a04f6:	bf00      	nop
 80a04f8:	20000414 	.word	0x20000414
 80a04fc:	200003ec 	.word	0x200003ec

080a0500 <_Z13readTempHumidv>:
 * Description    : Reads Temperature and Humidity of Sensor DHT22
 * Input          : None
 * Output         : None
 *******************************************************************************/
void readTempHumid()
{
 80a0500:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a0504:	f000 ff3e 	bl	80a1384 <HAL_Timer_Get_Milli_Seconds>

  // Check if we need to start the next sample
  if (millis() > DHTnextSampleTime)
 80a0508:	4e8a      	ldr	r6, [pc, #552]	; (80a0734 <_Z13readTempHumidv+0x234>)
 80a050a:	6833      	ldr	r3, [r6, #0]
 80a050c:	4283      	cmp	r3, r0
 80a050e:	f080 810d 	bcs.w	80a072c <_Z13readTempHumidv+0x22c>
  {
    if (!bDHTstarted)
 80a0512:	4c89      	ldr	r4, [pc, #548]	; (80a0738 <_Z13readTempHumidv+0x238>)
 80a0514:	7823      	ldrb	r3, [r4, #0]
 80a0516:	b973      	cbnz	r3, 80a0536 <_Z13readTempHumidv+0x36>
    { // start the sample
      Serial.print("\n\n");
 80a0518:	f002 f9c0 	bl	80a289c <_Z16_fetch_usbserialv>
 80a051c:	4987      	ldr	r1, [pc, #540]	; (80a073c <_Z13readTempHumidv+0x23c>)
 80a051e:	f001 fe31 	bl	80a2184 <_ZN5Print5printEPKc>
      Serial.print("Retrieving information from sensor. ");
 80a0522:	f002 f9bb 	bl	80a289c <_Z16_fetch_usbserialv>
 80a0526:	4986      	ldr	r1, [pc, #536]	; (80a0740 <_Z13readTempHumidv+0x240>)
 80a0528:	f001 fe2c 	bl	80a2184 <_ZN5Print5printEPKc>
      DHT.acquire();
 80a052c:	4885      	ldr	r0, [pc, #532]	; (80a0744 <_Z13readTempHumidv+0x244>)
 80a052e:	f000 fc61 	bl	80a0df4 <_ZN14PietteTech_DHT7acquireEv>
      bDHTstarted = true;
 80a0532:	2301      	movs	r3, #1
 80a0534:	7023      	strb	r3, [r4, #0]
    }

    if (!DHT.acquiring())
 80a0536:	4883      	ldr	r0, [pc, #524]	; (80a0744 <_Z13readTempHumidv+0x244>)
 80a0538:	f000 fd26 	bl	80a0f88 <_ZN14PietteTech_DHT9acquiringEv>
 80a053c:	4f82      	ldr	r7, [pc, #520]	; (80a0748 <_Z13readTempHumidv+0x248>)
 80a053e:	2800      	cmp	r0, #0
 80a0540:	f040 80cd 	bne.w	80a06de <_Z13readTempHumidv+0x1de>
    { // has sample completed?

      // get DHT status
      int result = DHT.getStatus();
 80a0544:	487f      	ldr	r0, [pc, #508]	; (80a0744 <_Z13readTempHumidv+0x244>)
 80a0546:	f000 fd2b 	bl	80a0fa0 <_ZN14PietteTech_DHT9getStatusEv>
 80a054a:	4605      	mov	r5, r0

      Serial.print("Read sensor: ");
 80a054c:	f002 f9a6 	bl	80a289c <_Z16_fetch_usbserialv>
 80a0550:	497e      	ldr	r1, [pc, #504]	; (80a074c <_Z13readTempHumidv+0x24c>)
 80a0552:	f001 fe17 	bl	80a2184 <_ZN5Print5printEPKc>

      switch (result)
 80a0556:	1de8      	adds	r0, r5, #7
 80a0558:	2807      	cmp	r0, #7
 80a055a:	d83d      	bhi.n	80a05d8 <_Z13readTempHumidv+0xd8>
 80a055c:	e8df f000 	tbb	[pc, r0]
 80a0560:	20272e35 	.word	0x20272e35
 80a0564:	040b1219 	.word	0x040b1219
      {

      case DHTLIB_OK:
        Serial.println("OK");
 80a0568:	f002 f998 	bl	80a289c <_Z16_fetch_usbserialv>
 80a056c:	4978      	ldr	r1, [pc, #480]	; (80a0750 <_Z13readTempHumidv+0x250>)
 80a056e:	f001 fe1c 	bl	80a21aa <_ZN5Print7printlnEPKc>
        sensorStatus = "OK";
 80a0572:	4977      	ldr	r1, [pc, #476]	; (80a0750 <_Z13readTempHumidv+0x250>)
 80a0574:	e036      	b.n	80a05e4 <_Z13readTempHumidv+0xe4>
        break;

      case DHTLIB_ERROR_CHECKSUM:
        Serial.println("Error\n\r\tChecksum error");
 80a0576:	f002 f991 	bl	80a289c <_Z16_fetch_usbserialv>
 80a057a:	4976      	ldr	r1, [pc, #472]	; (80a0754 <_Z13readTempHumidv+0x254>)
 80a057c:	f001 fe15 	bl	80a21aa <_ZN5Print7printlnEPKc>
        sensorStatus = "Error\n\r\tChecksum error";
 80a0580:	4974      	ldr	r1, [pc, #464]	; (80a0754 <_Z13readTempHumidv+0x254>)
 80a0582:	e02f      	b.n	80a05e4 <_Z13readTempHumidv+0xe4>
        break;

      case DHTLIB_ERROR_ISR_TIMEOUT:
        Serial.println("Error\n\r\tISR time out error");
 80a0584:	f002 f98a 	bl	80a289c <_Z16_fetch_usbserialv>
 80a0588:	4973      	ldr	r1, [pc, #460]	; (80a0758 <_Z13readTempHumidv+0x258>)
 80a058a:	f001 fe0e 	bl	80a21aa <_ZN5Print7printlnEPKc>
        sensorStatus = "Error\n\r\tISR time out error";
 80a058e:	4972      	ldr	r1, [pc, #456]	; (80a0758 <_Z13readTempHumidv+0x258>)
 80a0590:	e028      	b.n	80a05e4 <_Z13readTempHumidv+0xe4>
        break;

      case DHTLIB_ERROR_RESPONSE_TIMEOUT:
        Serial.println("Error\n\r\tResponse time out error");
 80a0592:	f002 f983 	bl	80a289c <_Z16_fetch_usbserialv>
 80a0596:	4971      	ldr	r1, [pc, #452]	; (80a075c <_Z13readTempHumidv+0x25c>)
 80a0598:	f001 fe07 	bl	80a21aa <_ZN5Print7printlnEPKc>
        sensorStatus = "Error\n\r\tResponse time out error";
 80a059c:	496f      	ldr	r1, [pc, #444]	; (80a075c <_Z13readTempHumidv+0x25c>)
 80a059e:	e021      	b.n	80a05e4 <_Z13readTempHumidv+0xe4>
        break;

      case DHTLIB_ERROR_DATA_TIMEOUT:
        Serial.println("Error\n\r\tData time out error");
 80a05a0:	f002 f97c 	bl	80a289c <_Z16_fetch_usbserialv>
 80a05a4:	496e      	ldr	r1, [pc, #440]	; (80a0760 <_Z13readTempHumidv+0x260>)
 80a05a6:	f001 fe00 	bl	80a21aa <_ZN5Print7printlnEPKc>
        sensorStatus = "Error\n\r\tData time out error";
 80a05aa:	496d      	ldr	r1, [pc, #436]	; (80a0760 <_Z13readTempHumidv+0x260>)
 80a05ac:	e01a      	b.n	80a05e4 <_Z13readTempHumidv+0xe4>
        break;

      case DHTLIB_ERROR_ACQUIRING:
        Serial.println("Error\n\r\tAcquiring");
 80a05ae:	f002 f975 	bl	80a289c <_Z16_fetch_usbserialv>
 80a05b2:	496c      	ldr	r1, [pc, #432]	; (80a0764 <_Z13readTempHumidv+0x264>)
 80a05b4:	f001 fdf9 	bl	80a21aa <_ZN5Print7printlnEPKc>
        sensorStatus = "Error\n\r\tAcquiring";
 80a05b8:	496a      	ldr	r1, [pc, #424]	; (80a0764 <_Z13readTempHumidv+0x264>)
 80a05ba:	e013      	b.n	80a05e4 <_Z13readTempHumidv+0xe4>
        break;

      case DHTLIB_ERROR_DELTA:
        Serial.println("Error\n\r\tDelta time to small");
 80a05bc:	f002 f96e 	bl	80a289c <_Z16_fetch_usbserialv>
 80a05c0:	4969      	ldr	r1, [pc, #420]	; (80a0768 <_Z13readTempHumidv+0x268>)
 80a05c2:	f001 fdf2 	bl	80a21aa <_ZN5Print7printlnEPKc>
        sensorStatus = "Error\n\r\tDelta time to small";
 80a05c6:	4968      	ldr	r1, [pc, #416]	; (80a0768 <_Z13readTempHumidv+0x268>)
 80a05c8:	e00c      	b.n	80a05e4 <_Z13readTempHumidv+0xe4>
        break;

      case DHTLIB_ERROR_NOTSTARTED:
        Serial.println("Error\n\r\tNot started");
 80a05ca:	f002 f967 	bl	80a289c <_Z16_fetch_usbserialv>
 80a05ce:	4967      	ldr	r1, [pc, #412]	; (80a076c <_Z13readTempHumidv+0x26c>)
 80a05d0:	f001 fdeb 	bl	80a21aa <_ZN5Print7printlnEPKc>
        sensorStatus = "Error\n\r\tNot started";
 80a05d4:	4965      	ldr	r1, [pc, #404]	; (80a076c <_Z13readTempHumidv+0x26c>)
 80a05d6:	e005      	b.n	80a05e4 <_Z13readTempHumidv+0xe4>
        break;

      default:
        Serial.println("Unknown error");
 80a05d8:	f002 f960 	bl	80a289c <_Z16_fetch_usbserialv>
 80a05dc:	4964      	ldr	r1, [pc, #400]	; (80a0770 <_Z13readTempHumidv+0x270>)
 80a05de:	f001 fde4 	bl	80a21aa <_ZN5Print7printlnEPKc>
        sensorStatus = "Unknown error";
 80a05e2:	4963      	ldr	r1, [pc, #396]	; (80a0770 <_Z13readTempHumidv+0x270>)
 80a05e4:	4863      	ldr	r0, [pc, #396]	; (80a0774 <_Z13readTempHumidv+0x274>)
 80a05e6:	f001 ffd6 	bl	80a2596 <_ZN6StringaSEPKc>
        break;
      }

      Serial.print("Humidity (%): ");
 80a05ea:	f002 f957 	bl	80a289c <_Z16_fetch_usbserialv>
 80a05ee:	4962      	ldr	r1, [pc, #392]	; (80a0778 <_Z13readTempHumidv+0x278>)
 80a05f0:	f001 fdc8 	bl	80a2184 <_ZN5Print5printEPKc>
      Serial.println(DHT.getHumidity(), 1);
 80a05f4:	f002 f952 	bl	80a289c <_Z16_fetch_usbserialv>
 80a05f8:	4680      	mov	r8, r0
 80a05fa:	4852      	ldr	r0, [pc, #328]	; (80a0744 <_Z13readTempHumidv+0x244>)
 80a05fc:	f000 fcec 	bl	80a0fd8 <_ZN14PietteTech_DHT11getHumidityEv>
 80a0600:	f004 faa0 	bl	80a4b44 <__aeabi_f2d>
 80a0604:	2501      	movs	r5, #1
 80a0606:	4602      	mov	r2, r0
 80a0608:	460b      	mov	r3, r1
 80a060a:	9500      	str	r5, [sp, #0]
 80a060c:	4640      	mov	r0, r8
 80a060e:	f001 fed3 	bl	80a23b8 <_ZN5Print7printlnEdi>
      //Particle.publish("Humidity (%)", String(DHT.getHumidity(), 1));
      dHumidity = (double)(roundf((10.0 * DHT.getHumidity())) / 10.0);
 80a0612:	484c      	ldr	r0, [pc, #304]	; (80a0744 <_Z13readTempHumidv+0x244>)
 80a0614:	f000 fce0 	bl	80a0fd8 <_ZN14PietteTech_DHT11getHumidityEv>
 80a0618:	4958      	ldr	r1, [pc, #352]	; (80a077c <_Z13readTempHumidv+0x27c>)
 80a061a:	f004 ff3d 	bl	80a5498 <__aeabi_fmul>
 80a061e:	f002 fcab 	bl	80a2f78 <roundf>
 80a0622:	f004 fa8f 	bl	80a4b44 <__aeabi_f2d>
 80a0626:	2200      	movs	r2, #0
 80a0628:	4b55      	ldr	r3, [pc, #340]	; (80a0780 <_Z13readTempHumidv+0x280>)
 80a062a:	f004 fc09 	bl	80a4e40 <__aeabi_ddiv>
 80a062e:	4b55      	ldr	r3, [pc, #340]	; (80a0784 <_Z13readTempHumidv+0x284>)
 80a0630:	e9c3 0100 	strd	r0, r1, [r3]

      Serial.print("Temperature (°C): ");
 80a0634:	f002 f932 	bl	80a289c <_Z16_fetch_usbserialv>
 80a0638:	4953      	ldr	r1, [pc, #332]	; (80a0788 <_Z13readTempHumidv+0x288>)
 80a063a:	f001 fda3 	bl	80a2184 <_ZN5Print5printEPKc>
      Serial.println((DHT.getCelsius() - tempOffset), 1);
 80a063e:	f002 f92d 	bl	80a289c <_Z16_fetch_usbserialv>
 80a0642:	4680      	mov	r8, r0
 80a0644:	483f      	ldr	r0, [pc, #252]	; (80a0744 <_Z13readTempHumidv+0x244>)
 80a0646:	f000 fcad 	bl	80a0fa4 <_ZN14PietteTech_DHT10getCelsiusEv>
 80a064a:	4950      	ldr	r1, [pc, #320]	; (80a078c <_Z13readTempHumidv+0x28c>)
 80a064c:	f004 fe1a 	bl	80a5284 <__aeabi_fsub>
 80a0650:	f004 fa78 	bl	80a4b44 <__aeabi_f2d>
 80a0654:	9500      	str	r5, [sp, #0]
 80a0656:	4602      	mov	r2, r0
 80a0658:	460b      	mov	r3, r1
 80a065a:	4640      	mov	r0, r8
 80a065c:	f001 feac 	bl	80a23b8 <_ZN5Print7printlnEdi>
      //Particle.publish("Temperature (°C)", String((DHT.getCelsius()-tempOffset), 1));
      dTemperature = (double)(roundf((10.0 * (DHT.getCelsius() - tempOffset))) / 10.0);
 80a0660:	4838      	ldr	r0, [pc, #224]	; (80a0744 <_Z13readTempHumidv+0x244>)
 80a0662:	f000 fc9f 	bl	80a0fa4 <_ZN14PietteTech_DHT10getCelsiusEv>
 80a0666:	4949      	ldr	r1, [pc, #292]	; (80a078c <_Z13readTempHumidv+0x28c>)
 80a0668:	f004 fe0c 	bl	80a5284 <__aeabi_fsub>
 80a066c:	4943      	ldr	r1, [pc, #268]	; (80a077c <_Z13readTempHumidv+0x27c>)
 80a066e:	f004 ff13 	bl	80a5498 <__aeabi_fmul>
 80a0672:	f002 fc81 	bl	80a2f78 <roundf>
 80a0676:	f004 fa65 	bl	80a4b44 <__aeabi_f2d>
 80a067a:	2200      	movs	r2, #0
 80a067c:	4b40      	ldr	r3, [pc, #256]	; (80a0780 <_Z13readTempHumidv+0x280>)
 80a067e:	f004 fbdf 	bl	80a4e40 <__aeabi_ddiv>
 80a0682:	e9c7 0100 	strd	r0, r1, [r7]
      //Serial.println(DHT.getFahrenheit(), 1);

      //Serial.print("Temperature (K): ");
      //Serial.println(DHT.getKelvin(), 1);

      Serial.print("Dew Point (°C): ");
 80a0686:	f002 f909 	bl	80a289c <_Z16_fetch_usbserialv>
 80a068a:	4941      	ldr	r1, [pc, #260]	; (80a0790 <_Z13readTempHumidv+0x290>)
 80a068c:	f001 fd7a 	bl	80a2184 <_ZN5Print5printEPKc>
      Serial.println(DHT.getDewPoint());
 80a0690:	f002 f904 	bl	80a289c <_Z16_fetch_usbserialv>
 80a0694:	4680      	mov	r8, r0
 80a0696:	482b      	ldr	r0, [pc, #172]	; (80a0744 <_Z13readTempHumidv+0x244>)
 80a0698:	f000 fcba 	bl	80a1010 <_ZN14PietteTech_DHT11getDewPointEv>
 80a069c:	2502      	movs	r5, #2
 80a069e:	4602      	mov	r2, r0
 80a06a0:	460b      	mov	r3, r1
 80a06a2:	4640      	mov	r0, r8
 80a06a4:	9500      	str	r5, [sp, #0]
 80a06a6:	f001 fe87 	bl	80a23b8 <_ZN5Print7printlnEdi>

      Serial.print("Dew Point Slow (°C): ");
 80a06aa:	f002 f8f7 	bl	80a289c <_Z16_fetch_usbserialv>
 80a06ae:	4939      	ldr	r1, [pc, #228]	; (80a0794 <_Z13readTempHumidv+0x294>)
 80a06b0:	f001 fd68 	bl	80a2184 <_ZN5Print5printEPKc>
      Serial.println(DHT.getDewPointSlow());
 80a06b4:	f002 f8f2 	bl	80a289c <_Z16_fetch_usbserialv>
 80a06b8:	4680      	mov	r8, r0
 80a06ba:	4822      	ldr	r0, [pc, #136]	; (80a0744 <_Z13readTempHumidv+0x244>)
 80a06bc:	f000 fd10 	bl	80a10e0 <_ZN14PietteTech_DHT15getDewPointSlowEv>
 80a06c0:	9500      	str	r5, [sp, #0]
 80a06c2:	4602      	mov	r2, r0
 80a06c4:	460b      	mov	r3, r1
 80a06c6:	4640      	mov	r0, r8
 80a06c8:	f001 fe76 	bl	80a23b8 <_ZN5Print7printlnEdi>

      bDHTstarted = false;                                // reset the sample flag so we can take another
 80a06cc:	2300      	movs	r3, #0
 80a06ce:	7023      	strb	r3, [r4, #0]
 80a06d0:	f000 fe58 	bl	80a1384 <HAL_Timer_Get_Milli_Seconds>
      DHTnextSampleTime = millis() + DHT_SAMPLE_INTERVAL; // set the time for next sample
 80a06d4:	f500 2012 	add.w	r0, r0, #598016	; 0x92000
 80a06d8:	f500 60f8 	add.w	r0, r0, #1984	; 0x7c0
 80a06dc:	6030      	str	r0, [r6, #0]
    }

    // Manage alerts for low temperature
    if (dTemperature < 3.0 && bTempAlert == false)
 80a06de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80a06e2:	2200      	movs	r2, #0
 80a06e4:	4b2c      	ldr	r3, [pc, #176]	; (80a0798 <_Z13readTempHumidv+0x298>)
 80a06e6:	4620      	mov	r0, r4
 80a06e8:	4629      	mov	r1, r5
 80a06ea:	f004 fcf1 	bl	80a50d0 <__aeabi_dcmplt>
 80a06ee:	b138      	cbz	r0, 80a0700 <_Z13readTempHumidv+0x200>
 80a06f0:	4e2a      	ldr	r6, [pc, #168]	; (80a079c <_Z13readTempHumidv+0x29c>)
 80a06f2:	7833      	ldrb	r3, [r6, #0]
 80a06f4:	b993      	cbnz	r3, 80a071c <_Z13readTempHumidv+0x21c>
    {

      temperatureNotification();
 80a06f6:	f7ff fe79 	bl	80a03ec <_Z23temperatureNotificationv>
      bTempAlert = true;
 80a06fa:	2301      	movs	r3, #1
 80a06fc:	7033      	strb	r3, [r6, #0]
 80a06fe:	e015      	b.n	80a072c <_Z13readTempHumidv+0x22c>
    }
    else if (dTemperature >= 5.0 && bTempAlert == true)
 80a0700:	2200      	movs	r2, #0
 80a0702:	4b27      	ldr	r3, [pc, #156]	; (80a07a0 <_Z13readTempHumidv+0x2a0>)
 80a0704:	4620      	mov	r0, r4
 80a0706:	4629      	mov	r1, r5
 80a0708:	f004 fcf6 	bl	80a50f8 <__aeabi_dcmpge>
 80a070c:	b170      	cbz	r0, 80a072c <_Z13readTempHumidv+0x22c>
 80a070e:	4b23      	ldr	r3, [pc, #140]	; (80a079c <_Z13readTempHumidv+0x29c>)
 80a0710:	781b      	ldrb	r3, [r3, #0]
 80a0712:	b15b      	cbz	r3, 80a072c <_Z13readTempHumidv+0x22c>
    {

      bTempAlert = false;
 80a0714:	4b21      	ldr	r3, [pc, #132]	; (80a079c <_Z13readTempHumidv+0x29c>)
 80a0716:	2200      	movs	r2, #0
 80a0718:	701a      	strb	r2, [r3, #0]
    }
  }
}
 80a071a:	e007      	b.n	80a072c <_Z13readTempHumidv+0x22c>
    {

      temperatureNotification();
      bTempAlert = true;
    }
    else if (dTemperature >= 5.0 && bTempAlert == true)
 80a071c:	2200      	movs	r2, #0
 80a071e:	4b20      	ldr	r3, [pc, #128]	; (80a07a0 <_Z13readTempHumidv+0x2a0>)
 80a0720:	4620      	mov	r0, r4
 80a0722:	4629      	mov	r1, r5
 80a0724:	f004 fce8 	bl	80a50f8 <__aeabi_dcmpge>
 80a0728:	2800      	cmp	r0, #0
 80a072a:	d1f3      	bne.n	80a0714 <_Z13readTempHumidv+0x214>
    {

      bTempAlert = false;
    }
  }
}
 80a072c:	b002      	add	sp, #8
 80a072e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0732:	bf00      	nop
 80a0734:	200003e8 	.word	0x200003e8
 80a0738:	20000420 	.word	0x20000420
 80a073c:	080a62e0 	.word	0x080a62e0
 80a0740:	080a62e3 	.word	0x080a62e3
 80a0744:	20000448 	.word	0x20000448
 80a0748:	20000300 	.word	0x20000300
 80a074c:	080a6308 	.word	0x080a6308
 80a0750:	080a6316 	.word	0x080a6316
 80a0754:	080a6319 	.word	0x080a6319
 80a0758:	080a6330 	.word	0x080a6330
 80a075c:	080a634b 	.word	0x080a634b
 80a0760:	080a636b 	.word	0x080a636b
 80a0764:	080a6387 	.word	0x080a6387
 80a0768:	080a6399 	.word	0x080a6399
 80a076c:	080a63b5 	.word	0x080a63b5
 80a0770:	080a63c9 	.word	0x080a63c9
 80a0774:	20000434 	.word	0x20000434
 80a0778:	080a63d7 	.word	0x080a63d7
 80a077c:	41200000 	.word	0x41200000
 80a0780:	40240000 	.word	0x40240000
 80a0784:	20000310 	.word	0x20000310
 80a0788:	080a63e6 	.word	0x080a63e6
 80a078c:	40966666 	.word	0x40966666
 80a0790:	080a63fa 	.word	0x080a63fa
 80a0794:	080a640c 	.word	0x080a640c
 80a0798:	40080000 	.word	0x40080000
 80a079c:	20000444 	.word	0x20000444
 80a07a0:	40140000 	.word	0x40140000

080a07a4 <_Z10updateTimev>:
 * Description    : Request time synchronization from the Particle Cloud once a day
 * Input          : None
 * Output         : None
 *******************************************************************************/
void updateTime()
{
 80a07a4:	b530      	push	{r4, r5, lr}
 80a07a6:	b085      	sub	sp, #20
 80a07a8:	f000 fdec 	bl	80a1384 <HAL_Timer_Get_Milli_Seconds>

  if (millis() - lastSync > ONE_DAY_MILLIS)
 80a07ac:	4c10      	ldr	r4, [pc, #64]	; (80a07f0 <_Z10updateTimev+0x4c>)
 80a07ae:	6823      	ldr	r3, [r4, #0]
 80a07b0:	1ac0      	subs	r0, r0, r3
 80a07b2:	4b10      	ldr	r3, [pc, #64]	; (80a07f4 <_Z10updateTimev+0x50>)
 80a07b4:	681b      	ldr	r3, [r3, #0]
 80a07b6:	4298      	cmp	r0, r3
 80a07b8:	d917      	bls.n	80a07ea <_Z10updateTimev+0x46>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        return CLOUD_FN(spark_sync_time(NULL), false);
 80a07ba:	2000      	movs	r0, #0
 80a07bc:	f000 ff80 	bl	80a16c0 <spark_sync_time>
  {

    // Request time synchronization from the Particle Cloud
    Particle.syncTime();
    Serial.printf("Time updated at %s...", Time.timeStr().c_str());
 80a07c0:	f002 f86c 	bl	80a289c <_Z16_fetch_usbserialv>
 80a07c4:	4605      	mov	r5, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 80a07c6:	f001 ff66 	bl	80a2696 <_ZN9TimeClass3nowEv>
 80a07ca:	4601      	mov	r1, r0
 80a07cc:	4668      	mov	r0, sp
 80a07ce:	f001 ff1f 	bl	80a2610 <_ZN9TimeClass7timeStrEl>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80a07d2:	9b00      	ldr	r3, [sp, #0]
 80a07d4:	4a08      	ldr	r2, [pc, #32]	; (80a07f8 <_Z10updateTimev+0x54>)
 80a07d6:	2100      	movs	r1, #0
 80a07d8:	4628      	mov	r0, r5
 80a07da:	f001 fdfb 	bl	80a23d4 <_ZN5Print11printf_implEbPKcz>
 80a07de:	4668      	mov	r0, sp
 80a07e0:	f001 fe65 	bl	80a24ae <_ZN6StringD1Ev>
 80a07e4:	f000 fdce 	bl	80a1384 <HAL_Timer_Get_Milli_Seconds>
    lastSync = millis();
 80a07e8:	6020      	str	r0, [r4, #0]
  }
}
 80a07ea:	b005      	add	sp, #20
 80a07ec:	bd30      	pop	{r4, r5, pc}
 80a07ee:	bf00      	nop
 80a07f0:	20000418 	.word	0x20000418
 80a07f4:	20000318 	.word	0x20000318
 80a07f8:	080a6423 	.word	0x080a6423

080a07fc <_Z8blinkLEDiii>:
 * Description    : Blinks any LED as disired w/o delay
 * Input          : LED Pin defintion, Off-Time (ms), On-Time (ms)
 * Output         : None
 *******************************************************************************/
void blinkLED(int pin, int off, int on)
{
 80a07fc:	b570      	push	{r4, r5, r6, lr}
 80a07fe:	460e      	mov	r6, r1
 80a0800:	4614      	mov	r4, r2
 80a0802:	4605      	mov	r5, r0
 80a0804:	f000 fdbe 	bl	80a1384 <HAL_Timer_Get_Milli_Seconds>

  int blinkPhase = millis() % (off + on);

  if (blinkPhase < off)
 80a0808:	1932      	adds	r2, r6, r4
 80a080a:	fbb0 f3f2 	udiv	r3, r0, r2
 80a080e:	fb03 0012 	mls	r0, r3, r2, r0
 80a0812:	4286      	cmp	r6, r0
  {

    digitalWrite(pin, LOW);
 80a0814:	bfc8      	it	gt
 80a0816:	2100      	movgt	r1, #0
 80a0818:	b2a8      	uxth	r0, r5
  }
  else
  {

    digitalWrite(pin, HIGH);
 80a081a:	bfd8      	it	le
 80a081c:	2101      	movle	r1, #1
  }
}
 80a081e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(pin, LOW);
  }
  else
  {

    digitalWrite(pin, HIGH);
 80a0822:	f002 b9ce 	b.w	80a2bc2 <digitalWrite>
	...

080a0828 <_Z16readVehicleStatev>:
 * Description    : Reads the state of vehicle presence
 * Input          : None
 * Output         : None
 *******************************************************************************/
void readVehicleState()
{
 80a0828:	b530      	push	{r4, r5, lr}

  // takes ultrasonic measurements (int sample time in ms)
  takeMeasurements(500);
 80a082a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 * Description    : Reads the state of vehicle presence
 * Input          : None
 * Output         : None
 *******************************************************************************/
void readVehicleState()
{
 80a082e:	b085      	sub	sp, #20

  // takes ultrasonic measurements (int sample time in ms)
  takeMeasurements(500);
 80a0830:	f7ff fe4c 	bl	80a04cc <_Z16takeMeasurementsi>

  if (sensorDetect == true && vehicleInGarage > 1)
 80a0834:	4b23      	ldr	r3, [pc, #140]	; (80a08c4 <_Z16readVehicleStatev+0x9c>)
 80a0836:	4c24      	ldr	r4, [pc, #144]	; (80a08c8 <_Z16readVehicleStatev+0xa0>)
 80a0838:	781d      	ldrb	r5, [r3, #0]
 80a083a:	6823      	ldr	r3, [r4, #0]
 80a083c:	b335      	cbz	r5, 80a088c <_Z16readVehicleStatev+0x64>
 80a083e:	2b01      	cmp	r3, #1
 80a0840:	dd3d      	ble.n	80a08be <_Z16readVehicleStatev+0x96>
  {
    // vehcile detected

    if (vehicleInGarage == 3)
 80a0842:	2b03      	cmp	r3, #3
 80a0844:	4d21      	ldr	r5, [pc, #132]	; (80a08cc <_Z16readVehicleStatev+0xa4>)
 80a0846:	d102      	bne.n	80a084e <_Z16readVehicleStatev+0x26>
 80a0848:	f000 fd9c 	bl	80a1384 <HAL_Timer_Get_Milli_Seconds>
    {

      // resets the timer
      previousMillisVehicle = millis();
 80a084c:	6028      	str	r0, [r5, #0]
 80a084e:	f000 fd99 	bl	80a1384 <HAL_Timer_Get_Milli_Seconds>
    }

    if (millis() - previousMillisVehicle < vehicleDetectionThreshold)
 80a0852:	682b      	ldr	r3, [r5, #0]
 80a0854:	1ac0      	subs	r0, r0, r3
 80a0856:	4b1e      	ldr	r3, [pc, #120]	; (80a08d0 <_Z16readVehicleStatev+0xa8>)
 80a0858:	681b      	ldr	r3, [r3, #0]
 80a085a:	4298      	cmp	r0, r3
 80a085c:	d20c      	bcs.n	80a0878 <_Z16readVehicleStatev+0x50>
    {
      // vehicle just arrived

      vehicleInGarageCloud = "transition";
 80a085e:	491d      	ldr	r1, [pc, #116]	; (80a08d4 <_Z16readVehicleStatev+0xac>)
 80a0860:	481d      	ldr	r0, [pc, #116]	; (80a08d8 <_Z16readVehicleStatev+0xb0>)
 80a0862:	f001 fe98 	bl	80a2596 <_ZN6StringaSEPKc>
      vehicleInGarage = 2;
      blinkLED(statusLEDVehicle, 500, 500);
 80a0866:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    if (millis() - previousMillisVehicle < vehicleDetectionThreshold)
    {
      // vehicle just arrived

      vehicleInGarageCloud = "transition";
      vehicleInGarage = 2;
 80a086a:	2302      	movs	r3, #2
      blinkLED(statusLEDVehicle, 500, 500);
 80a086c:	4611      	mov	r1, r2
 80a086e:	2007      	movs	r0, #7
    if (millis() - previousMillisVehicle < vehicleDetectionThreshold)
    {
      // vehicle just arrived

      vehicleInGarageCloud = "transition";
      vehicleInGarage = 2;
 80a0870:	6023      	str	r3, [r4, #0]
      blinkLED(statusLEDVehicle, 500, 500);
 80a0872:	f7ff ffc3 	bl	80a07fc <_Z8blinkLEDiii>
 80a0876:	e022      	b.n	80a08be <_Z16readVehicleStatev+0x96>
    }
    else
    {
      // vehicle inside garage

      vehicleInGarageCloud = "inside";
 80a0878:	4918      	ldr	r1, [pc, #96]	; (80a08dc <_Z16readVehicleStatev+0xb4>)
 80a087a:	4817      	ldr	r0, [pc, #92]	; (80a08d8 <_Z16readVehicleStatev+0xb0>)
 80a087c:	f001 fe8b 	bl	80a2596 <_ZN6StringaSEPKc>
      vehicleInGarage = 1;
 80a0880:	2101      	movs	r1, #1
      digitalWrite(statusLEDVehicle, HIGH);
 80a0882:	2007      	movs	r0, #7
    else
    {
      // vehicle inside garage

      vehicleInGarageCloud = "inside";
      vehicleInGarage = 1;
 80a0884:	6021      	str	r1, [r4, #0]
      digitalWrite(statusLEDVehicle, HIGH);
 80a0886:	f002 f99c 	bl	80a2bc2 <digitalWrite>
 80a088a:	e018      	b.n	80a08be <_Z16readVehicleStatev+0x96>
    }
  }
  else if (sensorDetect == false && vehicleInGarage < 3)
 80a088c:	2b02      	cmp	r3, #2
 80a088e:	dc16      	bgt.n	80a08be <_Z16readVehicleStatev+0x96>
  {
    // no vehicle detected

    vehicleInGarageCloud = "outside";
 80a0890:	4913      	ldr	r1, [pc, #76]	; (80a08e0 <_Z16readVehicleStatev+0xb8>)
 80a0892:	4811      	ldr	r0, [pc, #68]	; (80a08d8 <_Z16readVehicleStatev+0xb0>)
 80a0894:	f001 fe7f 	bl	80a2596 <_ZN6StringaSEPKc>
    vehicleInGarage = 3;
 80a0898:	2303      	movs	r3, #3
    digitalWrite(statusLEDVehicle, LOW);
 80a089a:	4629      	mov	r1, r5
 80a089c:	2007      	movs	r0, #7
  else if (sensorDetect == false && vehicleInGarage < 3)
  {
    // no vehicle detected

    vehicleInGarageCloud = "outside";
    vehicleInGarage = 3;
 80a089e:	6023      	str	r3, [r4, #0]
    digitalWrite(statusLEDVehicle, LOW);
 80a08a0:	f002 f98f 	bl	80a2bc2 <digitalWrite>

    // close garage door immediately when vehicle is leaving the garage
    if (bAutomaticDoorOperation)
 80a08a4:	4b0f      	ldr	r3, [pc, #60]	; (80a08e4 <_Z16readVehicleStatev+0xbc>)
 80a08a6:	781b      	ldrb	r3, [r3, #0]
 80a08a8:	b14b      	cbz	r3, 80a08be <_Z16readVehicleStatev+0x96>
    {
      triggerGarage("close");
 80a08aa:	490f      	ldr	r1, [pc, #60]	; (80a08e8 <_Z16readVehicleStatev+0xc0>)
 80a08ac:	4668      	mov	r0, sp
 80a08ae:	f001 fe45 	bl	80a253c <_ZN6StringC1EPK19__FlashStringHelper>
 80a08b2:	4668      	mov	r0, sp
 80a08b4:	f7ff fc38 	bl	80a0128 <_Z13triggerGarage6String>
 80a08b8:	4668      	mov	r0, sp
 80a08ba:	f001 fdf8 	bl	80a24ae <_ZN6StringD1Ev>
    }
  }
}
 80a08be:	b005      	add	sp, #20
 80a08c0:	bd30      	pop	{r4, r5, pc}
 80a08c2:	bf00      	nop
 80a08c4:	200003ec 	.word	0x200003ec
 80a08c8:	20000308 	.word	0x20000308
 80a08cc:	200003f0 	.word	0x200003f0
 80a08d0:	20000320 	.word	0x20000320
 80a08d4:	080a6292 	.word	0x080a6292
 80a08d8:	200003f4 	.word	0x200003f4
 80a08dc:	080a6439 	.word	0x080a6439
 80a08e0:	080a6440 	.word	0x080a6440
 80a08e4:	200004a4 	.word	0x200004a4
 80a08e8:	080a6220 	.word	0x080a6220

080a08ec <_Z16checkCloudStatusv>:
 * Description    : Checks if Particle cloud is connected
 * Input          : None
 * Output         : None
 *******************************************************************************/
void checkCloudStatus()
{
 80a08ec:	b510      	push	{r4, lr}
 80a08ee:	4c0e      	ldr	r4, [pc, #56]	; (80a0928 <_Z16checkCloudStatusv+0x3c>)
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a08f0:	2200      	movs	r2, #0
 80a08f2:	4611      	mov	r1, r2
 80a08f4:	6860      	ldr	r0, [r4, #4]
 80a08f6:	f000 ff13 	bl	80a1720 <network_ready>

  if (WiFi.ready())
 80a08fa:	4602      	mov	r2, r0
 80a08fc:	b130      	cbz	r0, 80a090c <_Z16checkCloudStatusv+0x20>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a08fe:	f000 fecf 	bl	80a16a0 <spark_cloud_flag_connected>
  {

    if (Particle.connected())
 80a0902:	b980      	cbnz	r0, 80a0926 <_Z16checkCloudStatusv+0x3a>
    }
    else
    {

      // connection to particle backend not established
      blinkLED(statusLEDParticle, 1000, 100);
 80a0904:	2264      	movs	r2, #100	; 0x64
 80a0906:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80a090a:	e007      	b.n	80a091c <_Z16checkCloudStatusv+0x30>
 80a090c:	4601      	mov	r1, r0
 80a090e:	6860      	ldr	r0, [r4, #4]
 80a0910:	f000 ff06 	bl	80a1720 <network_ready>
    }
  }
  else if (!WiFi.ready())
 80a0914:	b938      	cbnz	r0, 80a0926 <_Z16checkCloudStatusv+0x3a>
  {

    // wifi connection not established
    blinkLED(statusLEDParticle, 500, 500);
 80a0916:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80a091a:	4611      	mov	r1, r2
  }
 80a091c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }
  else if (!WiFi.ready())
  {

    // wifi connection not established
    blinkLED(statusLEDParticle, 500, 500);
 80a0920:	2006      	movs	r0, #6
 80a0922:	f7ff bf6b 	b.w	80a07fc <_Z8blinkLEDiii>
 80a0926:	bd10      	pop	{r4, pc}
 80a0928:	200009b0 	.word	0x200009b0

080a092c <loop>:
 * Description    : Loop
 * Input          : None
 * Output         : None
 *******************************************************************************/
void loop()
{
 80a092c:	b508      	push	{r3, lr}

  // checks status if patricle is connected to cloud
  checkCloudStatus();
 80a092e:	f7ff ffdd 	bl	80a08ec <_Z16checkCloudStatusv>

  // reads temperature and humidity of sensor
  readTempHumid();
 80a0932:	f7ff fde5 	bl	80a0500 <_Z13readTempHumidv>

  // reads garage door state
  readGarageDoorState();
 80a0936:	f7ff fcd7 	bl	80a02e8 <_Z19readGarageDoorStatev>

  // reads vehicle state
  readVehicleState();
 80a093a:	f7ff ff75 	bl	80a0828 <_Z16readVehicleStatev>

  // updates the time from the internet if necessary
  updateTime();
}
 80a093e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  // reads vehicle state
  readVehicleState();

  // updates the time from the internet if necessary
  updateTime();
 80a0942:	f7ff bf2f 	b.w	80a07a4 <_Z10updateTimev>
	...

080a0948 <_ZN10CloudClass8variableIA13_cI6StringEEEbRKT_DpRKT0_>:
};

class CloudClass {
  public:
    template <typename T, class ... Types>
    static inline bool variable(const T &name, const Types& ... args)
 80a0948:	b507      	push	{r0, r1, r2, lr}

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra;
        extra.size = sizeof(extra);
 80a094a:	2308      	movs	r3, #8
 80a094c:	f8ad 3000 	strh.w	r3, [sp]
        extra.update = update_string_variable;
 80a0950:	4b04      	ldr	r3, [pc, #16]	; (80a0964 <_ZN10CloudClass8variableIA13_cI6StringEEEbRKT_DpRKT0_+0x1c>)
        return CLOUD_FN(spark_variable(varKey, userVar, CloudVariableTypeString::value(), &extra), false);
 80a0952:	2204      	movs	r2, #4
    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra;
        extra.size = sizeof(extra);
        extra.update = update_string_variable;
 80a0954:	9301      	str	r3, [sp, #4]
        return CLOUD_FN(spark_variable(varKey, userVar, CloudVariableTypeString::value(), &extra), false);
 80a0956:	466b      	mov	r3, sp
 80a0958:	f000 fe8a 	bl	80a1670 <spark_variable>
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_VAR_KEY_LENGTH + 1,
            "\n\nIn Particle.variable, name must be " __XSTRING(USER_VAR_KEY_LENGTH) " characters or less\n\n");

        return _variable(name, args...);
    }
 80a095c:	b003      	add	sp, #12
 80a095e:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0962:	bf00      	nop
 80a0964:	080a00b3 	.word	0x080a00b3

080a0968 <setup>:
 * Description    : Setup
 * Input          : None
 * Output         : None
 *******************************************************************************/
void setup()
{
 80a0968:	b510      	push	{r4, lr}
 80a096a:	b08c      	sub	sp, #48	; 0x30

  // serial communications
  Serial.begin(9600);
 80a096c:	f001 ff96 	bl	80a289c <_Z16_fetch_usbserialv>
 80a0970:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0974:	f001 ff78 	bl	80a2868 <_ZN9USBSerial5beginEl>
  // Wait for a USB serial connection for up to 3 seconds
  //waitFor(Serial.isConnected, 3000);
  Serial.printlnf("System version: %s", System.version().c_str());
 80a0978:	f001 ff90 	bl	80a289c <_Z16_fetch_usbserialv>
 80a097c:	4604      	mov	r4, r0
#define SYSTEM_VERSION_121RC1
#define SYSTEM_VERSION_121RC2
#define SYSTEM_VERSION_121RC3
#define SYSTEM_VERSION_121

typedef struct __attribute__((packed)) SystemVersionInfo
 80a097e:	231c      	movs	r3, #28
 80a0980:	a80c      	add	r0, sp, #48	; 0x30
 80a0982:	f820 3d1c 	strh.w	r3, [r0, #-28]!
    static bool enableFeature(const WiFiTesterFeature feature);

    String version()
    {
        SystemVersionInfo info;
        system_version_info(&info, nullptr);
 80a0986:	2100      	movs	r1, #0
 80a0988:	f000 fe3e 	bl	80a1608 <system_version_info>
        return String(info.versionString);
 80a098c:	a907      	add	r1, sp, #28
 80a098e:	a801      	add	r0, sp, #4
 80a0990:	f001 fdd4 	bl	80a253c <_ZN6StringC1EPK19__FlashStringHelper>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 80a0994:	9b01      	ldr	r3, [sp, #4]
 80a0996:	4a32      	ldr	r2, [pc, #200]	; (80a0a60 <setup+0xf8>)
 80a0998:	2101      	movs	r1, #1
 80a099a:	4620      	mov	r0, r4
 80a099c:	4c31      	ldr	r4, [pc, #196]	; (80a0a64 <setup+0xfc>)
 80a099e:	f001 fd19 	bl	80a23d4 <_ZN5Print11printf_implEbPKcz>
 80a09a2:	a801      	add	r0, sp, #4
 80a09a4:	f001 fd83 	bl	80a24ae <_ZN6StringD1Ev>
  Serial.printlnf("Firmware version: %s", firmwareVersion.c_str());
 80a09a8:	f001 ff78 	bl	80a289c <_Z16_fetch_usbserialv>
 80a09ac:	6823      	ldr	r3, [r4, #0]
 80a09ae:	4a2e      	ldr	r2, [pc, #184]	; (80a0a68 <setup+0x100>)
 80a09b0:	2101      	movs	r1, #1
 80a09b2:	f001 fd0f 	bl	80a23d4 <_ZN5Print11printf_implEbPKcz>
  Serial.println("---------------");
 80a09b6:	f001 ff71 	bl	80a289c <_Z16_fetch_usbserialv>
 80a09ba:	492c      	ldr	r1, [pc, #176]	; (80a0a6c <setup+0x104>)
 80a09bc:	f001 fbf5 	bl	80a21aa <_ZN5Print7printlnEPKc>

  // particle variables
  Particle.variable("FW-Version", firmwareVersion);
 80a09c0:	4621      	mov	r1, r4
 80a09c2:	482b      	ldr	r0, [pc, #172]	; (80a0a70 <setup+0x108>)
 80a09c4:	f7ff ffc0 	bl	80a0948 <_ZN10CloudClass8variableIA13_cI6StringEEEbRKT_DpRKT0_>
  Particle.variable("TempStatus", sensorStatus);
 80a09c8:	492a      	ldr	r1, [pc, #168]	; (80a0a74 <setup+0x10c>)
 80a09ca:	482b      	ldr	r0, [pc, #172]	; (80a0a78 <setup+0x110>)
 80a09cc:	f7ff ffbc 	bl	80a0948 <_ZN10CloudClass8variableIA13_cI6StringEEEbRKT_DpRKT0_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80a09d0:	2300      	movs	r3, #0
 80a09d2:	2209      	movs	r2, #9
 80a09d4:	4929      	ldr	r1, [pc, #164]	; (80a0a7c <setup+0x114>)
 80a09d6:	482a      	ldr	r0, [pc, #168]	; (80a0a80 <setup+0x118>)
 80a09d8:	f000 fe4a 	bl	80a1670 <spark_variable>
 80a09dc:	2300      	movs	r3, #0
 80a09de:	2209      	movs	r2, #9
 80a09e0:	4928      	ldr	r1, [pc, #160]	; (80a0a84 <setup+0x11c>)
 80a09e2:	4829      	ldr	r0, [pc, #164]	; (80a0a88 <setup+0x120>)
 80a09e4:	f000 fe44 	bl	80a1670 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a09e8:	4c28      	ldr	r4, [pc, #160]	; (80a0a8c <setup+0x124>)
  Particle.variable("Temperature", &dTemperature, DOUBLE);
  Particle.variable("Humidity", &dHumidity, DOUBLE);
  Particle.variable("garageDoorState", garageDoorStateCloud);
 80a09ea:	4929      	ldr	r1, [pc, #164]	; (80a0a90 <setup+0x128>)
 80a09ec:	4829      	ldr	r0, [pc, #164]	; (80a0a94 <setup+0x12c>)
 80a09ee:	f7ff ffab 	bl	80a0948 <_ZN10CloudClass8variableIA13_cI6StringEEEbRKT_DpRKT0_>
  Particle.variable("vehicleState", vehicleInGarageCloud);
 80a09f2:	4929      	ldr	r1, [pc, #164]	; (80a0a98 <setup+0x130>)
 80a09f4:	4829      	ldr	r0, [pc, #164]	; (80a0a9c <setup+0x134>)
 80a09f6:	f7ff ffa7 	bl	80a0948 <_ZN10CloudClass8variableIA13_cI6StringEEEbRKT_DpRKT0_>
 80a09fa:	4a29      	ldr	r2, [pc, #164]	; (80a0aa0 <setup+0x138>)
 80a09fc:	4929      	ldr	r1, [pc, #164]	; (80a0aa4 <setup+0x13c>)
 80a09fe:	4620      	mov	r0, r4
 80a0a00:	f000 ff6c 	bl	80a18dc <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0a04:	4a28      	ldr	r2, [pc, #160]	; (80a0aa8 <setup+0x140>)
 80a0a06:	4929      	ldr	r1, [pc, #164]	; (80a0aac <setup+0x144>)
 80a0a08:	4620      	mov	r0, r4
 80a0a0a:	f000 ff67 	bl	80a18dc <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  // particle functions
  Particle.function("garageTrigger", triggerGarage);
  Particle.function("automaticMode", automaticMode);

  // Definition of I/O-Pins
  pinMode(garageTrigger, OUTPUT);
 80a0a0e:	2101      	movs	r1, #1
 80a0a10:	200a      	movs	r0, #10
 80a0a12:	f002 f8c5 	bl	80a2ba0 <pinMode>
  pinMode(statusLEDVehicle, OUTPUT);
 80a0a16:	2101      	movs	r1, #1
 80a0a18:	2007      	movs	r0, #7
 80a0a1a:	f002 f8c1 	bl	80a2ba0 <pinMode>
  pinMode(statusLEDParticle, OUTPUT);
 80a0a1e:	2101      	movs	r1, #1
 80a0a20:	2006      	movs	r0, #6
 80a0a22:	f002 f8bd 	bl	80a2ba0 <pinMode>

  // setting trigger and echo pin
  pinMode(usTrigger, OUTPUT);
 80a0a26:	2101      	movs	r1, #1
 80a0a28:	2003      	movs	r0, #3
 80a0a2a:	f002 f8b9 	bl	80a2ba0 <pinMode>
  pinMode(usEcho, INPUT);
 80a0a2e:	2100      	movs	r1, #0
 80a0a30:	2004      	movs	r0, #4
 80a0a32:	f002 f8b5 	bl	80a2ba0 <pinMode>

  //setting door sensor pins
  pinMode(doorSensor1, INPUT_PULLDOWN);
 80a0a36:	2103      	movs	r1, #3
 80a0a38:	2000      	movs	r0, #0
 80a0a3a:	f002 f8b1 	bl	80a2ba0 <pinMode>
  pinMode(doorSensor2, INPUT_PULLDOWN);
 80a0a3e:	2103      	movs	r1, #3
 80a0a40:	2001      	movs	r0, #1
 80a0a42:	f002 f8ad 	bl	80a2ba0 <pinMode>

  // setting trigger pins to low during initialization
  digitalWrite(garageTrigger, LOW);
 80a0a46:	2100      	movs	r1, #0
 80a0a48:	200a      	movs	r0, #10
 80a0a4a:	f002 f8ba 	bl	80a2bc2 <digitalWrite>
 80a0a4e:	4b18      	ldr	r3, [pc, #96]	; (80a0ab0 <setup+0x148>)
 80a0a50:	681b      	ldr	r3, [r3, #0]
 80a0a52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80a0a54:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80a0a58:	8353      	strh	r3, [r2, #26]
  digitalWriteFast(usTrigger, LOW);
}
 80a0a5a:	b00c      	add	sp, #48	; 0x30
 80a0a5c:	bd10      	pop	{r4, pc}
 80a0a5e:	bf00      	nop
 80a0a60:	080a6448 	.word	0x080a6448
 80a0a64:	20000424 	.word	0x20000424
 80a0a68:	080a645b 	.word	0x080a645b
 80a0a6c:	080a6470 	.word	0x080a6470
 80a0a70:	080a6480 	.word	0x080a6480
 80a0a74:	20000434 	.word	0x20000434
 80a0a78:	080a648b 	.word	0x080a648b
 80a0a7c:	20000300 	.word	0x20000300
 80a0a80:	080a62d4 	.word	0x080a62d4
 80a0a84:	20000310 	.word	0x20000310
 80a0a88:	080a6496 	.word	0x080a6496
 80a0a8c:	080a18b1 	.word	0x080a18b1
 80a0a90:	20000404 	.word	0x20000404
 80a0a94:	080a649f 	.word	0x080a649f
 80a0a98:	200003f4 	.word	0x200003f4
 80a0a9c:	080a64af 	.word	0x080a64af
 80a0aa0:	080a64bc 	.word	0x080a64bc
 80a0aa4:	080a0129 	.word	0x080a0129
 80a0aa8:	080a64ca 	.word	0x080a64ca
 80a0aac:	080a01b5 	.word	0x080a01b5
 80a0ab0:	2000041c 	.word	0x2000041c

080a0ab4 <_GLOBAL__sub_I_sensorStatus>:
  {

    // wifi connection not established
    blinkLED(statusLEDParticle, 500, 500);
  }
 80a0ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0ab8:	4b3f      	ldr	r3, [pc, #252]	; (80a0bb8 <_GLOBAL__sub_I_sensorStatus+0x104>)
 80a0aba:	b088      	sub	sp, #32
 80a0abc:	2700      	movs	r7, #0
 80a0abe:	701f      	strb	r7, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0ac0:	f000 fc78 	bl	80a13b4 <HAL_Pin_Map>
 * Author   : Tim Hornikel
 * License  : GNU General Public License v3+
*******************************************************************************/

// Particle Cloud Variables
String sensorStatus = "Initialization";
 80a0ac4:	4e3d      	ldr	r6, [pc, #244]	; (80a0bbc <_GLOBAL__sub_I_sensorStatus+0x108>)
 80a0ac6:	4b3e      	ldr	r3, [pc, #248]	; (80a0bc0 <_GLOBAL__sub_I_sensorStatus+0x10c>)
 80a0ac8:	f8df 8138 	ldr.w	r8, [pc, #312]	; 80a0c04 <_GLOBAL__sub_I_sensorStatus+0x150>
 80a0acc:	6018      	str	r0, [r3, #0]
 80a0ace:	4d3d      	ldr	r5, [pc, #244]	; (80a0bc4 <_GLOBAL__sub_I_sensorStatus+0x110>)
 80a0ad0:	4c3d      	ldr	r4, [pc, #244]	; (80a0bc8 <_GLOBAL__sub_I_sensorStatus+0x114>)
 80a0ad2:	4631      	mov	r1, r6
 80a0ad4:	4640      	mov	r0, r8
 80a0ad6:	f001 fd31 	bl	80a253c <_ZN6StringC1EPK19__FlashStringHelper>
 80a0ada:	4640      	mov	r0, r8
String firmwareVersion = "v0.3.0"; // Version MAJOR.MINOR.PATCH
 80a0adc:	f8df 8128 	ldr.w	r8, [pc, #296]	; 80a0c08 <_GLOBAL__sub_I_sensorStatus+0x154>
 * Author   : Tim Hornikel
 * License  : GNU General Public License v3+
*******************************************************************************/

// Particle Cloud Variables
String sensorStatus = "Initialization";
 80a0ae0:	462a      	mov	r2, r5
 80a0ae2:	4621      	mov	r1, r4
 80a0ae4:	f002 f8f6 	bl	80a2cd4 <__aeabi_atexit>
String firmwareVersion = "v0.3.0"; // Version MAJOR.MINOR.PATCH
 80a0ae8:	4938      	ldr	r1, [pc, #224]	; (80a0bcc <_GLOBAL__sub_I_sensorStatus+0x118>)
 80a0aea:	4640      	mov	r0, r8
 80a0aec:	f001 fd26 	bl	80a253c <_ZN6StringC1EPK19__FlashStringHelper>
 80a0af0:	4640      	mov	r0, r8
String vehicleInGarageCloud = "Initialization";
 80a0af2:	f8df 8118 	ldr.w	r8, [pc, #280]	; 80a0c0c <_GLOBAL__sub_I_sensorStatus+0x158>
 * License  : GNU General Public License v3+
*******************************************************************************/

// Particle Cloud Variables
String sensorStatus = "Initialization";
String firmwareVersion = "v0.3.0"; // Version MAJOR.MINOR.PATCH
 80a0af6:	462a      	mov	r2, r5
 80a0af8:	4621      	mov	r1, r4
 80a0afa:	f002 f8eb 	bl	80a2cd4 <__aeabi_atexit>
String vehicleInGarageCloud = "Initialization";
 80a0afe:	4631      	mov	r1, r6
 80a0b00:	4640      	mov	r0, r8
 80a0b02:	f001 fd1b 	bl	80a253c <_ZN6StringC1EPK19__FlashStringHelper>
 80a0b06:	4640      	mov	r0, r8
String garageDoorStateCloud = "Initialization";
 80a0b08:	f8df 8104 	ldr.w	r8, [pc, #260]	; 80a0c10 <_GLOBAL__sub_I_sensorStatus+0x15c>
*******************************************************************************/

// Particle Cloud Variables
String sensorStatus = "Initialization";
String firmwareVersion = "v0.3.0"; // Version MAJOR.MINOR.PATCH
String vehicleInGarageCloud = "Initialization";
 80a0b0c:	462a      	mov	r2, r5
 80a0b0e:	4621      	mov	r1, r4
 80a0b10:	f002 f8e0 	bl	80a2cd4 <__aeabi_atexit>
String garageDoorStateCloud = "Initialization";
 80a0b14:	4631      	mov	r1, r6
 80a0b16:	4640      	mov	r0, r8
 80a0b18:	f001 fd10 	bl	80a253c <_ZN6StringC1EPK19__FlashStringHelper>
 80a0b1c:	462a      	mov	r2, r5
 80a0b1e:	4621      	mov	r1, r4
 80a0b20:	4640      	mov	r0, r8
 80a0b22:	f002 f8d7 	bl	80a2cd4 <__aeabi_atexit>
 *******************************************************************************/
void dht_wrapper(); // must be declared before the lib initialization

// Lib instantiate
// ref: https://www.sparkfun.com/datasheets/Sensors/Temperature/DHT22.pdf
PietteTech_DHT DHT(DHTPIN, DHTTYPE, dht_wrapper);
 80a0b26:	2216      	movs	r2, #22
 80a0b28:	2102      	movs	r1, #2
 80a0b2a:	4b29      	ldr	r3, [pc, #164]	; (80a0bd0 <_GLOBAL__sub_I_sensorStatus+0x11c>)
 80a0b2c:	4829      	ldr	r0, [pc, #164]	; (80a0bd4 <_GLOBAL__sub_I_sensorStatus+0x120>)
 80a0b2e:	f000 f956 	bl	80a0dde <_ZN14PietteTech_DHTC1EhhPFvvE>
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

    int selectAntenna(WLanSelectAntenna_TypeDef antenna) {
        return wlan_select_antenna(antenna);
 80a0b32:	2001      	movs	r0, #1
 80a0b34:	f000 fd48 	bl	80a15c8 <wlan_select_antenna>
 80a0b38:	f000 fc24 	bl	80a1384 <HAL_Timer_Get_Milli_Seconds>
const int statusLEDVehicle = D7;  // status LED for signalling if vehcile detected with sensor 1

const float tempOffset = 4.7; // temperat offset

// Declaration of time variables
unsigned long lastSync = millis();              // last synchronization of time in internet
 80a0b3c:	4b26      	ldr	r3, [pc, #152]	; (80a0bd8 <_GLOBAL__sub_I_sensorStatus+0x124>)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0b3e:	ae04      	add	r6, sp, #16
 80a0b40:	6018      	str	r0, [r3, #0]
 80a0b42:	f000 fc1f 	bl	80a1384 <HAL_Timer_Get_Milli_Seconds>
unsigned long previousMillisVehicle = millis(); // stores last time vehicle was detected
 80a0b46:	4b25      	ldr	r3, [pc, #148]	; (80a0bdc <_GLOBAL__sub_I_sensorStatus+0x128>)
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 80a0b48:	4c25      	ldr	r4, [pc, #148]	; (80a0be0 <_GLOBAL__sub_I_sensorStatus+0x12c>)
 80a0b4a:	6018      	str	r0, [r3, #0]
 80a0b4c:	f000 fc1a 	bl	80a1384 <HAL_Timer_Get_Milli_Seconds>
unsigned long previousMillisUs = millis();      // stores last time ultrasonic sensors were updated
 80a0b50:	4b24      	ldr	r3, [pc, #144]	; (80a0be4 <_GLOBAL__sub_I_sensorStatus+0x130>)
 80a0b52:	aa02      	add	r2, sp, #8
 80a0b54:	6018      	str	r0, [r3, #0]
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a0b56:	4b24      	ldr	r3, [pc, #144]	; (80a0be8 <_GLOBAL__sub_I_sensorStatus+0x134>)
 80a0b58:	7127      	strb	r7, [r4, #4]
 80a0b5a:	9304      	str	r3, [sp, #16]
 80a0b5c:	e896 0003 	ldmia.w	r6, {r0, r1}
 80a0b60:	4b22      	ldr	r3, [pc, #136]	; (80a0bec <_GLOBAL__sub_I_sensorStatus+0x138>)
 80a0b62:	e882 0003 	stmia.w	r2, {r0, r1}
 80a0b66:	6023      	str	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a0b68:	f104 030c 	add.w	r3, r4, #12
 80a0b6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0b70:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0b74:	e892 0003 	ldmia.w	r2, {r0, r1}
 80a0b78:	e883 0003 	stmia.w	r3, {r0, r1}
 80a0b7c:	4b1c      	ldr	r3, [pc, #112]	; (80a0bf0 <_GLOBAL__sub_I_sensorStatus+0x13c>)
 80a0b7e:	60a7      	str	r7, [r4, #8]
 80a0b80:	6163      	str	r3, [r4, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0b82:	69a3      	ldr	r3, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 80a0b84:	4a1b      	ldr	r2, [pc, #108]	; (80a0bf4 <_GLOBAL__sub_I_sensorStatus+0x140>)
 80a0b86:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0b88:	4b1b      	ldr	r3, [pc, #108]	; (80a0bf8 <_GLOBAL__sub_I_sensorStatus+0x144>)
 80a0b8a:	491c      	ldr	r1, [pc, #112]	; (80a0bfc <_GLOBAL__sub_I_sensorStatus+0x148>)
 80a0b8c:	61a3      	str	r3, [r4, #24]
 80a0b8e:	2301      	movs	r3, #1
 80a0b90:	9300      	str	r3, [sp, #0]
 80a0b92:	9701      	str	r7, [sp, #4]
 80a0b94:	4623      	mov	r3, r4
 80a0b96:	f104 0008 	add.w	r0, r4, #8
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0b9a:	9706      	str	r7, [sp, #24]
 80a0b9c:	f000 fbaa 	bl	80a12f4 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0ba0:	4630      	mov	r0, r6
 80a0ba2:	f7ff fb5b 	bl	80a025c <_ZNSt14_Function_baseD1Ev>
// Declaration of time constants
unsigned long ONE_DAY_MILLIS(24 * 60 * 60 * 1000);  // 24 hours
unsigned long vehicleDetectionThreshold(60 * 1000); // threshold of 60s for vehicle detection

// Setup of timer for garage door notification
Timer garageDoorTimer(15 * 60 * 1000, garageDoorNotification, true); // notification after 15 min
 80a0ba6:	462a      	mov	r2, r5
 80a0ba8:	4915      	ldr	r1, [pc, #84]	; (80a0c00 <_GLOBAL__sub_I_sensorStatus+0x14c>)
 80a0baa:	4620      	mov	r0, r4
 80a0bac:	f002 f892 	bl	80a2cd4 <__aeabi_atexit>
  {

    // wifi connection not established
    blinkLED(statusLEDParticle, 500, 500);
  }
 80a0bb0:	b008      	add	sp, #32
 80a0bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0bb6:	bf00      	nop
 80a0bb8:	200003e4 	.word	0x200003e4
 80a0bbc:	080a64d8 	.word	0x080a64d8
 80a0bc0:	2000041c 	.word	0x2000041c
 80a0bc4:	200003e0 	.word	0x200003e0
 80a0bc8:	080a24af 	.word	0x080a24af
 80a0bcc:	080a64e7 	.word	0x080a64e7
 80a0bd0:	080a00d5 	.word	0x080a00d5
 80a0bd4:	20000448 	.word	0x20000448
 80a0bd8:	20000418 	.word	0x20000418
 80a0bdc:	200003f0 	.word	0x200003f0
 80a0be0:	200004a8 	.word	0x200004a8
 80a0be4:	20000414 	.word	0x20000414
 80a0be8:	080a0225 	.word	0x080a0225
 80a0bec:	080a6214 	.word	0x080a6214
 80a0bf0:	080a00bb 	.word	0x080a00bb
 80a0bf4:	080a00ed 	.word	0x080a00ed
 80a0bf8:	080a00b7 	.word	0x080a00b7
 80a0bfc:	000dbba0 	.word	0x000dbba0
 80a0c00:	080a028d 	.word	0x080a028d
 80a0c04:	20000434 	.word	0x20000434
 80a0c08:	20000424 	.word	0x20000424
 80a0c0c:	200003f4 	.word	0x200003f4
 80a0c10:	20000404 	.word	0x20000404

080a0c14 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE9_M_invokeERKSt9_Any_data>:
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0c14:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a0c16:	685a      	ldr	r2, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0c18:	6898      	ldr	r0, [r3, #8]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a0c1a:	f012 0f01 	tst.w	r2, #1
 80a0c1e:	ea4f 0262 	mov.w	r2, r2, asr #1
 80a0c22:	bf18      	it	ne
 80a0c24:	5881      	ldrne	r1, [r0, r2]
 80a0c26:	681b      	ldr	r3, [r3, #0]
 80a0c28:	4410      	add	r0, r2
 80a0c2a:	bf18      	it	ne
 80a0c2c:	58cb      	ldrne	r3, [r1, r3]
 80a0c2e:	4718      	bx	r3

080a0c30 <_ZN14PietteTech_DHT12_isrCallbackEv>:
 * NOTE:  isrCallback is only here for backwards compatibility with v0.3 and earlier
 *        it is no longer used or needed
 */
void PietteTech_DHT::isrCallback() { }

void PietteTech_DHT::_isrCallback() {
 80a0c30:	b570      	push	{r4, r5, r6, lr}
 80a0c32:	4604      	mov	r4, r0
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0c34:	f000 fb9e 	bl	80a1374 <HAL_Timer_Get_Micro_Seconds>
  unsigned long newUs = micros();
  unsigned long delta = (newUs - _us);
  _us = newUs;

  if (delta > 6000) {
 80a0c38:	f241 7270 	movw	r2, #6000	; 0x1770
 */
void PietteTech_DHT::isrCallback() { }

void PietteTech_DHT::_isrCallback() {
  unsigned long newUs = micros();
  unsigned long delta = (newUs - _us);
 80a0c3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  _us = newUs;
 80a0c3e:	63a0      	str	r0, [r4, #56]	; 0x38
 */
void PietteTech_DHT::isrCallback() { }

void PietteTech_DHT::_isrCallback() {
  unsigned long newUs = micros();
  unsigned long delta = (newUs - _us);
 80a0c40:	1ac3      	subs	r3, r0, r3
  _us = newUs;

  if (delta > 6000) {
 80a0c42:	4293      	cmp	r3, r2
 80a0c44:	d90b      	bls.n	80a0c5e <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
    _status = DHTLIB_ERROR_ISR_TIMEOUT;
 80a0c46:	f06f 0301 	mvn.w	r3, #1
 80a0c4a:	62e3      	str	r3, [r4, #44]	; 0x2c
    _state = STOPPED;
 80a0c4c:	2303      	movs	r3, #3
 80a0c4e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    detachInterrupt(_sigPin);
 80a0c52:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
    }
    break;
  default:
    break;
  }
}
 80a0c56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _us = newUs;

  if (delta > 6000) {
    _status = DHTLIB_ERROR_ISR_TIMEOUT;
    _state = STOPPED;
    detachInterrupt(_sigPin);
 80a0c5a:	f001 b929 	b.w	80a1eb0 <_Z15detachInterruptt>
    return;
  }
  switch (_state) {
 80a0c5e:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 80a0c62:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 80a0c66:	b112      	cbz	r2, 80a0c6e <_ZN14PietteTech_DHT12_isrCallbackEv+0x3e>
 80a0c68:	2901      	cmp	r1, #1
 80a0c6a:	d020      	beq.n	80a0cae <_ZN14PietteTech_DHT12_isrCallbackEv+0x7e>
 80a0c6c:	bd70      	pop	{r4, r5, r6, pc}
  case RESPONSE:            // Spec: 80us LOW followed by 80us HIGH
    if (delta < 65) {      // Spec: 20-200us to first falling edge of response
 80a0c6e:	2b40      	cmp	r3, #64	; 0x40
 80a0c70:	d803      	bhi.n	80a0c7a <_ZN14PietteTech_DHT12_isrCallbackEv+0x4a>
      _us -= delta;
 80a0c72:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80a0c74:	1ad3      	subs	r3, r2, r3
 80a0c76:	63a3      	str	r3, [r4, #56]	; 0x38
      break; //do nothing, it started the response signal
 80a0c78:	bd70      	pop	{r4, r5, r6, pc}
    } if (125 < delta && delta < 200) {
 80a0c7a:	f1a3 027e 	sub.w	r2, r3, #126	; 0x7e
 80a0c7e:	2a49      	cmp	r2, #73	; 0x49
 80a0c80:	b2dd      	uxtb	r5, r3
 80a0c82:	d805      	bhi.n	80a0c90 <_ZN14PietteTech_DHT12_isrCallbackEv+0x60>
#if defined(DHT_DEBUG_TIMING)
      *_e++ = delta;  // record the edge -> edge time
 80a0c84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80a0c86:	1c5a      	adds	r2, r3, #1
 80a0c88:	6422      	str	r2, [r4, #64]	; 0x40
 80a0c8a:	701d      	strb	r5, [r3, #0]
#endif
      _state = DATA;
 80a0c8c:	2301      	movs	r3, #1
 80a0c8e:	e071      	b.n	80a0d74 <_ZN14PietteTech_DHT12_isrCallbackEv+0x144>
    }
    else {
      detachInterrupt(_sigPin);
 80a0c90:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80a0c94:	f001 f90c 	bl	80a1eb0 <_Z15detachInterruptt>
      _status = DHTLIB_ERROR_RESPONSE_TIMEOUT;
      _state = STOPPED;
#if defined(DHT_DEBUG_TIMING)
      *_e++ = delta;  // record the edge -> edge time
 80a0c98:	6c22      	ldr	r2, [r4, #64]	; 0x40
#endif
      _state = DATA;
    }
    else {
      detachInterrupt(_sigPin);
      _status = DHTLIB_ERROR_RESPONSE_TIMEOUT;
 80a0c9a:	f06f 0302 	mvn.w	r3, #2
 80a0c9e:	62e3      	str	r3, [r4, #44]	; 0x2c
      _state = STOPPED;
 80a0ca0:	2303      	movs	r3, #3
 80a0ca2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
#if defined(DHT_DEBUG_TIMING)
      *_e++ = delta;  // record the edge -> edge time
 80a0ca6:	1c53      	adds	r3, r2, #1
 80a0ca8:	6423      	str	r3, [r4, #64]	; 0x40
 80a0caa:	7015      	strb	r5, [r2, #0]
 80a0cac:	bd70      	pop	{r4, r5, r6, pc}
#endif
    }
    break;
  case DATA:          // Spec: 50us low followed by high of 26-28us = 0, 70us = 1
    if (60 < delta && delta < 155) { //valid in timing
 80a0cae:	f1a3 023d 	sub.w	r2, r3, #61	; 0x3d
 80a0cb2:	2a5d      	cmp	r2, #93	; 0x5d
 80a0cb4:	d84f      	bhi.n	80a0d56 <_ZN14PietteTech_DHT12_isrCallbackEv+0x126>
      _bits[_idx] <<= 1; // shift the data
 80a0cb6:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
      if (delta > 110) //is a one
 80a0cba:	2b6e      	cmp	r3, #110	; 0x6e
#endif
    }
    break;
  case DATA:          // Spec: 50us low followed by high of 26-28us = 0, 70us = 1
    if (60 < delta && delta < 155) { //valid in timing
      _bits[_idx] <<= 1; // shift the data
 80a0cbc:	4421      	add	r1, r4
 80a0cbe:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 80a0cc2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a0cc6:	b2d2      	uxtb	r2, r2
 80a0cc8:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
      if (delta > 110) //is a one
 80a0ccc:	d908      	bls.n	80a0ce0 <_ZN14PietteTech_DHT12_isrCallbackEv+0xb0>
        _bits[_idx] |= 1;
 80a0cce:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 80a0cd2:	4422      	add	r2, r4
 80a0cd4:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
 80a0cd8:	f041 0101 	orr.w	r1, r1, #1
 80a0cdc:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
#if defined(DHT_DEBUG_TIMING)
      *_e++ = delta;  // record the edge -> edge time
 80a0ce0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a0ce2:	b2db      	uxtb	r3, r3
 80a0ce4:	1c51      	adds	r1, r2, #1
 80a0ce6:	6421      	str	r1, [r4, #64]	; 0x40
 80a0ce8:	7013      	strb	r3, [r2, #0]
#endif
      if (_cnt == 0) { // we have completed the byte, go to next
 80a0cea:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80a0cee:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80a0cf2:	bb4b      	cbnz	r3, 80a0d48 <_ZN14PietteTech_DHT12_isrCallbackEv+0x118>
        _cnt = 7; // restart at MSB
 80a0cf4:	2307      	movs	r3, #7
 80a0cf6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if (++_idx == 5) { // go to next byte, if we have got 5 bytes stop.
 80a0cfa:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80a0cfe:	3301      	adds	r3, #1
 80a0d00:	b2db      	uxtb	r3, r3
 80a0d02:	2b05      	cmp	r3, #5
 80a0d04:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 80a0d08:	d136      	bne.n	80a0d78 <_ZN14PietteTech_DHT12_isrCallbackEv+0x148>
          detachInterrupt(_sigPin);
 80a0d0a:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80a0d0e:	f001 f8cf 	bl	80a1eb0 <_Z15detachInterruptt>
          // Verify checksum
          uint8_t sum = _bits[0] + _bits[1] + _bits[2] + _bits[3];
 80a0d12:	f894 6030 	ldrb.w	r6, [r4, #48]	; 0x30
 80a0d16:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80a0d1a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
          if (_bits[4] != sum) {
 80a0d1e:	4432      	add	r2, r6
      if (_cnt == 0) { // we have completed the byte, go to next
        _cnt = 7; // restart at MSB
        if (++_idx == 5) { // go to next byte, if we have got 5 bytes stop.
          detachInterrupt(_sigPin);
          // Verify checksum
          uint8_t sum = _bits[0] + _bits[1] + _bits[2] + _bits[3];
 80a0d20:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
          if (_bits[4] != sum) {
 80a0d24:	4413      	add	r3, r2
 80a0d26:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 80a0d2a:	4403      	add	r3, r0
 80a0d2c:	b2db      	uxtb	r3, r3
 80a0d2e:	428b      	cmp	r3, r1
 80a0d30:	d002      	beq.n	80a0d38 <_ZN14PietteTech_DHT12_isrCallbackEv+0x108>
            _status = DHTLIB_ERROR_CHECKSUM;
 80a0d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a0d36:	e01b      	b.n	80a0d70 <_ZN14PietteTech_DHT12_isrCallbackEv+0x140>
            _state = STOPPED;
          }
          else {
            _status = DHTLIB_OK;
            _state = ACQUIRED;
 80a0d38:	2302      	movs	r3, #2
          if (_bits[4] != sum) {
            _status = DHTLIB_ERROR_CHECKSUM;
            _state = STOPPED;
          }
          else {
            _status = DHTLIB_OK;
 80a0d3a:	62e5      	str	r5, [r4, #44]	; 0x2c
            _state = ACQUIRED;
 80a0d3c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
            _convert = true;
 80a0d40:	2301      	movs	r3, #1
 80a0d42:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80a0d46:	bd70      	pop	{r4, r5, r6, pc}
          }
          break;
        }
      }
      else _cnt--;
 80a0d48:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80a0d4c:	3b01      	subs	r3, #1
 80a0d4e:	b2db      	uxtb	r3, r3
 80a0d50:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 80a0d54:	bd70      	pop	{r4, r5, r6, pc}
 80a0d56:	6c60      	ldr	r0, [r4, #68]	; 0x44
    }
    else if (delta < 10) {
 80a0d58:	2b09      	cmp	r3, #9
      detachInterrupt(_sigPin);
 80a0d5a:	b280      	uxth	r0, r0
          break;
        }
      }
      else _cnt--;
    }
    else if (delta < 10) {
 80a0d5c:	d804      	bhi.n	80a0d68 <_ZN14PietteTech_DHT12_isrCallbackEv+0x138>
      detachInterrupt(_sigPin);
 80a0d5e:	f001 f8a7 	bl	80a1eb0 <_Z15detachInterruptt>
      _status = DHTLIB_ERROR_DELTA;
 80a0d62:	f06f 0305 	mvn.w	r3, #5
 80a0d66:	e003      	b.n	80a0d70 <_ZN14PietteTech_DHT12_isrCallbackEv+0x140>
      _state = STOPPED;
    }
    else {
      detachInterrupt(_sigPin);
 80a0d68:	f001 f8a2 	bl	80a1eb0 <_Z15detachInterruptt>
      _status = DHTLIB_ERROR_DATA_TIMEOUT;
 80a0d6c:	f06f 0303 	mvn.w	r3, #3
 80a0d70:	62e3      	str	r3, [r4, #44]	; 0x2c
      _state = STOPPED;
 80a0d72:	2303      	movs	r3, #3
 80a0d74:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 80a0d78:	bd70      	pop	{r4, r5, r6, pc}

080a0d7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0d7a:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0d7c:	b538      	push	{r3, r4, r5, lr}
 80a0d7e:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0d80:	d005      	beq.n	80a0d8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
 80a0d82:	2a03      	cmp	r2, #3
 80a0d84:	d00f      	beq.n	80a0da6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2c>
 80a0d86:	2a01      	cmp	r2, #1
 80a0d88:	d111      	bne.n	80a0dae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0d8a:	680b      	ldr	r3, [r1, #0]
 80a0d8c:	e009      	b.n	80a0da2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0d8e:	200c      	movs	r0, #12
 80a0d90:	680d      	ldr	r5, [r1, #0]
 80a0d92:	f7ff f982 	bl	80a009a <_Znwj>
 80a0d96:	4603      	mov	r3, r0
 80a0d98:	b118      	cbz	r0, 80a0da2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
 80a0d9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80a0d9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80a0da2:	6023      	str	r3, [r4, #0]
 80a0da4:	e003      	b.n	80a0dae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM14PietteTech_DHTFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0da6:	210c      	movs	r1, #12
 80a0da8:	6800      	ldr	r0, [r0, #0]
 80a0daa:	f001 ff98 	bl	80a2cde <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0dae:	2000      	movs	r0, #0
 80a0db0:	bd38      	pop	{r3, r4, r5, pc}

080a0db2 <_ZN14PietteTech_DHT5beginEhhPFvvE>:

/*
 * NOTE:  callback_wrapper is only here for backwards compatibility with v0.3 and earlier
 *        it is no longer used or needed
 */
void PietteTech_DHT::begin(uint8_t sigPin, uint8_t dht_type, void(*callback_wrapper)()) {
 80a0db2:	b538      	push	{r3, r4, r5, lr}
 80a0db4:	4604      	mov	r4, r0
  _sigPin = sigPin;
  _type = dht_type;

  pinMode(sigPin, OUTPUT);
 80a0db6:	b28d      	uxth	r5, r1
/*
 * NOTE:  callback_wrapper is only here for backwards compatibility with v0.3 and earlier
 *        it is no longer used or needed
 */
void PietteTech_DHT::begin(uint8_t sigPin, uint8_t dht_type, void(*callback_wrapper)()) {
  _sigPin = sigPin;
 80a0db8:	6441      	str	r1, [r0, #68]	; 0x44
  _type = dht_type;
 80a0dba:	6482      	str	r2, [r0, #72]	; 0x48

  pinMode(sigPin, OUTPUT);
 80a0dbc:	2101      	movs	r1, #1
 80a0dbe:	4628      	mov	r0, r5
 80a0dc0:	f001 feee 	bl	80a2ba0 <pinMode>
  digitalWrite(sigPin, HIGH);
 80a0dc4:	2101      	movs	r1, #1
 80a0dc6:	4628      	mov	r0, r5
 80a0dc8:	f001 fefb 	bl	80a2bc2 <digitalWrite>
  _lastreadtime = 0;
 80a0dcc:	2300      	movs	r3, #0
 80a0dce:	64e3      	str	r3, [r4, #76]	; 0x4c
  _state = STOPPED;
 80a0dd0:	2303      	movs	r3, #3
 80a0dd2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  _status = DHTLIB_ERROR_NOTSTARTED;
 80a0dd6:	f06f 0306 	mvn.w	r3, #6
 80a0dda:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a0ddc:	bd38      	pop	{r3, r4, r5, pc}

080a0dde <_ZN14PietteTech_DHTC1EhhPFvvE>:

/*
 * NOTE:  callback_wrapper is only here for backwards compatibility with v0.3 and earlier
 *        it is no longer used or needed
 */
PietteTech_DHT::PietteTech_DHT(uint8_t sigPin, uint8_t dht_type, void(*callback_wrapper)()) {
 80a0dde:	b510      	push	{r4, lr}
 80a0de0:	4604      	mov	r4, r0
  begin(sigPin, dht_type);
 80a0de2:	2300      	movs	r3, #0
 80a0de4:	f7ff ffe5 	bl	80a0db2 <_ZN14PietteTech_DHT5beginEhhPFvvE>
  _firstreading = true;
 80a0de8:	2301      	movs	r3, #1
 80a0dea:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80a0dee:	4620      	mov	r0, r4
 80a0df0:	bd10      	pop	{r4, pc}
	...

080a0df4 <_ZN14PietteTech_DHT7acquireEv>:
  _lastreadtime = 0;
  _state = STOPPED;
  _status = DHTLIB_ERROR_NOTSTARTED;
}

int PietteTech_DHT::acquire() {
 80a0df4:	b570      	push	{r4, r5, r6, lr}
 80a0df6:	4604      	mov	r4, r0
 80a0df8:	b086      	sub	sp, #24
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0dfa:	f000 fac3 	bl	80a1384 <HAL_Timer_Get_Milli_Seconds>
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading
  unsigned long currenttime = millis();
  if (!_firstreading && ((currenttime - _lastreadtime) < 2000)) {
 80a0dfe:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80a0e02:	b923      	cbnz	r3, 80a0e0e <_ZN14PietteTech_DHT7acquireEv+0x1a>
 80a0e04:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80a0e06:	1ac3      	subs	r3, r0, r3
 80a0e08:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80a0e0c:	d30a      	bcc.n	80a0e24 <_ZN14PietteTech_DHT7acquireEv+0x30>
    // return last correct measurement, (this read time - last read time) < device limit
    return DHTLIB_ACQUIRED;
  }

  if (_state == STOPPED || _state == ACQUIRED) {
 80a0e0e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80a0e12:	2b03      	cmp	r3, #3
 80a0e14:	d008      	beq.n	80a0e28 <_ZN14PietteTech_DHT7acquireEv+0x34>
 80a0e16:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80a0e1a:	2b02      	cmp	r3, #2
 80a0e1c:	d004      	beq.n	80a0e28 <_ZN14PietteTech_DHT7acquireEv+0x34>
    attachInterrupt(_sigPin, &PietteTech_DHT::_isrCallback, this, FALLING);

    return DHTLIB_ACQUIRING;
  }
  else
    return DHTLIB_ERROR_ACQUIRING;
 80a0e1e:	f06f 0004 	mvn.w	r0, #4
 80a0e22:	e05f      	b.n	80a0ee4 <_ZN14PietteTech_DHT7acquireEv+0xf0>
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading
  unsigned long currenttime = millis();
  if (!_firstreading && ((currenttime - _lastreadtime) < 2000)) {
    // return last correct measurement, (this read time - last read time) < device limit
    return DHTLIB_ACQUIRED;
 80a0e24:	2002      	movs	r0, #2
 80a0e26:	e05d      	b.n	80a0ee4 <_ZN14PietteTech_DHT7acquireEv+0xf0>

  if (_state == STOPPED || _state == ACQUIRED) {
    /*
     * Setup the initial state machine
     */
    _firstreading = false;
 80a0e28:	2300      	movs	r3, #0

#if defined(DHT_DEBUG_TIMING)
    /*
     * Clear the debug timings array
     */
    for (int i = 0; i < 41; i++) _edges[i] = 0;
 80a0e2a:	461a      	mov	r2, r3

  if (_state == STOPPED || _state == ACQUIRED) {
    /*
     * Setup the initial state machine
     */
    _firstreading = false;
 80a0e2c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    _lastreadtime = currenttime;
 80a0e30:	64e0      	str	r0, [r4, #76]	; 0x4c
    _state = RESPONSE;
 80a0e32:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29

#if defined(DHT_DEBUG_TIMING)
    /*
     * Clear the debug timings array
     */
    for (int i = 0; i < 41; i++) _edges[i] = 0;
 80a0e36:	54e2      	strb	r2, [r4, r3]
 80a0e38:	3301      	adds	r3, #1
 80a0e3a:	2b29      	cmp	r3, #41	; 0x29
 80a0e3c:	f04f 0500 	mov.w	r5, #0
 80a0e40:	d1f9      	bne.n	80a0e36 <_ZN14PietteTech_DHT7acquireEv+0x42>

    /*
     * Set the initial values in the buffer and variables
     */
    for (int i = 0; i < 5; i++) _bits[i] = 0;
    _cnt = 7;
 80a0e42:	2307      	movs	r3, #7
#endif

    /*
     * Set the initial values in the buffer and variables
     */
    for (int i = 0; i < 5; i++) _bits[i] = 0;
 80a0e44:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
 80a0e48:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 80a0e4c:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
 80a0e50:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
 80a0e54:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    _cnt = 7;
 80a0e58:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    _idx = 0;
    _hum = 0;
 80a0e5c:	2300      	movs	r3, #0
 80a0e5e:	6563      	str	r3, [r4, #84]	; 0x54
    _temp = 0;
 80a0e60:	65a3      	str	r3, [r4, #88]	; 0x58

    /*
     * Toggle the digital output to trigger the DHT device
     * to send us temperature and humidity data
     */
    pinMode(_sigPin, OUTPUT);
 80a0e62:	2101      	movs	r1, #1
 80a0e64:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
#if defined(DHT_DEBUG_TIMING)
    /*
     * Clear the debug timings array
     */
    for (int i = 0; i < 41; i++) _edges[i] = 0;
    _e = &_edges[0];
 80a0e68:	6424      	str	r4, [r4, #64]	; 0x40
    /*
     * Set the initial values in the buffer and variables
     */
    for (int i = 0; i < 5; i++) _bits[i] = 0;
    _cnt = 7;
    _idx = 0;
 80a0e6a:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36

    /*
     * Toggle the digital output to trigger the DHT device
     * to send us temperature and humidity data
     */
    pinMode(_sigPin, OUTPUT);
 80a0e6e:	f001 fe97 	bl	80a2ba0 <pinMode>
    digitalWrite(_sigPin, LOW);
 80a0e72:	4629      	mov	r1, r5
 80a0e74:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80a0e78:	f001 fea3 	bl	80a2bc2 <digitalWrite>
    if (_type == DHT11)
 80a0e7c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80a0e7e:	2b0b      	cmp	r3, #11
 80a0e80:	d103      	bne.n	80a0e8a <_ZN14PietteTech_DHT7acquireEv+0x96>
      delay(18);                  // DHT11 Spec: 18ms min
 80a0e82:	2012      	movs	r0, #18
 80a0e84:	f000 fccc 	bl	80a1820 <delay>
 80a0e88:	e003      	b.n	80a0e92 <_ZN14PietteTech_DHT7acquireEv+0x9e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a0e8a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80a0e8e:	f000 fa69 	bl	80a1364 <HAL_Delay_Microseconds>
    else
      delayMicroseconds(1500);    // DHT22 Spec: 0.8-20ms, 1ms typ
    pinMode(_sigPin, INPUT);        // Note Hi-Z mode with pullup resistor
 80a0e92:	2100      	movs	r1, #0
 80a0e94:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80a0e98:	f001 fe82 	bl	80a2ba0 <pinMode>

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0e9c:	f000 fa6a 	bl	80a1374 <HAL_Timer_Get_Micro_Seconds>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0ea0:	2500      	movs	r5, #0
                                    // will keep this high until the DHT responds.
    /*
     * Attach the interrupt handler to receive the data once the DHT
     * starts to send us data
     */
    _us = micros();
 80a0ea2:	63a0      	str	r0, [r4, #56]	; 0x38
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0ea4:	200c      	movs	r0, #12
    attachInterrupt(_sigPin, &PietteTech_DHT::_isrCallback, this, FALLING);
 80a0ea6:	f8b4 6044 	ldrh.w	r6, [r4, #68]	; 0x44
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0eaa:	9504      	str	r5, [sp, #16]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0eac:	f7ff f8f5 	bl	80a009a <_Znwj>
 80a0eb0:	b118      	cbz	r0, 80a0eba <_ZN14PietteTech_DHT7acquireEv+0xc6>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 80a0eb2:	4b0d      	ldr	r3, [pc, #52]	; (80a0ee8 <_ZN14PietteTech_DHT7acquireEv+0xf4>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0eb4:	6084      	str	r4, [r0, #8]
 80a0eb6:	e880 0028 	stmia.w	r0, {r3, r5}
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0eba:	4b0c      	ldr	r3, [pc, #48]	; (80a0eec <_ZN14PietteTech_DHT7acquireEv+0xf8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0ebc:	9002      	str	r0, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0ebe:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80a0ec0:	4b0b      	ldr	r3, [pc, #44]	; (80a0ef0 <_ZN14PietteTech_DHT7acquireEv+0xfc>)
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
 80a0ec2:	2202      	movs	r2, #2
 80a0ec4:	9304      	str	r3, [sp, #16]
 80a0ec6:	2300      	movs	r3, #0
 80a0ec8:	9300      	str	r3, [sp, #0]
 80a0eca:	a902      	add	r1, sp, #8
 80a0ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a0ed0:	4630      	mov	r0, r6
 80a0ed2:	f001 f831 	bl	80a1f38 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a0ed6:	9b04      	ldr	r3, [sp, #16]
 80a0ed8:	b11b      	cbz	r3, 80a0ee2 <_ZN14PietteTech_DHT7acquireEv+0xee>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0eda:	a902      	add	r1, sp, #8
 80a0edc:	2203      	movs	r2, #3
 80a0ede:	4608      	mov	r0, r1
 80a0ee0:	4798      	blx	r3
 80a0ee2:	2001      	movs	r0, #1

    return DHTLIB_ACQUIRING;
  }
  else
    return DHTLIB_ERROR_ACQUIRING;
}
 80a0ee4:	b006      	add	sp, #24
 80a0ee6:	bd70      	pop	{r4, r5, r6, pc}
 80a0ee8:	080a0c31 	.word	0x080a0c31
 80a0eec:	080a0c15 	.word	0x080a0c15
 80a0ef0:	080a0d7b 	.word	0x080a0d7b

080a0ef4 <_ZN14PietteTech_DHT11isrCallbackEv>:

/*
 * NOTE:  isrCallback is only here for backwards compatibility with v0.3 and earlier
 *        it is no longer used or needed
 */
void PietteTech_DHT::isrCallback() { }
 80a0ef4:	4770      	bx	lr
	...

080a0ef8 <_ZN14PietteTech_DHT7convertEv>:
  default:
    break;
  }
}

void PietteTech_DHT::convert() {
 80a0ef8:	b510      	push	{r4, lr}
  // Calculate the temperature and humidity based on the sensor type
  switch (_type) {
 80a0efa:	6c83      	ldr	r3, [r0, #72]	; 0x48
  default:
    break;
  }
}

void PietteTech_DHT::convert() {
 80a0efc:	4604      	mov	r4, r0
  // Calculate the temperature and humidity based on the sensor type
  switch (_type) {
 80a0efe:	2b0b      	cmp	r3, #11
 80a0f00:	d030      	beq.n	80a0f64 <_ZN14PietteTech_DHT7convertEv+0x6c>
 80a0f02:	db39      	blt.n	80a0f78 <_ZN14PietteTech_DHT7convertEv+0x80>
 80a0f04:	3b15      	subs	r3, #21
 80a0f06:	2b01      	cmp	r3, #1
 80a0f08:	d836      	bhi.n	80a0f78 <_ZN14PietteTech_DHT7convertEv+0x80>
    _hum = _bits[0];
    _temp = _bits[2];
    break;
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
 80a0f0a:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 80a0f0e:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80a0f12:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80a0f16:	b280      	uxth	r0, r0
 80a0f18:	f003 fe02 	bl	80a4b20 <__aeabi_i2d>
 80a0f1c:	a318      	add	r3, pc, #96	; (adr r3, 80a0f80 <_ZN14PietteTech_DHT7convertEv+0x88>)
 80a0f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0f22:	f003 fe63 	bl	80a4bec <__aeabi_dmul>
 80a0f26:	f004 f959 	bl	80a51dc <__aeabi_d2f>
    _temp = (_bits[2] & 0x80 ?
 80a0f2a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    _hum = _bits[0];
    _temp = _bits[2];
    break;
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
 80a0f2e:	6560      	str	r0, [r4, #84]	; 0x54
    _temp = (_bits[2] & 0x80 ?
      -word(_bits[2] & 0x7F, _bits[3]) :
 80a0f30:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
      word(_bits[2], _bits[3])) * 0.1;
 80a0f34:	f013 0f80 	tst.w	r3, #128	; 0x80
    break;
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
    _temp = (_bits[2] & 0x80 ?
      -word(_bits[2] & 0x7F, _bits[3]) :
 80a0f38:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
      word(_bits[2], _bits[3])) * 0.1;
 80a0f3c:	bf1b      	ittet	ne
 80a0f3e:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
 80a0f42:	eb03 2000 	addne.w	r0, r3, r0, lsl #8
 80a0f46:	eb03 2000 	addeq.w	r0, r3, r0, lsl #8
 80a0f4a:	4240      	negne	r0, r0
 80a0f4c:	bf08      	it	eq
 80a0f4e:	b280      	uxtheq	r0, r0
 80a0f50:	f003 fde6 	bl	80a4b20 <__aeabi_i2d>
 80a0f54:	a30a      	add	r3, pc, #40	; (adr r3, 80a0f80 <_ZN14PietteTech_DHT7convertEv+0x88>)
 80a0f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0f5a:	f003 fe47 	bl	80a4bec <__aeabi_dmul>
 80a0f5e:	f004 f93d 	bl	80a51dc <__aeabi_d2f>
 80a0f62:	e008      	b.n	80a0f76 <_ZN14PietteTech_DHT7convertEv+0x7e>

void PietteTech_DHT::convert() {
  // Calculate the temperature and humidity based on the sensor type
  switch (_type) {
  case DHT11:
    _hum = _bits[0];
 80a0f64:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 80a0f68:	f004 fa3e 	bl	80a53e8 <__aeabi_ui2f>
 80a0f6c:	6560      	str	r0, [r4, #84]	; 0x54
    _temp = _bits[2];
 80a0f6e:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 80a0f72:	f004 fa39 	bl	80a53e8 <__aeabi_ui2f>
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
    _temp = (_bits[2] & 0x80 ?
      -word(_bits[2] & 0x7F, _bits[3]) :
      word(_bits[2], _bits[3])) * 0.1;
 80a0f76:	65a0      	str	r0, [r4, #88]	; 0x58
    break;
  }
  _convert = false;
 80a0f78:	2300      	movs	r3, #0
 80a0f7a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80a0f7e:	bd10      	pop	{r4, pc}
 80a0f80:	9999999a 	.word	0x9999999a
 80a0f84:	3fb99999 	.word	0x3fb99999

080a0f88 <_ZN14PietteTech_DHT9acquiringEv>:
}

bool PietteTech_DHT::acquiring() {
  if (_state != ACQUIRED && _state != STOPPED)
 80a0f88:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a0f8c:	2b02      	cmp	r3, #2
 80a0f8e:	d005      	beq.n	80a0f9c <_ZN14PietteTech_DHT9acquiringEv+0x14>
 80a0f90:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 80a0f94:	3803      	subs	r0, #3
 80a0f96:	bf18      	it	ne
 80a0f98:	2001      	movne	r0, #1
 80a0f9a:	4770      	bx	lr
    return true;
  return false;
 80a0f9c:	2000      	movs	r0, #0
}
 80a0f9e:	4770      	bx	lr

080a0fa0 <_ZN14PietteTech_DHT9getStatusEv>:

int PietteTech_DHT::getStatus() {
  return _status;
 80a0fa0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
 80a0fa2:	4770      	bx	lr

080a0fa4 <_ZN14PietteTech_DHT10getCelsiusEv>:

float PietteTech_DHT::getCelsius() {
 80a0fa4:	b510      	push	{r4, lr}
  DHT_CHECK_STATE;
 80a0fa6:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29

int PietteTech_DHT::getStatus() {
  return _status;
}

float PietteTech_DHT::getCelsius() {
 80a0faa:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80a0fac:	2b03      	cmp	r3, #3
 80a0fae:	d103      	bne.n	80a0fb8 <_ZN14PietteTech_DHT10getCelsiusEv+0x14>
 80a0fb0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a0fb2:	f004 fa1d 	bl	80a53f0 <__aeabi_i2f>
 80a0fb6:	bd10      	pop	{r4, pc}
 80a0fb8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a0fbc:	2b02      	cmp	r3, #2
 80a0fbe:	d106      	bne.n	80a0fce <_ZN14PietteTech_DHT10getCelsiusEv+0x2a>
 80a0fc0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80a0fc4:	b10b      	cbz	r3, 80a0fca <_ZN14PietteTech_DHT10getCelsiusEv+0x26>
 80a0fc6:	f7ff ff97 	bl	80a0ef8 <_ZN14PietteTech_DHT7convertEv>
  return _temp;
 80a0fca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80a0fcc:	bd10      	pop	{r4, pc}
int PietteTech_DHT::getStatus() {
  return _status;
}

float PietteTech_DHT::getCelsius() {
  DHT_CHECK_STATE;
 80a0fce:	4801      	ldr	r0, [pc, #4]	; (80a0fd4 <_ZN14PietteTech_DHT10getCelsiusEv+0x30>)
  return _temp;
}
 80a0fd0:	bd10      	pop	{r4, pc}
 80a0fd2:	bf00      	nop
 80a0fd4:	c0a00000 	.word	0xc0a00000

080a0fd8 <_ZN14PietteTech_DHT11getHumidityEv>:

float PietteTech_DHT::getHumidity() {
 80a0fd8:	b510      	push	{r4, lr}
  DHT_CHECK_STATE;
 80a0fda:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
float PietteTech_DHT::getCelsius() {
  DHT_CHECK_STATE;
  return _temp;
}

float PietteTech_DHT::getHumidity() {
 80a0fde:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80a0fe0:	2b03      	cmp	r3, #3
 80a0fe2:	d103      	bne.n	80a0fec <_ZN14PietteTech_DHT11getHumidityEv+0x14>
 80a0fe4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a0fe6:	f004 fa03 	bl	80a53f0 <__aeabi_i2f>
 80a0fea:	bd10      	pop	{r4, pc}
 80a0fec:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a0ff0:	2b02      	cmp	r3, #2
 80a0ff2:	d106      	bne.n	80a1002 <_ZN14PietteTech_DHT11getHumidityEv+0x2a>
 80a0ff4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80a0ff8:	b10b      	cbz	r3, 80a0ffe <_ZN14PietteTech_DHT11getHumidityEv+0x26>
 80a0ffa:	f7ff ff7d 	bl	80a0ef8 <_ZN14PietteTech_DHT7convertEv>
  return _hum;
 80a0ffe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80a1000:	bd10      	pop	{r4, pc}
  DHT_CHECK_STATE;
  return _temp;
}

float PietteTech_DHT::getHumidity() {
  DHT_CHECK_STATE;
 80a1002:	4801      	ldr	r0, [pc, #4]	; (80a1008 <_ZN14PietteTech_DHT11getHumidityEv+0x30>)
  return _hum;
}
 80a1004:	bd10      	pop	{r4, pc}
 80a1006:	bf00      	nop
 80a1008:	c0a00000 	.word	0xc0a00000
 80a100c:	00000000 	.word	0x00000000

080a1010 <_ZN14PietteTech_DHT11getDewPointEv>:
}

// delta max = 0.6544 wrt dewPoint()
// 5x faster than dewPoint()
// reference: http://en.wikipedia.org/wiki/Dew_point
double PietteTech_DHT::getDewPoint() {
 80a1010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  DHT_CHECK_STATE;
 80a1014:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
}

// delta max = 0.6544 wrt dewPoint()
// 5x faster than dewPoint()
// reference: http://en.wikipedia.org/wiki/Dew_point
double PietteTech_DHT::getDewPoint() {
 80a1018:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80a101a:	2b03      	cmp	r3, #3
 80a101c:	d104      	bne.n	80a1028 <_ZN14PietteTech_DHT11getDewPointEv+0x18>
 80a101e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a1020:	f003 fd7e 	bl	80a4b20 <__aeabi_i2d>
 80a1024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a1028:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a102c:	2b02      	cmp	r3, #2
 80a102e:	d146      	bne.n	80a10be <_ZN14PietteTech_DHT11getDewPointEv+0xae>
 80a1030:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80a1034:	b10b      	cbz	r3, 80a103a <_ZN14PietteTech_DHT11getDewPointEv+0x2a>
 80a1036:	f7ff ff5f 	bl	80a0ef8 <_ZN14PietteTech_DHT7convertEv>
  double a = 17.271;
  double b = 237.7;
  double temp_ = (a * (double)_temp) / (b + (double)_temp) + log((double)_hum / 100);
 80a103a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80a103c:	f003 fd82 	bl	80a4b44 <__aeabi_f2d>
 80a1040:	4606      	mov	r6, r0
 80a1042:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80a1044:	460f      	mov	r7, r1
 80a1046:	f003 fd7d 	bl	80a4b44 <__aeabi_f2d>
 80a104a:	2200      	movs	r2, #0
 80a104c:	4b22      	ldr	r3, [pc, #136]	; (80a10d8 <_ZN14PietteTech_DHT11getDewPointEv+0xc8>)
 80a104e:	f003 fef7 	bl	80a4e40 <__aeabi_ddiv>
 80a1052:	f001 ffb5 	bl	80a2fc0 <log>
 80a1056:	a31c      	add	r3, pc, #112	; (adr r3, 80a10c8 <_ZN14PietteTech_DHT11getDewPointEv+0xb8>)
 80a1058:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a105c:	4604      	mov	r4, r0
 80a105e:	460d      	mov	r5, r1
 80a1060:	4630      	mov	r0, r6
 80a1062:	4639      	mov	r1, r7
 80a1064:	f003 fdc2 	bl	80a4bec <__aeabi_dmul>
 80a1068:	a319      	add	r3, pc, #100	; (adr r3, 80a10d0 <_ZN14PietteTech_DHT11getDewPointEv+0xc0>)
 80a106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a106e:	4680      	mov	r8, r0
 80a1070:	4689      	mov	r9, r1
 80a1072:	4630      	mov	r0, r6
 80a1074:	4639      	mov	r1, r7
 80a1076:	f003 fc07 	bl	80a4888 <__adddf3>
 80a107a:	4602      	mov	r2, r0
 80a107c:	460b      	mov	r3, r1
 80a107e:	4640      	mov	r0, r8
 80a1080:	4649      	mov	r1, r9
 80a1082:	f003 fedd 	bl	80a4e40 <__aeabi_ddiv>
 80a1086:	4622      	mov	r2, r4
 80a1088:	462b      	mov	r3, r5
 80a108a:	f003 fbfd 	bl	80a4888 <__adddf3>
  double Td = (b * temp_) / (a - temp_);
 80a108e:	a310      	add	r3, pc, #64	; (adr r3, 80a10d0 <_ZN14PietteTech_DHT11getDewPointEv+0xc0>)
 80a1090:	e9d3 2300 	ldrd	r2, r3, [r3]
// reference: http://en.wikipedia.org/wiki/Dew_point
double PietteTech_DHT::getDewPoint() {
  DHT_CHECK_STATE;
  double a = 17.271;
  double b = 237.7;
  double temp_ = (a * (double)_temp) / (b + (double)_temp) + log((double)_hum / 100);
 80a1094:	4606      	mov	r6, r0
 80a1096:	460f      	mov	r7, r1
  double Td = (b * temp_) / (a - temp_);
 80a1098:	f003 fda8 	bl	80a4bec <__aeabi_dmul>
 80a109c:	4632      	mov	r2, r6
 80a109e:	4604      	mov	r4, r0
 80a10a0:	460d      	mov	r5, r1
 80a10a2:	a109      	add	r1, pc, #36	; (adr r1, 80a10c8 <_ZN14PietteTech_DHT11getDewPointEv+0xb8>)
 80a10a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a10a8:	463b      	mov	r3, r7
 80a10aa:	f003 fbeb 	bl	80a4884 <__aeabi_dsub>
 80a10ae:	4602      	mov	r2, r0
 80a10b0:	460b      	mov	r3, r1
 80a10b2:	4620      	mov	r0, r4
 80a10b4:	4629      	mov	r1, r5
 80a10b6:	f003 fec3 	bl	80a4e40 <__aeabi_ddiv>
  return Td;
 80a10ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

// delta max = 0.6544 wrt dewPoint()
// 5x faster than dewPoint()
// reference: http://en.wikipedia.org/wiki/Dew_point
double PietteTech_DHT::getDewPoint() {
  DHT_CHECK_STATE;
 80a10be:	2000      	movs	r0, #0
 80a10c0:	4906      	ldr	r1, [pc, #24]	; (80a10dc <_ZN14PietteTech_DHT11getDewPointEv+0xcc>)
  double a = 17.271;
  double b = 237.7;
  double temp_ = (a * (double)_temp) / (b + (double)_temp) + log((double)_hum / 100);
  double Td = (b * temp_) / (a - temp_);
  return Td;
}
 80a10c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a10c6:	bf00      	nop
 80a10c8:	4189374c 	.word	0x4189374c
 80a10cc:	40314560 	.word	0x40314560
 80a10d0:	66666666 	.word	0x66666666
 80a10d4:	406db666 	.word	0x406db666
 80a10d8:	40590000 	.word	0x40590000
 80a10dc:	c0140000 	.word	0xc0140000

080a10e0 <_ZN14PietteTech_DHT15getDewPointSlowEv>:

// dewPoint function NOAA
// reference: http://wahiduddin.net/calc/density_algorithms.htm
double PietteTech_DHT::getDewPointSlow() {
 80a10e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  DHT_CHECK_STATE;
 80a10e4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
  return Td;
}

// dewPoint function NOAA
// reference: http://wahiduddin.net/calc/density_algorithms.htm
double PietteTech_DHT::getDewPointSlow() {
 80a10e8:	4682      	mov	sl, r0
  DHT_CHECK_STATE;
 80a10ea:	2b03      	cmp	r3, #3
 80a10ec:	d104      	bne.n	80a10f8 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x18>
 80a10ee:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a10f0:	f003 fd16 	bl	80a4b20 <__aeabi_i2d>
 80a10f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a10f8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80a10fc:	2b02      	cmp	r3, #2
 80a10fe:	f040 80ab 	bne.w	80a1258 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x178>
 80a1102:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80a1106:	b10b      	cbz	r3, 80a110c <_ZN14PietteTech_DHT15getDewPointSlowEv+0x2c>
 80a1108:	f7ff fef6 	bl	80a0ef8 <_ZN14PietteTech_DHT7convertEv>
  double a0 = (double) 373.15 / (273.15 + (double)_temp);
 80a110c:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 80a1110:	f003 fd18 	bl	80a4b44 <__aeabi_f2d>
 80a1114:	a352      	add	r3, pc, #328	; (adr r3, 80a1260 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x180>)
 80a1116:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a111a:	f003 fbb5 	bl	80a4888 <__adddf3>
 80a111e:	4602      	mov	r2, r0
 80a1120:	460b      	mov	r3, r1
 80a1122:	a151      	add	r1, pc, #324	; (adr r1, 80a1268 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x188>)
 80a1124:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a1128:	f003 fe8a 	bl	80a4e40 <__aeabi_ddiv>
  double SUM = (double)-7.90298 * (a0 - 1.0);
 80a112c:	2200      	movs	r2, #0
 80a112e:	4b64      	ldr	r3, [pc, #400]	; (80a12c0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)

// dewPoint function NOAA
// reference: http://wahiduddin.net/calc/density_algorithms.htm
double PietteTech_DHT::getDewPointSlow() {
  DHT_CHECK_STATE;
  double a0 = (double) 373.15 / (273.15 + (double)_temp);
 80a1130:	4604      	mov	r4, r0
 80a1132:	460d      	mov	r5, r1
  double SUM = (double)-7.90298 * (a0 - 1.0);
 80a1134:	f003 fba6 	bl	80a4884 <__aeabi_dsub>
 80a1138:	a34d      	add	r3, pc, #308	; (adr r3, 80a1270 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x190>)
 80a113a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a113e:	4606      	mov	r6, r0
 80a1140:	460f      	mov	r7, r1
 80a1142:	f003 fd53 	bl	80a4bec <__aeabi_dmul>
 80a1146:	4680      	mov	r8, r0
 80a1148:	4689      	mov	r9, r1
  SUM += 5.02808 * log10(a0);
 80a114a:	4620      	mov	r0, r4
 80a114c:	4629      	mov	r1, r5
 80a114e:	f001 ffb7 	bl	80a30c0 <log10>
 80a1152:	a349      	add	r3, pc, #292	; (adr r3, 80a1278 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x198>)
 80a1154:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1158:	f003 fd48 	bl	80a4bec <__aeabi_dmul>
 80a115c:	4642      	mov	r2, r8
 80a115e:	464b      	mov	r3, r9
 80a1160:	f003 fb92 	bl	80a4888 <__adddf3>
  SUM += -1.3816e-7 * (pow(10, (11.344*(1 - 1 / a0))) - 1);
 80a1164:	4622      	mov	r2, r4
// reference: http://wahiduddin.net/calc/density_algorithms.htm
double PietteTech_DHT::getDewPointSlow() {
  DHT_CHECK_STATE;
  double a0 = (double) 373.15 / (273.15 + (double)_temp);
  double SUM = (double)-7.90298 * (a0 - 1.0);
  SUM += 5.02808 * log10(a0);
 80a1166:	4680      	mov	r8, r0
 80a1168:	4689      	mov	r9, r1
  SUM += -1.3816e-7 * (pow(10, (11.344*(1 - 1 / a0))) - 1);
 80a116a:	462b      	mov	r3, r5
 80a116c:	2000      	movs	r0, #0
 80a116e:	4954      	ldr	r1, [pc, #336]	; (80a12c0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
 80a1170:	f003 fe66 	bl	80a4e40 <__aeabi_ddiv>
 80a1174:	4602      	mov	r2, r0
 80a1176:	460b      	mov	r3, r1
 80a1178:	2000      	movs	r0, #0
 80a117a:	4951      	ldr	r1, [pc, #324]	; (80a12c0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
 80a117c:	f003 fb82 	bl	80a4884 <__aeabi_dsub>
 80a1180:	a33f      	add	r3, pc, #252	; (adr r3, 80a1280 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1a0>)
 80a1182:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1186:	f003 fd31 	bl	80a4bec <__aeabi_dmul>
 80a118a:	4602      	mov	r2, r0
 80a118c:	460b      	mov	r3, r1
 80a118e:	2000      	movs	r0, #0
 80a1190:	494c      	ldr	r1, [pc, #304]	; (80a12c4 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e4>)
 80a1192:	f002 f817 	bl	80a31c4 <pow>
 80a1196:	2200      	movs	r2, #0
 80a1198:	4b49      	ldr	r3, [pc, #292]	; (80a12c0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
 80a119a:	f003 fb73 	bl	80a4884 <__aeabi_dsub>
 80a119e:	a33a      	add	r3, pc, #232	; (adr r3, 80a1288 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1a8>)
 80a11a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a11a4:	f003 fd22 	bl	80a4bec <__aeabi_dmul>
 80a11a8:	4642      	mov	r2, r8
 80a11aa:	464b      	mov	r3, r9
 80a11ac:	f003 fb6c 	bl	80a4888 <__adddf3>
  SUM += 8.1328e-3 * (pow(10, (-3.49149*(a0 - 1))) - 1);
 80a11b0:	a337      	add	r3, pc, #220	; (adr r3, 80a1290 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1b0>)
 80a11b2:	e9d3 2300 	ldrd	r2, r3, [r3]
double PietteTech_DHT::getDewPointSlow() {
  DHT_CHECK_STATE;
  double a0 = (double) 373.15 / (273.15 + (double)_temp);
  double SUM = (double)-7.90298 * (a0 - 1.0);
  SUM += 5.02808 * log10(a0);
  SUM += -1.3816e-7 * (pow(10, (11.344*(1 - 1 / a0))) - 1);
 80a11b6:	4604      	mov	r4, r0
 80a11b8:	460d      	mov	r5, r1
  SUM += 8.1328e-3 * (pow(10, (-3.49149*(a0 - 1))) - 1);
 80a11ba:	4630      	mov	r0, r6
 80a11bc:	4639      	mov	r1, r7
 80a11be:	f003 fd15 	bl	80a4bec <__aeabi_dmul>
 80a11c2:	4602      	mov	r2, r0
 80a11c4:	460b      	mov	r3, r1
 80a11c6:	2000      	movs	r0, #0
 80a11c8:	493e      	ldr	r1, [pc, #248]	; (80a12c4 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e4>)
 80a11ca:	f001 fffb 	bl	80a31c4 <pow>
 80a11ce:	2200      	movs	r2, #0
 80a11d0:	4b3b      	ldr	r3, [pc, #236]	; (80a12c0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e0>)
 80a11d2:	f003 fb57 	bl	80a4884 <__aeabi_dsub>
 80a11d6:	a330      	add	r3, pc, #192	; (adr r3, 80a1298 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1b8>)
 80a11d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a11dc:	f003 fd06 	bl	80a4bec <__aeabi_dmul>
 80a11e0:	4622      	mov	r2, r4
 80a11e2:	462b      	mov	r3, r5
 80a11e4:	f003 fb50 	bl	80a4888 <__adddf3>
  SUM += log10(1013.246);
  double VP = pow(10, SUM - 3) * (double)_hum;
 80a11e8:	a32d      	add	r3, pc, #180	; (adr r3, 80a12a0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1c0>)
 80a11ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a11ee:	f003 fb4b 	bl	80a4888 <__adddf3>
 80a11f2:	2200      	movs	r2, #0
 80a11f4:	4b34      	ldr	r3, [pc, #208]	; (80a12c8 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e8>)
 80a11f6:	f003 fb45 	bl	80a4884 <__aeabi_dsub>
 80a11fa:	4602      	mov	r2, r0
 80a11fc:	460b      	mov	r3, r1
 80a11fe:	2000      	movs	r0, #0
 80a1200:	4930      	ldr	r1, [pc, #192]	; (80a12c4 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1e4>)
 80a1202:	f001 ffdf 	bl	80a31c4 <pow>
 80a1206:	4604      	mov	r4, r0
 80a1208:	460d      	mov	r5, r1
  double T = log(VP / 0.61078); // temp var
 80a120a:	f8da 0054 	ldr.w	r0, [sl, #84]	; 0x54
 80a120e:	f003 fc99 	bl	80a4b44 <__aeabi_f2d>
 80a1212:	4622      	mov	r2, r4
 80a1214:	462b      	mov	r3, r5
 80a1216:	f003 fce9 	bl	80a4bec <__aeabi_dmul>
 80a121a:	a323      	add	r3, pc, #140	; (adr r3, 80a12a8 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1c8>)
 80a121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1220:	f003 fe0e 	bl	80a4e40 <__aeabi_ddiv>
 80a1224:	f001 fecc 	bl	80a2fc0 <log>
  return (241.88 * T) / (17.558 - T);
 80a1228:	a321      	add	r3, pc, #132	; (adr r3, 80a12b0 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1d0>)
 80a122a:	e9d3 2300 	ldrd	r2, r3, [r3]
  SUM += 5.02808 * log10(a0);
  SUM += -1.3816e-7 * (pow(10, (11.344*(1 - 1 / a0))) - 1);
  SUM += 8.1328e-3 * (pow(10, (-3.49149*(a0 - 1))) - 1);
  SUM += log10(1013.246);
  double VP = pow(10, SUM - 3) * (double)_hum;
  double T = log(VP / 0.61078); // temp var
 80a122e:	4606      	mov	r6, r0
 80a1230:	460f      	mov	r7, r1
  return (241.88 * T) / (17.558 - T);
 80a1232:	f003 fcdb 	bl	80a4bec <__aeabi_dmul>
 80a1236:	4632      	mov	r2, r6
 80a1238:	4604      	mov	r4, r0
 80a123a:	460d      	mov	r5, r1
 80a123c:	a11e      	add	r1, pc, #120	; (adr r1, 80a12b8 <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1d8>)
 80a123e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a1242:	463b      	mov	r3, r7
 80a1244:	f003 fb1e 	bl	80a4884 <__aeabi_dsub>
 80a1248:	4602      	mov	r2, r0
 80a124a:	460b      	mov	r3, r1
 80a124c:	4620      	mov	r0, r4
 80a124e:	4629      	mov	r1, r5
 80a1250:	f003 fdf6 	bl	80a4e40 <__aeabi_ddiv>
 80a1254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
}

// dewPoint function NOAA
// reference: http://wahiduddin.net/calc/density_algorithms.htm
double PietteTech_DHT::getDewPointSlow() {
  DHT_CHECK_STATE;
 80a1258:	2000      	movs	r0, #0
 80a125a:	491c      	ldr	r1, [pc, #112]	; (80a12cc <_ZN14PietteTech_DHT15getDewPointSlowEv+0x1ec>)
  SUM += 8.1328e-3 * (pow(10, (-3.49149*(a0 - 1))) - 1);
  SUM += log10(1013.246);
  double VP = pow(10, SUM - 3) * (double)_hum;
  double T = log(VP / 0.61078); // temp var
  return (241.88 * T) / (17.558 - T);
}
 80a125c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1260:	66666666 	.word	0x66666666
 80a1264:	40711266 	.word	0x40711266
 80a1268:	66666666 	.word	0x66666666
 80a126c:	40775266 	.word	0x40775266
 80a1270:	ca03c4b1 	.word	0xca03c4b1
 80a1274:	c01f9ca6 	.word	0xc01f9ca6
 80a1278:	00e6afcd 	.word	0x00e6afcd
 80a127c:	40141cc1 	.word	0x40141cc1
 80a1280:	c49ba5e3 	.word	0xc49ba5e3
 80a1284:	4026b020 	.word	0x4026b020
 80a1288:	36423db1 	.word	0x36423db1
 80a128c:	be828b24 	.word	0xbe828b24
 80a1290:	4f227d03 	.word	0x4f227d03
 80a1294:	c00bee92 	.word	0xc00bee92
 80a1298:	f0330363 	.word	0xf0330363
 80a129c:	3f80a7ed 	.word	0x3f80a7ed
 80a12a0:	409e541b 	.word	0x409e541b
 80a12a4:	40080bb4 	.word	0x40080bb4
 80a12a8:	7fa1a0cf 	.word	0x7fa1a0cf
 80a12ac:	3fe38b82 	.word	0x3fe38b82
 80a12b0:	f5c28f5c 	.word	0xf5c28f5c
 80a12b4:	406e3c28 	.word	0x406e3c28
 80a12b8:	16872b02 	.word	0x16872b02
 80a12bc:	40318ed9 	.word	0x40318ed9
 80a12c0:	3ff00000 	.word	0x3ff00000
 80a12c4:	40240000 	.word	0x40240000
 80a12c8:	40080000 	.word	0x40080000
 80a12cc:	c0140000 	.word	0xc0140000

080a12d0 <_GLOBAL__sub_I__Z4wordhh>:
 80a12d0:	f000 b870 	b.w	80a13b4 <HAL_Pin_Map>

080a12d4 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 80a12d4:	b508      	push	{r3, lr}
 80a12d6:	4b02      	ldr	r3, [pc, #8]	; (80a12e0 <os_thread_yield+0xc>)
 80a12d8:	681b      	ldr	r3, [r3, #0]
 80a12da:	68db      	ldr	r3, [r3, #12]
 80a12dc:	9301      	str	r3, [sp, #4]
 80a12de:	bd08      	pop	{r3, pc}
 80a12e0:	080601d0 	.word	0x080601d0

080a12e4 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 80a12e4:	b508      	push	{r3, lr}
 80a12e6:	4b02      	ldr	r3, [pc, #8]	; (80a12f0 <os_thread_scheduling+0xc>)
 80a12e8:	681b      	ldr	r3, [r3, #0]
 80a12ea:	69db      	ldr	r3, [r3, #28]
 80a12ec:	9301      	str	r3, [sp, #4]
 80a12ee:	bd08      	pop	{r3, pc}
 80a12f0:	080601d0 	.word	0x080601d0

080a12f4 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 80a12f4:	b508      	push	{r3, lr}
 80a12f6:	4b02      	ldr	r3, [pc, #8]	; (80a1300 <os_timer_create+0xc>)
 80a12f8:	681b      	ldr	r3, [r3, #0]
 80a12fa:	6a1b      	ldr	r3, [r3, #32]
 80a12fc:	9301      	str	r3, [sp, #4]
 80a12fe:	bd08      	pop	{r3, pc}
 80a1300:	080601d0 	.word	0x080601d0

080a1304 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 80a1304:	b508      	push	{r3, lr}
 80a1306:	4b02      	ldr	r3, [pc, #8]	; (80a1310 <os_timer_destroy+0xc>)
 80a1308:	681b      	ldr	r3, [r3, #0]
 80a130a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a130c:	9301      	str	r3, [sp, #4]
 80a130e:	bd08      	pop	{r3, pc}
 80a1310:	080601d0 	.word	0x080601d0

080a1314 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 80a1314:	b508      	push	{r3, lr}
 80a1316:	4b02      	ldr	r3, [pc, #8]	; (80a1320 <os_timer_get_id+0xc>)
 80a1318:	681b      	ldr	r3, [r3, #0]
 80a131a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a131c:	9301      	str	r3, [sp, #4]
 80a131e:	bd08      	pop	{r3, pc}
 80a1320:	080601d0 	.word	0x080601d0

080a1324 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 80a1324:	b508      	push	{r3, lr}
 80a1326:	4b02      	ldr	r3, [pc, #8]	; (80a1330 <os_timer_change+0xc>)
 80a1328:	681b      	ldr	r3, [r3, #0]
 80a132a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a132c:	9301      	str	r3, [sp, #4]
 80a132e:	bd08      	pop	{r3, pc}
 80a1330:	080601d0 	.word	0x080601d0

080a1334 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1334:	b508      	push	{r3, lr}
 80a1336:	4b02      	ldr	r3, [pc, #8]	; (80a1340 <os_mutex_create+0xc>)
 80a1338:	681b      	ldr	r3, [r3, #0]
 80a133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a133c:	9301      	str	r3, [sp, #4]
 80a133e:	bd08      	pop	{r3, pc}
 80a1340:	080601d0 	.word	0x080601d0

080a1344 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
 80a1344:	b508      	push	{r3, lr}
 80a1346:	4b02      	ldr	r3, [pc, #8]	; (80a1350 <os_timer_set_id+0xc>)
 80a1348:	681b      	ldr	r3, [r3, #0]
 80a134a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a134c:	9301      	str	r3, [sp, #4]
 80a134e:	bd08      	pop	{r3, pc}
 80a1350:	080601d0 	.word	0x080601d0

080a1354 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1354:	b508      	push	{r3, lr}
 80a1356:	4b02      	ldr	r3, [pc, #8]	; (80a1360 <HAL_RNG_GetRandomNumber+0xc>)
 80a1358:	681b      	ldr	r3, [r3, #0]
 80a135a:	685b      	ldr	r3, [r3, #4]
 80a135c:	9301      	str	r3, [sp, #4]
 80a135e:	bd08      	pop	{r3, pc}
 80a1360:	0806019c 	.word	0x0806019c

080a1364 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a1364:	b508      	push	{r3, lr}
 80a1366:	4b02      	ldr	r3, [pc, #8]	; (80a1370 <HAL_Delay_Microseconds+0xc>)
 80a1368:	681b      	ldr	r3, [r3, #0]
 80a136a:	68db      	ldr	r3, [r3, #12]
 80a136c:	9301      	str	r3, [sp, #4]
 80a136e:	bd08      	pop	{r3, pc}
 80a1370:	0806019c 	.word	0x0806019c

080a1374 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a1374:	b508      	push	{r3, lr}
 80a1376:	4b02      	ldr	r3, [pc, #8]	; (80a1380 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a1378:	681b      	ldr	r3, [r3, #0]
 80a137a:	691b      	ldr	r3, [r3, #16]
 80a137c:	9301      	str	r3, [sp, #4]
 80a137e:	bd08      	pop	{r3, pc}
 80a1380:	0806019c 	.word	0x0806019c

080a1384 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1384:	b508      	push	{r3, lr}
 80a1386:	4b02      	ldr	r3, [pc, #8]	; (80a1390 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1388:	681b      	ldr	r3, [r3, #0]
 80a138a:	695b      	ldr	r3, [r3, #20]
 80a138c:	9301      	str	r3, [sp, #4]
 80a138e:	bd08      	pop	{r3, pc}
 80a1390:	0806019c 	.word	0x0806019c

080a1394 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a1394:	b508      	push	{r3, lr}
 80a1396:	4b02      	ldr	r3, [pc, #8]	; (80a13a0 <HAL_RTC_Get_UnixTime+0xc>)
 80a1398:	681b      	ldr	r3, [r3, #0]
 80a139a:	69db      	ldr	r3, [r3, #28]
 80a139c:	9301      	str	r3, [sp, #4]
 80a139e:	bd08      	pop	{r3, pc}
 80a13a0:	0806019c 	.word	0x0806019c

080a13a4 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a13a4:	b508      	push	{r3, lr}
 80a13a6:	4b02      	ldr	r3, [pc, #8]	; (80a13b0 <HAL_RTC_Time_Is_Valid+0xc>)
 80a13a8:	681b      	ldr	r3, [r3, #0]
 80a13aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a13ac:	9301      	str	r3, [sp, #4]
 80a13ae:	bd08      	pop	{r3, pc}
 80a13b0:	0806019c 	.word	0x0806019c

080a13b4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a13b4:	b508      	push	{r3, lr}
 80a13b6:	4b02      	ldr	r3, [pc, #8]	; (80a13c0 <HAL_Pin_Map+0xc>)
 80a13b8:	681b      	ldr	r3, [r3, #0]
 80a13ba:	681b      	ldr	r3, [r3, #0]
 80a13bc:	9301      	str	r3, [sp, #4]
 80a13be:	bd08      	pop	{r3, pc}
 80a13c0:	080601b0 	.word	0x080601b0

080a13c4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a13c4:	b508      	push	{r3, lr}
 80a13c6:	4b02      	ldr	r3, [pc, #8]	; (80a13d0 <HAL_Pin_Mode+0xc>)
 80a13c8:	681b      	ldr	r3, [r3, #0]
 80a13ca:	689b      	ldr	r3, [r3, #8]
 80a13cc:	9301      	str	r3, [sp, #4]
 80a13ce:	bd08      	pop	{r3, pc}
 80a13d0:	080601b0 	.word	0x080601b0

080a13d4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a13d4:	b508      	push	{r3, lr}
 80a13d6:	4b02      	ldr	r3, [pc, #8]	; (80a13e0 <HAL_Get_Pin_Mode+0xc>)
 80a13d8:	681b      	ldr	r3, [r3, #0]
 80a13da:	68db      	ldr	r3, [r3, #12]
 80a13dc:	9301      	str	r3, [sp, #4]
 80a13de:	bd08      	pop	{r3, pc}
 80a13e0:	080601b0 	.word	0x080601b0

080a13e4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a13e4:	b508      	push	{r3, lr}
 80a13e6:	4b02      	ldr	r3, [pc, #8]	; (80a13f0 <HAL_GPIO_Write+0xc>)
 80a13e8:	681b      	ldr	r3, [r3, #0]
 80a13ea:	691b      	ldr	r3, [r3, #16]
 80a13ec:	9301      	str	r3, [sp, #4]
 80a13ee:	bd08      	pop	{r3, pc}
 80a13f0:	080601b0 	.word	0x080601b0

080a13f4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a13f4:	b508      	push	{r3, lr}
 80a13f6:	4b02      	ldr	r3, [pc, #8]	; (80a1400 <HAL_GPIO_Read+0xc>)
 80a13f8:	681b      	ldr	r3, [r3, #0]
 80a13fa:	695b      	ldr	r3, [r3, #20]
 80a13fc:	9301      	str	r3, [sp, #4]
 80a13fe:	bd08      	pop	{r3, pc}
 80a1400:	080601b0 	.word	0x080601b0

080a1404 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a1404:	b508      	push	{r3, lr}
 80a1406:	4b02      	ldr	r3, [pc, #8]	; (80a1410 <HAL_Interrupts_Attach+0xc>)
 80a1408:	681b      	ldr	r3, [r3, #0]
 80a140a:	699b      	ldr	r3, [r3, #24]
 80a140c:	9301      	str	r3, [sp, #4]
 80a140e:	bd08      	pop	{r3, pc}
 80a1410:	080601b0 	.word	0x080601b0

080a1414 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 80a1414:	b508      	push	{r3, lr}
 80a1416:	4b02      	ldr	r3, [pc, #8]	; (80a1420 <HAL_Interrupts_Detach+0xc>)
 80a1418:	681b      	ldr	r3, [r3, #0]
 80a141a:	69db      	ldr	r3, [r3, #28]
 80a141c:	9301      	str	r3, [sp, #4]
 80a141e:	bd08      	pop	{r3, pc}
 80a1420:	080601b0 	.word	0x080601b0

080a1424 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
 80a1424:	b508      	push	{r3, lr}
 80a1426:	4b02      	ldr	r3, [pc, #8]	; (80a1430 <HAL_Pulse_In+0xc>)
 80a1428:	681b      	ldr	r3, [r3, #0]
 80a142a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a142c:	9301      	str	r3, [sp, #4]
 80a142e:	bd08      	pop	{r3, pc}
 80a1430:	080601b0 	.word	0x080601b0

080a1434 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1434:	b508      	push	{r3, lr}
 80a1436:	4b02      	ldr	r3, [pc, #8]	; (80a1440 <HAL_I2C_Write_Data+0xc>)
 80a1438:	681b      	ldr	r3, [r3, #0]
 80a143a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a143c:	9301      	str	r3, [sp, #4]
 80a143e:	bd08      	pop	{r3, pc}
 80a1440:	080601ac 	.word	0x080601ac

080a1444 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1444:	b508      	push	{r3, lr}
 80a1446:	4b02      	ldr	r3, [pc, #8]	; (80a1450 <HAL_I2C_Available_Data+0xc>)
 80a1448:	681b      	ldr	r3, [r3, #0]
 80a144a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a144c:	9301      	str	r3, [sp, #4]
 80a144e:	bd08      	pop	{r3, pc}
 80a1450:	080601ac 	.word	0x080601ac

080a1454 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1454:	b508      	push	{r3, lr}
 80a1456:	4b02      	ldr	r3, [pc, #8]	; (80a1460 <HAL_I2C_Read_Data+0xc>)
 80a1458:	681b      	ldr	r3, [r3, #0]
 80a145a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a145c:	9301      	str	r3, [sp, #4]
 80a145e:	bd08      	pop	{r3, pc}
 80a1460:	080601ac 	.word	0x080601ac

080a1464 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1464:	b508      	push	{r3, lr}
 80a1466:	4b02      	ldr	r3, [pc, #8]	; (80a1470 <HAL_I2C_Peek_Data+0xc>)
 80a1468:	681b      	ldr	r3, [r3, #0]
 80a146a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a146c:	9301      	str	r3, [sp, #4]
 80a146e:	bd08      	pop	{r3, pc}
 80a1470:	080601ac 	.word	0x080601ac

080a1474 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1474:	b508      	push	{r3, lr}
 80a1476:	4b02      	ldr	r3, [pc, #8]	; (80a1480 <HAL_I2C_Flush_Data+0xc>)
 80a1478:	681b      	ldr	r3, [r3, #0]
 80a147a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a147c:	9301      	str	r3, [sp, #4]
 80a147e:	bd08      	pop	{r3, pc}
 80a1480:	080601ac 	.word	0x080601ac

080a1484 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1484:	b508      	push	{r3, lr}
 80a1486:	4b02      	ldr	r3, [pc, #8]	; (80a1490 <HAL_I2C_Is_Enabled+0xc>)
 80a1488:	681b      	ldr	r3, [r3, #0]
 80a148a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a148c:	9301      	str	r3, [sp, #4]
 80a148e:	bd08      	pop	{r3, pc}
 80a1490:	080601ac 	.word	0x080601ac

080a1494 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1494:	b508      	push	{r3, lr}
 80a1496:	4b03      	ldr	r3, [pc, #12]	; (80a14a4 <HAL_I2C_Init+0x10>)
 80a1498:	681b      	ldr	r3, [r3, #0]
 80a149a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a149e:	9301      	str	r3, [sp, #4]
 80a14a0:	bd08      	pop	{r3, pc}
 80a14a2:	0000      	.short	0x0000
 80a14a4:	080601ac 	.word	0x080601ac

080a14a8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a14a8:	b508      	push	{r3, lr}
 80a14aa:	4b02      	ldr	r3, [pc, #8]	; (80a14b4 <HAL_SPI_Init+0xc>)
 80a14ac:	681b      	ldr	r3, [r3, #0]
 80a14ae:	69db      	ldr	r3, [r3, #28]
 80a14b0:	9301      	str	r3, [sp, #4]
 80a14b2:	bd08      	pop	{r3, pc}
 80a14b4:	080601b4 	.word	0x080601b4

080a14b8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a14b8:	b508      	push	{r3, lr}
 80a14ba:	4b02      	ldr	r3, [pc, #8]	; (80a14c4 <HAL_SPI_Is_Enabled+0xc>)
 80a14bc:	681b      	ldr	r3, [r3, #0]
 80a14be:	6a1b      	ldr	r3, [r3, #32]
 80a14c0:	9301      	str	r3, [sp, #4]
 80a14c2:	bd08      	pop	{r3, pc}
 80a14c4:	080601b4 	.word	0x080601b4

080a14c8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a14c8:	b508      	push	{r3, lr}
 80a14ca:	4b02      	ldr	r3, [pc, #8]	; (80a14d4 <HAL_USART_Init+0xc>)
 80a14cc:	681b      	ldr	r3, [r3, #0]
 80a14ce:	699b      	ldr	r3, [r3, #24]
 80a14d0:	9301      	str	r3, [sp, #4]
 80a14d2:	bd08      	pop	{r3, pc}
 80a14d4:	080601c4 	.word	0x080601c4

080a14d8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a14d8:	b508      	push	{r3, lr}
 80a14da:	4b02      	ldr	r3, [pc, #8]	; (80a14e4 <HAL_USART_Write_Data+0xc>)
 80a14dc:	681b      	ldr	r3, [r3, #0]
 80a14de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a14e0:	9301      	str	r3, [sp, #4]
 80a14e2:	bd08      	pop	{r3, pc}
 80a14e4:	080601c4 	.word	0x080601c4

080a14e8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a14e8:	b508      	push	{r3, lr}
 80a14ea:	4b02      	ldr	r3, [pc, #8]	; (80a14f4 <HAL_USART_Available_Data+0xc>)
 80a14ec:	681b      	ldr	r3, [r3, #0]
 80a14ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a14f0:	9301      	str	r3, [sp, #4]
 80a14f2:	bd08      	pop	{r3, pc}
 80a14f4:	080601c4 	.word	0x080601c4

080a14f8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a14f8:	b508      	push	{r3, lr}
 80a14fa:	4b02      	ldr	r3, [pc, #8]	; (80a1504 <HAL_USART_Read_Data+0xc>)
 80a14fc:	681b      	ldr	r3, [r3, #0]
 80a14fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1500:	9301      	str	r3, [sp, #4]
 80a1502:	bd08      	pop	{r3, pc}
 80a1504:	080601c4 	.word	0x080601c4

080a1508 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1508:	b508      	push	{r3, lr}
 80a150a:	4b02      	ldr	r3, [pc, #8]	; (80a1514 <HAL_USART_Peek_Data+0xc>)
 80a150c:	681b      	ldr	r3, [r3, #0]
 80a150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1510:	9301      	str	r3, [sp, #4]
 80a1512:	bd08      	pop	{r3, pc}
 80a1514:	080601c4 	.word	0x080601c4

080a1518 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1518:	b508      	push	{r3, lr}
 80a151a:	4b02      	ldr	r3, [pc, #8]	; (80a1524 <HAL_USART_Flush_Data+0xc>)
 80a151c:	681b      	ldr	r3, [r3, #0]
 80a151e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1520:	9301      	str	r3, [sp, #4]
 80a1522:	bd08      	pop	{r3, pc}
 80a1524:	080601c4 	.word	0x080601c4

080a1528 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1528:	b508      	push	{r3, lr}
 80a152a:	4b02      	ldr	r3, [pc, #8]	; (80a1534 <HAL_USART_Is_Enabled+0xc>)
 80a152c:	681b      	ldr	r3, [r3, #0]
 80a152e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1530:	9301      	str	r3, [sp, #4]
 80a1532:	bd08      	pop	{r3, pc}
 80a1534:	080601c4 	.word	0x080601c4

080a1538 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1538:	b508      	push	{r3, lr}
 80a153a:	4b02      	ldr	r3, [pc, #8]	; (80a1544 <HAL_USART_Available_Data_For_Write+0xc>)
 80a153c:	681b      	ldr	r3, [r3, #0]
 80a153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1540:	9301      	str	r3, [sp, #4]
 80a1542:	bd08      	pop	{r3, pc}
 80a1544:	080601c4 	.word	0x080601c4

080a1548 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1548:	b508      	push	{r3, lr}
 80a154a:	4b02      	ldr	r3, [pc, #8]	; (80a1554 <HAL_USB_USART_Init+0xc>)
 80a154c:	681b      	ldr	r3, [r3, #0]
 80a154e:	681b      	ldr	r3, [r3, #0]
 80a1550:	9301      	str	r3, [sp, #4]
 80a1552:	bd08      	pop	{r3, pc}
 80a1554:	080601d8 	.word	0x080601d8

080a1558 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1558:	b508      	push	{r3, lr}
 80a155a:	4b02      	ldr	r3, [pc, #8]	; (80a1564 <HAL_USB_USART_Begin+0xc>)
 80a155c:	681b      	ldr	r3, [r3, #0]
 80a155e:	685b      	ldr	r3, [r3, #4]
 80a1560:	9301      	str	r3, [sp, #4]
 80a1562:	bd08      	pop	{r3, pc}
 80a1564:	080601d8 	.word	0x080601d8

080a1568 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1568:	b508      	push	{r3, lr}
 80a156a:	4b02      	ldr	r3, [pc, #8]	; (80a1574 <HAL_USB_USART_Available_Data+0xc>)
 80a156c:	681b      	ldr	r3, [r3, #0]
 80a156e:	691b      	ldr	r3, [r3, #16]
 80a1570:	9301      	str	r3, [sp, #4]
 80a1572:	bd08      	pop	{r3, pc}
 80a1574:	080601d8 	.word	0x080601d8

080a1578 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1578:	b508      	push	{r3, lr}
 80a157a:	4b02      	ldr	r3, [pc, #8]	; (80a1584 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a157c:	681b      	ldr	r3, [r3, #0]
 80a157e:	695b      	ldr	r3, [r3, #20]
 80a1580:	9301      	str	r3, [sp, #4]
 80a1582:	bd08      	pop	{r3, pc}
 80a1584:	080601d8 	.word	0x080601d8

080a1588 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1588:	b508      	push	{r3, lr}
 80a158a:	4b02      	ldr	r3, [pc, #8]	; (80a1594 <HAL_USB_USART_Receive_Data+0xc>)
 80a158c:	681b      	ldr	r3, [r3, #0]
 80a158e:	699b      	ldr	r3, [r3, #24]
 80a1590:	9301      	str	r3, [sp, #4]
 80a1592:	bd08      	pop	{r3, pc}
 80a1594:	080601d8 	.word	0x080601d8

080a1598 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1598:	b508      	push	{r3, lr}
 80a159a:	4b02      	ldr	r3, [pc, #8]	; (80a15a4 <HAL_USB_USART_Send_Data+0xc>)
 80a159c:	681b      	ldr	r3, [r3, #0]
 80a159e:	69db      	ldr	r3, [r3, #28]
 80a15a0:	9301      	str	r3, [sp, #4]
 80a15a2:	bd08      	pop	{r3, pc}
 80a15a4:	080601d8 	.word	0x080601d8

080a15a8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a15a8:	b508      	push	{r3, lr}
 80a15aa:	4b02      	ldr	r3, [pc, #8]	; (80a15b4 <HAL_USB_USART_Flush_Data+0xc>)
 80a15ac:	681b      	ldr	r3, [r3, #0]
 80a15ae:	6a1b      	ldr	r3, [r3, #32]
 80a15b0:	9301      	str	r3, [sp, #4]
 80a15b2:	bd08      	pop	{r3, pc}
 80a15b4:	080601d8 	.word	0x080601d8

080a15b8 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a15b8:	b508      	push	{r3, lr}
 80a15ba:	4b02      	ldr	r3, [pc, #8]	; (80a15c4 <inet_gethostbyname+0xc>)
 80a15bc:	681b      	ldr	r3, [r3, #0]
 80a15be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a15c0:	9301      	str	r3, [sp, #4]
 80a15c2:	bd08      	pop	{r3, pc}
 80a15c4:	080601c0 	.word	0x080601c0

080a15c8 <wlan_select_antenna>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
 80a15c8:	b508      	push	{r3, lr}
 80a15ca:	4b02      	ldr	r3, [pc, #8]	; (80a15d4 <wlan_select_antenna+0xc>)
 80a15cc:	681b      	ldr	r3, [r3, #0]
 80a15ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a15d0:	9301      	str	r3, [sp, #4]
 80a15d2:	bd08      	pop	{r3, pc}
 80a15d4:	080601c0 	.word	0x080601c0

080a15d8 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a15d8:	b508      	push	{r3, lr}
 80a15da:	4b02      	ldr	r3, [pc, #8]	; (80a15e4 <system_mode+0xc>)
 80a15dc:	681b      	ldr	r3, [r3, #0]
 80a15de:	681b      	ldr	r3, [r3, #0]
 80a15e0:	9301      	str	r3, [sp, #4]
 80a15e2:	bd08      	pop	{r3, pc}
 80a15e4:	080601a4 	.word	0x080601a4

080a15e8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a15e8:	b508      	push	{r3, lr}
 80a15ea:	4b02      	ldr	r3, [pc, #8]	; (80a15f4 <set_system_mode+0xc>)
 80a15ec:	681b      	ldr	r3, [r3, #0]
 80a15ee:	685b      	ldr	r3, [r3, #4]
 80a15f0:	9301      	str	r3, [sp, #4]
 80a15f2:	bd08      	pop	{r3, pc}
 80a15f4:	080601a4 	.word	0x080601a4

080a15f8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a15f8:	b508      	push	{r3, lr}
 80a15fa:	4b02      	ldr	r3, [pc, #8]	; (80a1604 <system_delay_ms+0xc>)
 80a15fc:	681b      	ldr	r3, [r3, #0]
 80a15fe:	695b      	ldr	r3, [r3, #20]
 80a1600:	9301      	str	r3, [sp, #4]
 80a1602:	bd08      	pop	{r3, pc}
 80a1604:	080601a4 	.word	0x080601a4

080a1608 <system_version_info>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
 80a1608:	b508      	push	{r3, lr}
 80a160a:	4b02      	ldr	r3, [pc, #8]	; (80a1614 <system_version_info+0xc>)
 80a160c:	681b      	ldr	r3, [r3, #0]
 80a160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1610:	9301      	str	r3, [sp, #4]
 80a1612:	bd08      	pop	{r3, pc}
 80a1614:	080601a4 	.word	0x080601a4

080a1618 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a1618:	b508      	push	{r3, lr}
 80a161a:	4b02      	ldr	r3, [pc, #8]	; (80a1624 <application_thread_current+0xc>)
 80a161c:	681b      	ldr	r3, [r3, #0]
 80a161e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1620:	9301      	str	r3, [sp, #4]
 80a1622:	bd08      	pop	{r3, pc}
 80a1624:	080601a4 	.word	0x080601a4

080a1628 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a1628:	b508      	push	{r3, lr}
 80a162a:	4b02      	ldr	r3, [pc, #8]	; (80a1634 <application_thread_invoke+0xc>)
 80a162c:	681b      	ldr	r3, [r3, #0]
 80a162e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1630:	9301      	str	r3, [sp, #4]
 80a1632:	bd08      	pop	{r3, pc}
 80a1634:	080601a4 	.word	0x080601a4

080a1638 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a1638:	b508      	push	{r3, lr}
 80a163a:	4b02      	ldr	r3, [pc, #8]	; (80a1644 <system_thread_get_state+0xc>)
 80a163c:	681b      	ldr	r3, [r3, #0]
 80a163e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1640:	9301      	str	r3, [sp, #4]
 80a1642:	bd08      	pop	{r3, pc}
 80a1644:	080601a4 	.word	0x080601a4

080a1648 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1648:	b508      	push	{r3, lr}
 80a164a:	4b03      	ldr	r3, [pc, #12]	; (80a1658 <system_ctrl_set_app_request_handler+0x10>)
 80a164c:	681b      	ldr	r3, [r3, #0]
 80a164e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1652:	9301      	str	r3, [sp, #4]
 80a1654:	bd08      	pop	{r3, pc}
 80a1656:	0000      	.short	0x0000
 80a1658:	080601a4 	.word	0x080601a4

080a165c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a165c:	b508      	push	{r3, lr}
 80a165e:	4b03      	ldr	r3, [pc, #12]	; (80a166c <system_ctrl_set_result+0x10>)
 80a1660:	681b      	ldr	r3, [r3, #0]
 80a1662:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1666:	9301      	str	r3, [sp, #4]
 80a1668:	bd08      	pop	{r3, pc}
 80a166a:	0000      	.short	0x0000
 80a166c:	080601a4 	.word	0x080601a4

080a1670 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a1670:	b508      	push	{r3, lr}
 80a1672:	4b02      	ldr	r3, [pc, #8]	; (80a167c <spark_variable+0xc>)
 80a1674:	681b      	ldr	r3, [r3, #0]
 80a1676:	681b      	ldr	r3, [r3, #0]
 80a1678:	9301      	str	r3, [sp, #4]
 80a167a:	bd08      	pop	{r3, pc}
 80a167c:	080601cc 	.word	0x080601cc

080a1680 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a1680:	b508      	push	{r3, lr}
 80a1682:	4b02      	ldr	r3, [pc, #8]	; (80a168c <spark_function+0xc>)
 80a1684:	681b      	ldr	r3, [r3, #0]
 80a1686:	685b      	ldr	r3, [r3, #4]
 80a1688:	9301      	str	r3, [sp, #4]
 80a168a:	bd08      	pop	{r3, pc}
 80a168c:	080601cc 	.word	0x080601cc

080a1690 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a1690:	b508      	push	{r3, lr}
 80a1692:	4b02      	ldr	r3, [pc, #8]	; (80a169c <spark_process+0xc>)
 80a1694:	681b      	ldr	r3, [r3, #0]
 80a1696:	689b      	ldr	r3, [r3, #8]
 80a1698:	9301      	str	r3, [sp, #4]
 80a169a:	bd08      	pop	{r3, pc}
 80a169c:	080601cc 	.word	0x080601cc

080a16a0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a16a0:	b508      	push	{r3, lr}
 80a16a2:	4b02      	ldr	r3, [pc, #8]	; (80a16ac <spark_cloud_flag_connected+0xc>)
 80a16a4:	681b      	ldr	r3, [r3, #0]
 80a16a6:	695b      	ldr	r3, [r3, #20]
 80a16a8:	9301      	str	r3, [sp, #4]
 80a16aa:	bd08      	pop	{r3, pc}
 80a16ac:	080601cc 	.word	0x080601cc

080a16b0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a16b0:	b508      	push	{r3, lr}
 80a16b2:	4b02      	ldr	r3, [pc, #8]	; (80a16bc <spark_send_event+0xc>)
 80a16b4:	681b      	ldr	r3, [r3, #0]
 80a16b6:	6a1b      	ldr	r3, [r3, #32]
 80a16b8:	9301      	str	r3, [sp, #4]
 80a16ba:	bd08      	pop	{r3, pc}
 80a16bc:	080601cc 	.word	0x080601cc

080a16c0 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 80a16c0:	b508      	push	{r3, lr}
 80a16c2:	4b02      	ldr	r3, [pc, #8]	; (80a16cc <spark_sync_time+0xc>)
 80a16c4:	681b      	ldr	r3, [r3, #0]
 80a16c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a16c8:	9301      	str	r3, [sp, #4]
 80a16ca:	bd08      	pop	{r3, pc}
 80a16cc:	080601cc 	.word	0x080601cc

080a16d0 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a16d0:	b508      	push	{r3, lr}
 80a16d2:	4b02      	ldr	r3, [pc, #8]	; (80a16dc <spark_sync_time_pending+0xc>)
 80a16d4:	681b      	ldr	r3, [r3, #0]
 80a16d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a16d8:	9301      	str	r3, [sp, #4]
 80a16da:	bd08      	pop	{r3, pc}
 80a16dc:	080601cc 	.word	0x080601cc

080a16e0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a16e0:	b508      	push	{r3, lr}
 80a16e2:	4b02      	ldr	r3, [pc, #8]	; (80a16ec <spark_set_random_seed_from_cloud_handler+0xc>)
 80a16e4:	681b      	ldr	r3, [r3, #0]
 80a16e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a16e8:	9301      	str	r3, [sp, #4]
 80a16ea:	bd08      	pop	{r3, pc}
 80a16ec:	080601cc 	.word	0x080601cc

080a16f0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a16f0:	b508      	push	{r3, lr}
 80a16f2:	4b02      	ldr	r3, [pc, #8]	; (80a16fc <network_connect+0xc>)
 80a16f4:	681b      	ldr	r3, [r3, #0]
 80a16f6:	685b      	ldr	r3, [r3, #4]
 80a16f8:	9301      	str	r3, [sp, #4]
 80a16fa:	bd08      	pop	{r3, pc}
 80a16fc:	080601c8 	.word	0x080601c8

080a1700 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1700:	b508      	push	{r3, lr}
 80a1702:	4b02      	ldr	r3, [pc, #8]	; (80a170c <network_connecting+0xc>)
 80a1704:	681b      	ldr	r3, [r3, #0]
 80a1706:	689b      	ldr	r3, [r3, #8]
 80a1708:	9301      	str	r3, [sp, #4]
 80a170a:	bd08      	pop	{r3, pc}
 80a170c:	080601c8 	.word	0x080601c8

080a1710 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1710:	b508      	push	{r3, lr}
 80a1712:	4b02      	ldr	r3, [pc, #8]	; (80a171c <network_disconnect+0xc>)
 80a1714:	681b      	ldr	r3, [r3, #0]
 80a1716:	68db      	ldr	r3, [r3, #12]
 80a1718:	9301      	str	r3, [sp, #4]
 80a171a:	bd08      	pop	{r3, pc}
 80a171c:	080601c8 	.word	0x080601c8

080a1720 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1720:	b508      	push	{r3, lr}
 80a1722:	4b02      	ldr	r3, [pc, #8]	; (80a172c <network_ready+0xc>)
 80a1724:	681b      	ldr	r3, [r3, #0]
 80a1726:	691b      	ldr	r3, [r3, #16]
 80a1728:	9301      	str	r3, [sp, #4]
 80a172a:	bd08      	pop	{r3, pc}
 80a172c:	080601c8 	.word	0x080601c8

080a1730 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1730:	b508      	push	{r3, lr}
 80a1732:	4b02      	ldr	r3, [pc, #8]	; (80a173c <network_on+0xc>)
 80a1734:	681b      	ldr	r3, [r3, #0]
 80a1736:	695b      	ldr	r3, [r3, #20]
 80a1738:	9301      	str	r3, [sp, #4]
 80a173a:	bd08      	pop	{r3, pc}
 80a173c:	080601c8 	.word	0x080601c8

080a1740 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1740:	b508      	push	{r3, lr}
 80a1742:	4b02      	ldr	r3, [pc, #8]	; (80a174c <network_off+0xc>)
 80a1744:	681b      	ldr	r3, [r3, #0]
 80a1746:	699b      	ldr	r3, [r3, #24]
 80a1748:	9301      	str	r3, [sp, #4]
 80a174a:	bd08      	pop	{r3, pc}
 80a174c:	080601c8 	.word	0x080601c8

080a1750 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1750:	b508      	push	{r3, lr}
 80a1752:	4b02      	ldr	r3, [pc, #8]	; (80a175c <network_listen+0xc>)
 80a1754:	681b      	ldr	r3, [r3, #0]
 80a1756:	69db      	ldr	r3, [r3, #28]
 80a1758:	9301      	str	r3, [sp, #4]
 80a175a:	bd08      	pop	{r3, pc}
 80a175c:	080601c8 	.word	0x080601c8

080a1760 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1760:	b508      	push	{r3, lr}
 80a1762:	4b02      	ldr	r3, [pc, #8]	; (80a176c <network_listening+0xc>)
 80a1764:	681b      	ldr	r3, [r3, #0]
 80a1766:	6a1b      	ldr	r3, [r3, #32]
 80a1768:	9301      	str	r3, [sp, #4]
 80a176a:	bd08      	pop	{r3, pc}
 80a176c:	080601c8 	.word	0x080601c8

080a1770 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1770:	b508      	push	{r3, lr}
 80a1772:	4b02      	ldr	r3, [pc, #8]	; (80a177c <network_set_listen_timeout+0xc>)
 80a1774:	681b      	ldr	r3, [r3, #0]
 80a1776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1778:	9301      	str	r3, [sp, #4]
 80a177a:	bd08      	pop	{r3, pc}
 80a177c:	080601c8 	.word	0x080601c8

080a1780 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1780:	b508      	push	{r3, lr}
 80a1782:	4b02      	ldr	r3, [pc, #8]	; (80a178c <network_get_listen_timeout+0xc>)
 80a1784:	681b      	ldr	r3, [r3, #0]
 80a1786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1788:	9301      	str	r3, [sp, #4]
 80a178a:	bd08      	pop	{r3, pc}
 80a178c:	080601c8 	.word	0x080601c8

080a1790 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1790:	b508      	push	{r3, lr}
 80a1792:	4b02      	ldr	r3, [pc, #8]	; (80a179c <malloc+0xc>)
 80a1794:	681b      	ldr	r3, [r3, #0]
 80a1796:	681b      	ldr	r3, [r3, #0]
 80a1798:	9301      	str	r3, [sp, #4]
 80a179a:	bd08      	pop	{r3, pc}
 80a179c:	080601a0 	.word	0x080601a0

080a17a0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a17a0:	b508      	push	{r3, lr}
 80a17a2:	4b02      	ldr	r3, [pc, #8]	; (80a17ac <free+0xc>)
 80a17a4:	681b      	ldr	r3, [r3, #0]
 80a17a6:	685b      	ldr	r3, [r3, #4]
 80a17a8:	9301      	str	r3, [sp, #4]
 80a17aa:	bd08      	pop	{r3, pc}
 80a17ac:	080601a0 	.word	0x080601a0

080a17b0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a17b0:	b508      	push	{r3, lr}
 80a17b2:	4b02      	ldr	r3, [pc, #8]	; (80a17bc <realloc+0xc>)
 80a17b4:	681b      	ldr	r3, [r3, #0]
 80a17b6:	689b      	ldr	r3, [r3, #8]
 80a17b8:	9301      	str	r3, [sp, #4]
 80a17ba:	bd08      	pop	{r3, pc}
 80a17bc:	080601a0 	.word	0x080601a0

080a17c0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80a17c0:	b508      	push	{r3, lr}
 80a17c2:	4b02      	ldr	r3, [pc, #8]	; (80a17cc <siprintf+0xc>)
 80a17c4:	681b      	ldr	r3, [r3, #0]
 80a17c6:	691b      	ldr	r3, [r3, #16]
 80a17c8:	9301      	str	r3, [sp, #4]
 80a17ca:	bd08      	pop	{r3, pc}
 80a17cc:	080601a0 	.word	0x080601a0

080a17d0 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a17d0:	b508      	push	{r3, lr}
 80a17d2:	4b02      	ldr	r3, [pc, #8]	; (80a17dc <siscanf+0xc>)
 80a17d4:	681b      	ldr	r3, [r3, #0]
 80a17d6:	699b      	ldr	r3, [r3, #24]
 80a17d8:	9301      	str	r3, [sp, #4]
 80a17da:	bd08      	pop	{r3, pc}
 80a17dc:	080601a0 	.word	0x080601a0

080a17e0 <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a17e0:	b508      	push	{r3, lr}
 80a17e2:	4b02      	ldr	r3, [pc, #8]	; (80a17ec <vsnprintf+0xc>)
 80a17e4:	681b      	ldr	r3, [r3, #0]
 80a17e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a17e8:	9301      	str	r3, [sp, #4]
 80a17ea:	bd08      	pop	{r3, pc}
 80a17ec:	080601a0 	.word	0x080601a0

080a17f0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a17f0:	b508      	push	{r3, lr}
 80a17f2:	4b02      	ldr	r3, [pc, #8]	; (80a17fc <abort+0xc>)
 80a17f4:	681b      	ldr	r3, [r3, #0]
 80a17f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a17f8:	9301      	str	r3, [sp, #4]
 80a17fa:	bd08      	pop	{r3, pc}
 80a17fc:	080601a0 	.word	0x080601a0

080a1800 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a1800:	b508      	push	{r3, lr}
 80a1802:	4b02      	ldr	r3, [pc, #8]	; (80a180c <_malloc_r+0xc>)
 80a1804:	681b      	ldr	r3, [r3, #0]
 80a1806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1808:	9301      	str	r3, [sp, #4]
 80a180a:	bd08      	pop	{r3, pc}
 80a180c:	080601a0 	.word	0x080601a0

080a1810 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a1810:	b508      	push	{r3, lr}
 80a1812:	4b02      	ldr	r3, [pc, #8]	; (80a181c <__errno+0xc>)
 80a1814:	681b      	ldr	r3, [r3, #0]
 80a1816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1818:	9301      	str	r3, [sp, #4]
 80a181a:	bd08      	pop	{r3, pc}
 80a181c:	080601a0 	.word	0x080601a0

080a1820 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1820:	2100      	movs	r1, #0
 80a1822:	f7ff bee9 	b.w	80a15f8 <system_delay_ms>

080a1826 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a1826:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1828:	6883      	ldr	r3, [r0, #8]
 80a182a:	4604      	mov	r4, r0
 80a182c:	b90b      	cbnz	r3, 80a1832 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a182e:	f001 fa58 	bl	80a2ce2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1832:	68c3      	ldr	r3, [r0, #12]
 80a1834:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a1836:	68a3      	ldr	r3, [r4, #8]
 80a1838:	b11b      	cbz	r3, 80a1842 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a183a:	2203      	movs	r2, #3
 80a183c:	4621      	mov	r1, r4
 80a183e:	4620      	mov	r0, r4
 80a1840:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1842:	4620      	mov	r0, r4
}
 80a1844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1848:	2110      	movs	r1, #16
 80a184a:	f001 ba48 	b.w	80a2cde <_ZdlPvj>

080a184e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a184e:	4770      	bx	lr

080a1850 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a1850:	2000      	movs	r0, #0
 80a1852:	4770      	bx	lr

080a1854 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1854:	b510      	push	{r4, lr}
 80a1856:	4604      	mov	r4, r0
 80a1858:	2110      	movs	r1, #16
 80a185a:	f001 fa40 	bl	80a2cde <_ZdlPvj>
 80a185e:	4620      	mov	r0, r4
 80a1860:	bd10      	pop	{r4, pc}

080a1862 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a1862:	b508      	push	{r3, lr}
      { delete this; }
 80a1864:	b108      	cbz	r0, 80a186a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a1866:	f7ff fff5 	bl	80a1854 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a186a:	bd08      	pop	{r3, pc}

080a186c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a186c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a186e:	68c4      	ldr	r4, [r0, #12]
 80a1870:	b1ec      	cbz	r4, 80a18ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a1872:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a1874:	2b02      	cmp	r3, #2
 80a1876:	d102      	bne.n	80a187e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1878:	68e0      	ldr	r0, [r4, #12]
 80a187a:	f7ff ff91 	bl	80a17a0 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a187e:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a1880:	b135      	cbz	r5, 80a1890 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1882:	4628      	mov	r0, r5
 80a1884:	f7fe fcea 	bl	80a025c <_ZNSt14_Function_baseD1Ev>
 80a1888:	2110      	movs	r1, #16
 80a188a:	4628      	mov	r0, r5
 80a188c:	f001 fa27 	bl	80a2cde <_ZdlPvj>
 80a1890:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a1892:	b135      	cbz	r5, 80a18a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
 80a1894:	4628      	mov	r0, r5
 80a1896:	f7fe fce1 	bl	80a025c <_ZNSt14_Function_baseD1Ev>
 80a189a:	2110      	movs	r1, #16
 80a189c:	4628      	mov	r0, r5
 80a189e:	f001 fa1e 	bl	80a2cde <_ZdlPvj>
 80a18a2:	4620      	mov	r0, r4
 80a18a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a18a8:	2114      	movs	r1, #20
 80a18aa:	f001 ba18 	b.w	80a2cde <_ZdlPvj>
 80a18ae:	bd38      	pop	{r3, r4, r5, pc}

080a18b0 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a18b0:	b510      	push	{r4, lr}
 80a18b2:	b088      	sub	sp, #32
 80a18b4:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a18b6:	4668      	mov	r0, sp
 80a18b8:	f000 fe40 	bl	80a253c <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a18bc:	4669      	mov	r1, sp
 80a18be:	a804      	add	r0, sp, #16
 80a18c0:	f000 fe5e 	bl	80a2580 <_ZN6StringC1ERKS_>
 80a18c4:	a804      	add	r0, sp, #16
 80a18c6:	47a0      	blx	r4
 80a18c8:	4604      	mov	r4, r0
 80a18ca:	a804      	add	r0, sp, #16
 80a18cc:	f000 fdef 	bl	80a24ae <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a18d0:	4668      	mov	r0, sp
 80a18d2:	f000 fdec 	bl	80a24ae <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a18d6:	4620      	mov	r0, r4
 80a18d8:	b008      	add	sp, #32
 80a18da:	bd10      	pop	{r4, pc}

080a18dc <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a18dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a18de:	4607      	mov	r7, r0
 80a18e0:	460e      	mov	r6, r1
 80a18e2:	4615      	mov	r5, r2
 80a18e4:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 80a18e6:	2410      	movs	r4, #16
 80a18e8:	4622      	mov	r2, r4
 80a18ea:	2100      	movs	r1, #0
 80a18ec:	4668      	mov	r0, sp
 80a18ee:	f004 f870 	bl	80a59d2 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a18f2:	2200      	movs	r2, #0
 80a18f4:	4669      	mov	r1, sp
 80a18f6:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 80a18f8:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 80a18fc:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a18fe:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a1900:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a1902:	f7ff febd 	bl	80a1680 <spark_function>
}
 80a1906:	b005      	add	sp, #20
 80a1908:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a190a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a190a:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a190c:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a190e:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a1910:	b17c      	cbz	r4, 80a1932 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a1912:	6863      	ldr	r3, [r4, #4]
 80a1914:	3b01      	subs	r3, #1
 80a1916:	6063      	str	r3, [r4, #4]
 80a1918:	b95b      	cbnz	r3, 80a1932 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a191a:	6823      	ldr	r3, [r4, #0]
 80a191c:	4620      	mov	r0, r4
 80a191e:	689b      	ldr	r3, [r3, #8]
 80a1920:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1922:	68a3      	ldr	r3, [r4, #8]
 80a1924:	3b01      	subs	r3, #1
 80a1926:	60a3      	str	r3, [r4, #8]
 80a1928:	b91b      	cbnz	r3, 80a1932 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a192a:	6823      	ldr	r3, [r4, #0]
 80a192c:	4620      	mov	r0, r4
 80a192e:	68db      	ldr	r3, [r3, #12]
 80a1930:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a1932:	4628      	mov	r0, r5
 80a1934:	bd38      	pop	{r3, r4, r5, pc}

080a1936 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a1936:	b513      	push	{r0, r1, r4, lr}
 80a1938:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a193a:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a193e:	2300      	movs	r3, #0
 80a1940:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1942:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1944:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a1946:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1948:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a194a:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a194c:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a194e:	f7ff ffdc 	bl	80a190a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1952:	4620      	mov	r0, r4
 80a1954:	b002      	add	sp, #8
 80a1956:	bd10      	pop	{r4, pc}

080a1958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a1958:	680b      	ldr	r3, [r1, #0]
 80a195a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a195c:	b113      	cbz	r3, 80a1964 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a195e:	685a      	ldr	r2, [r3, #4]
 80a1960:	3201      	adds	r2, #1
 80a1962:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a1964:	4770      	bx	lr

080a1966 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a1966:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1968:	460c      	mov	r4, r1
 80a196a:	4606      	mov	r6, r0
 80a196c:	460f      	mov	r7, r1
 80a196e:	f854 3b04 	ldr.w	r3, [r4], #4
 80a1972:	ad02      	add	r5, sp, #8
 80a1974:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a1978:	4621      	mov	r1, r4
 80a197a:	a801      	add	r0, sp, #4
 80a197c:	f7ff ffec 	bl	80a1958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a1980:	4629      	mov	r1, r5
 80a1982:	4630      	mov	r0, r6
 80a1984:	f7ff ffd7 	bl	80a1936 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1988:	a801      	add	r0, sp, #4
 80a198a:	f7ff ffbe 	bl	80a190a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a198e:	4620      	mov	r0, r4
 80a1990:	f7ff ffbb 	bl	80a190a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a1994:	4638      	mov	r0, r7
 80a1996:	2108      	movs	r1, #8
 80a1998:	f001 f9a1 	bl	80a2cde <_ZdlPvj>
        return p;
    }
 80a199c:	4630      	mov	r0, r6
 80a199e:	b003      	add	sp, #12
 80a19a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a19a2 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a19a2:	b513      	push	{r0, r1, r4, lr}
 80a19a4:	460b      	mov	r3, r1
 80a19a6:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a19a8:	c803      	ldmia	r0, {r0, r1}
 80a19aa:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a19ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a19b2:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a19b6:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a19ba:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a19be:	b002      	add	sp, #8
 80a19c0:	bd10      	pop	{r4, pc}

080a19c2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a19c2:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a19c4:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a19c6:	b90a      	cbnz	r2, 80a19cc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a19c8:	f001 f98b 	bl	80a2ce2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a19cc:	68c3      	ldr	r3, [r0, #12]
    }
 80a19ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a19d2:	4718      	bx	r3

080a19d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a19d4:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a19d6:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a19d8:	f100 0110 	add.w	r1, r0, #16
 80a19dc:	f7ff fff1 	bl	80a19c2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a19e0:	bd08      	pop	{r3, pc}

080a19e2 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a19e2:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a19e4:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a19e6:	b90a      	cbnz	r2, 80a19ec <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a19e8:	f001 f97b 	bl	80a2ce2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a19ec:	68c3      	ldr	r3, [r0, #12]
    }
 80a19ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a19f2:	4718      	bx	r3

080a19f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a19f4:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a19f6:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a19f8:	f100 0110 	add.w	r1, r0, #16
 80a19fc:	f7ff fff1 	bl	80a19e2 <_ZNKSt8functionIFvRKbEEclES1_>
 80a1a00:	bd08      	pop	{r3, pc}

080a1a02 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1a02:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1a04:	2300      	movs	r3, #0
 80a1a06:	6083      	str	r3, [r0, #8]
 80a1a08:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1a0a:	4604      	mov	r4, r0
 80a1a0c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1a0e:	b12b      	cbz	r3, 80a1a1c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1a10:	2202      	movs	r2, #2
 80a1a12:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1a14:	68eb      	ldr	r3, [r5, #12]
 80a1a16:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1a18:	68ab      	ldr	r3, [r5, #8]
 80a1a1a:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1a1c:	4620      	mov	r0, r4
 80a1a1e:	bd38      	pop	{r3, r4, r5, pc}

080a1a20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a1a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 80a1a24:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a1a28:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1a2a:	f04f 0002 	mov.w	r0, #2
 80a1a2e:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1a30:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1a34:	808b      	strh	r3, [r1, #4]
 80a1a36:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1a38:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1a3a:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1a3e:	600b      	str	r3, [r1, #0]
 80a1a40:	e8d4 1f4f 	ldrexb	r1, [r4]
 80a1a44:	4299      	cmp	r1, r3
 80a1a46:	d103      	bne.n	80a1a50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 80a1a48:	e8c4 0f45 	strexb	r5, r0, [r4]
 80a1a4c:	2d00      	cmp	r5, #0
 80a1a4e:	d1f7      	bne.n	80a1a40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a1a50:	d002      	beq.n	80a1a58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 80a1a52:	f88d 1000 	strb.w	r1, [sp]
 80a1a56:	e06c      	b.n	80a1b32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x112>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a1a58:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1a5c:	bf1c      	itt	ne
 80a1a5e:	60e7      	strne	r7, [r4, #12]
 80a1a60:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1a62:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 80a1a66:	bf18      	it	ne
 80a1a68:	461f      	movne	r7, r3
 80a1a6a:	2301      	movs	r3, #1
 80a1a6c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1a6e:	f3bf 8f5f 	dmb	sy
 80a1a72:	f104 0308 	add.w	r3, r4, #8
 80a1a76:	2000      	movs	r0, #0
 80a1a78:	e853 6f00 	ldrex	r6, [r3]
 80a1a7c:	e843 0200 	strex	r2, r0, [r3]
 80a1a80:	2a00      	cmp	r2, #0
 80a1a82:	d1f9      	bne.n	80a1a78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 80a1a84:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1a88:	2e00      	cmp	r6, #0
 80a1a8a:	d052      	beq.n	80a1b32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x112>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1a8c:	f7ff fdc4 	bl	80a1618 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1a90:	b120      	cbz	r0, 80a1a9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1a92:	4629      	mov	r1, r5
 80a1a94:	4630      	mov	r0, r6
 80a1a96:	f7ff ff94 	bl	80a19c2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1a9a:	e043      	b.n	80a1b24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1a9c:	4631      	mov	r1, r6
 80a1a9e:	4668      	mov	r0, sp
 80a1aa0:	f7ff ffaf 	bl	80a1a02 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1aa4:	68e0      	ldr	r0, [r4, #12]
 80a1aa6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1aaa:	b108      	cbz	r0, 80a1ab0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 80a1aac:	f003 ffd4 	bl	80a5a58 <strdup>
 80a1ab0:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1ab2:	2010      	movs	r0, #16
 80a1ab4:	f8ad 5014 	strh.w	r5, [sp, #20]
 80a1ab8:	f7fe faef 	bl	80a009a <_Znwj>
 80a1abc:	4605      	mov	r5, r0
 80a1abe:	b330      	cbz	r0, 80a1b0e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1ac0:	f04f 0800 	mov.w	r8, #0
 80a1ac4:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1ac8:	2018      	movs	r0, #24
 80a1aca:	f7fe fae6 	bl	80a009a <_Znwj>
 80a1ace:	4604      	mov	r4, r0
 80a1ad0:	b1c0      	cbz	r0, 80a1b04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1ad2:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1ad6:	4601      	mov	r1, r0
 80a1ad8:	4668      	mov	r0, sp
 80a1ada:	f7ff ff62 	bl	80a19a2 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1ade:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a1ae0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1ae2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1ae4:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1ae6:	9202      	str	r2, [sp, #8]
 80a1ae8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1aea:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1aec:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80a1af0:	9203      	str	r2, [sp, #12]
 80a1af2:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1af4:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a1af8:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1afc:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1afe:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1b02:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1b04:	4b0e      	ldr	r3, [pc, #56]	; (80a1b40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1b06:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1b08:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1b0a:	4b0e      	ldr	r3, [pc, #56]	; (80a1b44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 80a1b0c:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1b0e:	9804      	ldr	r0, [sp, #16]
 80a1b10:	f7ff fe46 	bl	80a17a0 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1b14:	4668      	mov	r0, sp
 80a1b16:	f7fe fba1 	bl	80a025c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1b1a:	2200      	movs	r2, #0
 80a1b1c:	4629      	mov	r1, r5
 80a1b1e:	480a      	ldr	r0, [pc, #40]	; (80a1b48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x128>)
 80a1b20:	f7ff fd82 	bl	80a1628 <application_thread_invoke>
 80a1b24:	4630      	mov	r0, r6
 80a1b26:	f7fe fb99 	bl	80a025c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1b2a:	2110      	movs	r1, #16
 80a1b2c:	4630      	mov	r0, r6
 80a1b2e:	f001 f8d6 	bl	80a2cde <_ZdlPvj>
 80a1b32:	4638      	mov	r0, r7
 80a1b34:	f7ff fe34 	bl	80a17a0 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 80a1b38:	b006      	add	sp, #24
 80a1b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1b3e:	bf00      	nop
 80a1b40:	080a19d5 	.word	0x080a19d5
 80a1b44:	080a1c35 	.word	0x080a1c35
 80a1b48:	080a1827 	.word	0x080a1827

080a1b4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1b50:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1b52:	ad07      	add	r5, sp, #28
 80a1b54:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1b58:	4606      	mov	r6, r0
 80a1b5a:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a1b5c:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1b5e:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1b60:	460f      	mov	r7, r1
 80a1b62:	4690      	mov	r8, r2
 80a1b64:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1b68:	f8c5 b004 	str.w	fp, [r5, #4]
 80a1b6c:	f8c5 b008 	str.w	fp, [r5, #8]
 80a1b70:	9307      	str	r3, [sp, #28]
 80a1b72:	f7fe fa92 	bl	80a009a <_Znwj>
 80a1b76:	4604      	mov	r4, r0
 80a1b78:	b138      	cbz	r0, 80a1b8a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a1b7a:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1b7e:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1b82:	f8c0 b004 	str.w	fp, [r0, #4]
 80a1b86:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1b8a:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1b8c:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a1b8e:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1b90:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1b92:	f7fe fa82 	bl	80a009a <_Znwj>
 80a1b96:	b128      	cbz	r0, 80a1ba4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a1b98:	2301      	movs	r3, #1
 80a1b9a:	6043      	str	r3, [r0, #4]
 80a1b9c:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a1b9e:	4b23      	ldr	r3, [pc, #140]	; (80a1c2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 80a1ba0:	60c4      	str	r4, [r0, #12]
 80a1ba2:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a1ba4:	4b22      	ldr	r3, [pc, #136]	; (80a1c30 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1ba6:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1ba8:	2008      	movs	r0, #8
 80a1baa:	9308      	str	r3, [sp, #32]
 80a1bac:	f7fe fa75 	bl	80a009a <_Znwj>
 80a1bb0:	4604      	mov	r4, r0
 80a1bb2:	b128      	cbz	r0, 80a1bc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1bb4:	9b03      	ldr	r3, [sp, #12]
 80a1bb6:	a904      	add	r1, sp, #16
 80a1bb8:	f840 3b04 	str.w	r3, [r0], #4
 80a1bbc:	f7ff fecc 	bl	80a1958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1bc0:	9500      	str	r5, [sp, #0]
 80a1bc2:	fa5f f38a 	uxtb.w	r3, sl
 80a1bc6:	464a      	mov	r2, r9
 80a1bc8:	4641      	mov	r1, r8
 80a1bca:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a1bcc:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1bce:	f7ff fd6f 	bl	80a16b0 <spark_send_event>
 80a1bd2:	b9b8      	cbnz	r0, 80a1c04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a1bd4:	9b03      	ldr	r3, [sp, #12]
 80a1bd6:	785b      	ldrb	r3, [r3, #1]
 80a1bd8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1bdc:	b993      	cbnz	r3, 80a1c04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1bde:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a1be2:	a905      	add	r1, sp, #20
 80a1be4:	a803      	add	r0, sp, #12
 80a1be6:	9205      	str	r2, [sp, #20]
 80a1be8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1bec:	f7ff ff18 	bl	80a1a20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1bf0:	9805      	ldr	r0, [sp, #20]
 80a1bf2:	f7ff fdd5 	bl	80a17a0 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1bf6:	a805      	add	r0, sp, #20
 80a1bf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1bfa:	f7ff feb4 	bl	80a1966 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1bfe:	a806      	add	r0, sp, #24
 80a1c00:	f7ff fe83 	bl	80a190a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1c04:	9b03      	ldr	r3, [sp, #12]
 80a1c06:	a904      	add	r1, sp, #16
 80a1c08:	a806      	add	r0, sp, #24
 80a1c0a:	9305      	str	r3, [sp, #20]
 80a1c0c:	f7ff fea4 	bl	80a1958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a1c10:	a905      	add	r1, sp, #20
 80a1c12:	4630      	mov	r0, r6
 80a1c14:	f7ff fe8f 	bl	80a1936 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1c18:	a806      	add	r0, sp, #24
 80a1c1a:	f7ff fe76 	bl	80a190a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1c1e:	a804      	add	r0, sp, #16
 80a1c20:	f7ff fe73 	bl	80a190a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a1c24:	4630      	mov	r0, r6
 80a1c26:	b00b      	add	sp, #44	; 0x2c
 80a1c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1c2c:	080a64f8 	.word	0x080a64f8
 80a1c30:	080a1da1 	.word	0x080a1da1

080a1c34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1c34:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1c38:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1c3a:	d006      	beq.n	80a1c4a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a1c3c:	2a03      	cmp	r2, #3
 80a1c3e:	d017      	beq.n	80a1c70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a1c40:	2a01      	cmp	r2, #1
 80a1c42:	d121      	bne.n	80a1c88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1c44:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1c46:	6003      	str	r3, [r0, #0]
	      break;
 80a1c48:	e01e      	b.n	80a1c88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1c4a:	2018      	movs	r0, #24
 80a1c4c:	680e      	ldr	r6, [r1, #0]
 80a1c4e:	f7fe fa24 	bl	80a009a <_Znwj>
 80a1c52:	4605      	mov	r5, r0
 80a1c54:	b150      	cbz	r0, 80a1c6c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1c56:	4631      	mov	r1, r6
 80a1c58:	f7ff fed3 	bl	80a1a02 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1c5c:	6930      	ldr	r0, [r6, #16]
 80a1c5e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1c62:	b108      	cbz	r0, 80a1c68 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a1c64:	f003 fef8 	bl	80a5a58 <strdup>
 80a1c68:	6128      	str	r0, [r5, #16]
 80a1c6a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1c6c:	6025      	str	r5, [r4, #0]
 80a1c6e:	e00b      	b.n	80a1c88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1c70:	6804      	ldr	r4, [r0, #0]
 80a1c72:	b14c      	cbz	r4, 80a1c88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1c74:	6920      	ldr	r0, [r4, #16]
 80a1c76:	f7ff fd93 	bl	80a17a0 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1c7a:	4620      	mov	r0, r4
 80a1c7c:	f7fe faee 	bl	80a025c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1c80:	2118      	movs	r1, #24
 80a1c82:	4620      	mov	r0, r4
 80a1c84:	f001 f82b 	bl	80a2cde <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1c88:	2000      	movs	r0, #0
 80a1c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1c8c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1c8c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1c8e:	2300      	movs	r3, #0
 80a1c90:	6083      	str	r3, [r0, #8]
 80a1c92:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1c94:	4604      	mov	r4, r0
 80a1c96:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1c98:	b12b      	cbz	r3, 80a1ca6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1c9a:	2202      	movs	r2, #2
 80a1c9c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1c9e:	68eb      	ldr	r3, [r5, #12]
 80a1ca0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1ca2:	68ab      	ldr	r3, [r5, #8]
 80a1ca4:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1ca6:	4620      	mov	r0, r4
 80a1ca8:	bd38      	pop	{r3, r4, r5, pc}

080a1caa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1caa:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1cac:	b570      	push	{r4, r5, r6, lr}
 80a1cae:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1cb0:	d006      	beq.n	80a1cc0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a1cb2:	2a03      	cmp	r2, #3
 80a1cb4:	d011      	beq.n	80a1cda <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a1cb6:	2a01      	cmp	r2, #1
 80a1cb8:	d118      	bne.n	80a1cec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1cba:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1cbc:	6003      	str	r3, [r0, #0]
	      break;
 80a1cbe:	e015      	b.n	80a1cec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1cc0:	2014      	movs	r0, #20
 80a1cc2:	680e      	ldr	r6, [r1, #0]
 80a1cc4:	f7fe f9e9 	bl	80a009a <_Znwj>
 80a1cc8:	4605      	mov	r5, r0
 80a1cca:	b120      	cbz	r0, 80a1cd6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1ccc:	4631      	mov	r1, r6
 80a1cce:	f7ff ffdd 	bl	80a1c8c <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1cd2:	7c33      	ldrb	r3, [r6, #16]
 80a1cd4:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1cd6:	6025      	str	r5, [r4, #0]
 80a1cd8:	e008      	b.n	80a1cec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1cda:	6804      	ldr	r4, [r0, #0]
 80a1cdc:	b134      	cbz	r4, 80a1cec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1cde:	4620      	mov	r0, r4
 80a1ce0:	f7fe fabc 	bl	80a025c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1ce4:	2114      	movs	r1, #20
 80a1ce6:	4620      	mov	r0, r4
 80a1ce8:	f000 fff9 	bl	80a2cde <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1cec:	2000      	movs	r0, #0
 80a1cee:	bd70      	pop	{r4, r5, r6, pc}

080a1cf0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a1cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1cf2:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1cf4:	f3bf 8f5f 	dmb	sy
 80a1cf8:	b087      	sub	sp, #28
 80a1cfa:	2300      	movs	r3, #0
 80a1cfc:	e850 6f00 	ldrex	r6, [r0]
 80a1d00:	e840 3200 	strex	r2, r3, [r0]
 80a1d04:	2a00      	cmp	r2, #0
 80a1d06:	d1f9      	bne.n	80a1cfc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a1d08:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1d0c:	2e00      	cmp	r6, #0
 80a1d0e:	d03f      	beq.n	80a1d90 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1d10:	4618      	mov	r0, r3
 80a1d12:	f7ff fc81 	bl	80a1618 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1d16:	4607      	mov	r7, r0
 80a1d18:	b120      	cbz	r0, 80a1d24 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1d1a:	4621      	mov	r1, r4
 80a1d1c:	4630      	mov	r0, r6
 80a1d1e:	f7ff fe60 	bl	80a19e2 <_ZNKSt8functionIFvRKbEEclES1_>
 80a1d22:	e02e      	b.n	80a1d82 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1d24:	4631      	mov	r1, r6
 80a1d26:	a801      	add	r0, sp, #4
 80a1d28:	f7ff ffb0 	bl	80a1c8c <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1d2c:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1d2e:	2010      	movs	r0, #16
 80a1d30:	f88d 3014 	strb.w	r3, [sp, #20]
 80a1d34:	f7fe f9b1 	bl	80a009a <_Znwj>
 80a1d38:	4605      	mov	r5, r0
 80a1d3a:	b1d0      	cbz	r0, 80a1d72 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1d3c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1d3e:	2014      	movs	r0, #20
 80a1d40:	f7fe f9ab 	bl	80a009a <_Znwj>
 80a1d44:	4604      	mov	r4, r0
 80a1d46:	b178      	cbz	r0, 80a1d68 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1d48:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1d4a:	4601      	mov	r1, r0
 80a1d4c:	a801      	add	r0, sp, #4
 80a1d4e:	f7ff fe28 	bl	80a19a2 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1d52:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1d54:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1d56:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1d58:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1d5a:	9203      	str	r2, [sp, #12]
 80a1d5c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1d5e:	60e3      	str	r3, [r4, #12]
 80a1d60:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1d64:	9204      	str	r2, [sp, #16]
 80a1d66:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1d68:	4b0a      	ldr	r3, [pc, #40]	; (80a1d94 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1d6a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1d6c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1d6e:	4b0a      	ldr	r3, [pc, #40]	; (80a1d98 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a1d70:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1d72:	a801      	add	r0, sp, #4
 80a1d74:	f7fe fa72 	bl	80a025c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1d78:	2200      	movs	r2, #0
 80a1d7a:	4629      	mov	r1, r5
 80a1d7c:	4807      	ldr	r0, [pc, #28]	; (80a1d9c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a1d7e:	f7ff fc53 	bl	80a1628 <application_thread_invoke>
 80a1d82:	4630      	mov	r0, r6
 80a1d84:	f7fe fa6a 	bl	80a025c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1d88:	2110      	movs	r1, #16
 80a1d8a:	4630      	mov	r0, r6
 80a1d8c:	f000 ffa7 	bl	80a2cde <_ZdlPvj>
        }
    }
 80a1d90:	b007      	add	sp, #28
 80a1d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1d94:	080a19f5 	.word	0x080a19f5
 80a1d98:	080a1cab 	.word	0x080a1cab
 80a1d9c:	080a1827 	.word	0x080a1827

080a1da0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1da0:	b530      	push	{r4, r5, lr}
 80a1da2:	4604      	mov	r4, r0
 80a1da4:	b085      	sub	sp, #20
 80a1da6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1da8:	4668      	mov	r0, sp
 80a1daa:	4611      	mov	r1, r2
 80a1dac:	f7ff fddb 	bl	80a1966 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1db0:	b17c      	cbz	r4, 80a1dd2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1db2:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1db4:	4628      	mov	r0, r5
 80a1db6:	b10d      	cbz	r5, 80a1dbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a1db8:	f003 fe4e 	bl	80a5a58 <strdup>
 80a1dbc:	9002      	str	r0, [sp, #8]
 80a1dbe:	a902      	add	r1, sp, #8
 80a1dc0:	4668      	mov	r0, sp
 80a1dc2:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a1dc6:	f7ff fe2b 	bl	80a1a20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1dca:	9802      	ldr	r0, [sp, #8]
 80a1dcc:	f7ff fce8 	bl	80a17a0 <free>
 80a1dd0:	e01d      	b.n	80a1e0e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1dd2:	f04f 0201 	mov.w	r2, #1
 80a1dd6:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1dd8:	f88d 4008 	strb.w	r4, [sp, #8]
 80a1ddc:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a1de0:	42a3      	cmp	r3, r4
 80a1de2:	d103      	bne.n	80a1dec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a1de4:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a1de8:	2900      	cmp	r1, #0
 80a1dea:	d1f7      	bne.n	80a1ddc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a1dec:	d002      	beq.n	80a1df4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a1dee:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1df2:	e00c      	b.n	80a1e0e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a1df4:	f110 010c 	adds.w	r1, r0, #12
 80a1df8:	f04f 0301 	mov.w	r3, #1
 80a1dfc:	bf18      	it	ne
 80a1dfe:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1e00:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a1e04:	3004      	adds	r0, #4
 80a1e06:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a1e0a:	f7ff ff71 	bl	80a1cf0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a1e0e:	a801      	add	r0, sp, #4
 80a1e10:	f7ff fd7b 	bl	80a190a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a1e14:	b005      	add	sp, #20
 80a1e16:	bd30      	pop	{r4, r5, pc}

080a1e18 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1e18:	4770      	bx	lr

080a1e1a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1e1c:	4606      	mov	r6, r0
 80a1e1e:	4615      	mov	r5, r2
 80a1e20:	460c      	mov	r4, r1
 80a1e22:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1e24:	42bc      	cmp	r4, r7
 80a1e26:	d006      	beq.n	80a1e36 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1e28:	6833      	ldr	r3, [r6, #0]
 80a1e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1e2e:	689b      	ldr	r3, [r3, #8]
 80a1e30:	4630      	mov	r0, r6
 80a1e32:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1e34:	e7f6      	b.n	80a1e24 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1e36:	4628      	mov	r0, r5
 80a1e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1e3a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1e3a:	2200      	movs	r2, #0
 80a1e3c:	7c00      	ldrb	r0, [r0, #16]
 80a1e3e:	f7ff baf9 	b.w	80a1434 <HAL_I2C_Write_Data>

080a1e42 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1e42:	2100      	movs	r1, #0
 80a1e44:	7c00      	ldrb	r0, [r0, #16]
 80a1e46:	f7ff bafd 	b.w	80a1444 <HAL_I2C_Available_Data>

080a1e4a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1e4a:	2100      	movs	r1, #0
 80a1e4c:	7c00      	ldrb	r0, [r0, #16]
 80a1e4e:	f7ff bb01 	b.w	80a1454 <HAL_I2C_Read_Data>

080a1e52 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1e52:	2100      	movs	r1, #0
 80a1e54:	7c00      	ldrb	r0, [r0, #16]
 80a1e56:	f7ff bb05 	b.w	80a1464 <HAL_I2C_Peek_Data>

080a1e5a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1e5a:	2100      	movs	r1, #0
 80a1e5c:	7c00      	ldrb	r0, [r0, #16]
 80a1e5e:	f7ff bb09 	b.w	80a1474 <HAL_I2C_Flush_Data>

080a1e62 <_ZN7TwoWireD0Ev>:
 80a1e62:	b510      	push	{r4, lr}
 80a1e64:	4604      	mov	r4, r0
 80a1e66:	2114      	movs	r1, #20
 80a1e68:	f000 ff39 	bl	80a2cde <_ZdlPvj>
 80a1e6c:	4620      	mov	r0, r4
 80a1e6e:	bd10      	pop	{r4, pc}

080a1e70 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1e70:	b510      	push	{r4, lr}
 80a1e72:	4604      	mov	r4, r0
 80a1e74:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1e7a:	60a3      	str	r3, [r4, #8]
 80a1e7c:	4b04      	ldr	r3, [pc, #16]	; (80a1e90 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1e7e:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1e80:	7420      	strb	r0, [r4, #16]
 80a1e82:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1e84:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1e86:	f7ff fb05 	bl	80a1494 <HAL_I2C_Init>

}
 80a1e8a:	4620      	mov	r0, r4
 80a1e8c:	bd10      	pop	{r4, pc}
 80a1e8e:	bf00      	nop
 80a1e90:	080a6514 	.word	0x080a6514

080a1e94 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1e94:	2100      	movs	r1, #0
 80a1e96:	7c00      	ldrb	r0, [r0, #16]
 80a1e98:	f7ff baf4 	b.w	80a1484 <HAL_I2C_Is_Enabled>

080a1e9c <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1e9c:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
 80a1e9e:	b510      	push	{r4, lr}
 80a1ea0:	b90a      	cbnz	r2, 80a1ea6 <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
 80a1ea2:	f000 ff1e 	bl	80a2ce2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1ea6:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
 80a1ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1eac:	4718      	bx	r3
	...

080a1eb0 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void detachInterrupt(uint16_t pin)
{
 80a1eb0:	b570      	push	{r4, r5, r6, lr}
 80a1eb2:	4606      	mov	r6, r0
#if Wiring_Cellular == 1
    /* safety check that prevents users from detaching an interrupt from
     * BATT_INT_PC13 for power management which is shared with D7 */
    if (pin == D7) return;
#endif
    HAL_Interrupts_Detach(pin);
 80a1eb4:	f7ff faae 	bl	80a1414 <HAL_Interrupts_Detach>
    delete handlers[pin];
 80a1eb8:	4b07      	ldr	r3, [pc, #28]	; (80a1ed8 <_Z15detachInterruptt+0x28>)
 80a1eba:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 80a1ebe:	461c      	mov	r4, r3
 80a1ec0:	b135      	cbz	r5, 80a1ed0 <_Z15detachInterruptt+0x20>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1ec2:	4628      	mov	r0, r5
 80a1ec4:	f7fe f9ca 	bl	80a025c <_ZNSt14_Function_baseD1Ev>
 80a1ec8:	2110      	movs	r1, #16
 80a1eca:	4628      	mov	r0, r5
 80a1ecc:	f000 ff07 	bl	80a2cde <_ZdlPvj>
    handlers[pin] = NULL;
 80a1ed0:	2300      	movs	r3, #0
 80a1ed2:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
 80a1ed6:	bd70      	pop	{r4, r5, r6, pc}
 80a1ed8:	200004c4 	.word	0x200004c4

080a1edc <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1edc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1ede:	2300      	movs	r3, #0
 80a1ee0:	6083      	str	r3, [r0, #8]
 80a1ee2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1ee4:	4604      	mov	r4, r0
 80a1ee6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1ee8:	b12b      	cbz	r3, 80a1ef6 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1eea:	2202      	movs	r2, #2
 80a1eec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1eee:	68eb      	ldr	r3, [r5, #12]
 80a1ef0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1ef2:	68ab      	ldr	r3, [r5, #8]
 80a1ef4:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1ef6:	4620      	mov	r0, r4
 80a1ef8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1efc <_Z16allocate_handlertRSt8functionIFvvEE>:
#include "spark_wiring_platform.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 80a1efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
 80a1efe:	4b0d      	ldr	r3, [pc, #52]	; (80a1f34 <_Z16allocate_handlertRSt8functionIFvvEE+0x38>)
#include "spark_wiring_platform.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 80a1f00:	4606      	mov	r6, r0
    delete handlers[pin];
 80a1f02:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
#include "spark_wiring_platform.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 80a1f06:	460f      	mov	r7, r1
 80a1f08:	461c      	mov	r4, r3
    delete handlers[pin];
 80a1f0a:	b135      	cbz	r5, 80a1f1a <_Z16allocate_handlertRSt8functionIFvvEE+0x1e>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1f0c:	4628      	mov	r0, r5
 80a1f0e:	f7fe f9a5 	bl	80a025c <_ZNSt14_Function_baseD1Ev>
 80a1f12:	2110      	movs	r1, #16
 80a1f14:	4628      	mov	r0, r5
 80a1f16:	f000 fee2 	bl	80a2cde <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
 80a1f1a:	2010      	movs	r0, #16
 80a1f1c:	f7fe f8bd 	bl	80a009a <_Znwj>
 80a1f20:	4605      	mov	r5, r0
 80a1f22:	b110      	cbz	r0, 80a1f2a <_Z16allocate_handlertRSt8functionIFvvEE+0x2e>
 80a1f24:	4639      	mov	r1, r7
 80a1f26:	f7ff ffd9 	bl	80a1edc <_ZNSt8functionIFvvEEC1ERKS1_>
 80a1f2a:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
}
 80a1f2e:	4628      	mov	r0, r5
 80a1f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1f32:	bf00      	nop
 80a1f34:	200004c4 	.word	0x200004c4

080a1f38 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a1f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1f3a:	460c      	mov	r4, r1
 80a1f3c:	4605      	mov	r5, r0
 80a1f3e:	b085      	sub	sp, #20
 80a1f40:	4617      	mov	r7, r2
 80a1f42:	461e      	mov	r6, r3
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
 80a1f44:	f7ff fa66 	bl	80a1414 <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
 80a1f48:	4621      	mov	r1, r4
 80a1f4a:	4628      	mov	r0, r5
 80a1f4c:	f7ff ffd6 	bl	80a1efc <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
 80a1f50:	4604      	mov	r4, r0
 80a1f52:	b1b8      	cbz	r0, 80a1f84 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x4c>
        HAL_InterruptExtraConfiguration extra = {0};
 80a1f54:	2100      	movs	r1, #0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a1f56:	2304      	movs	r3, #4
  if (priority >= 0) {
 80a1f58:	428e      	cmp	r6, r1
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
 80a1f5a:	9103      	str	r1, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a1f5c:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a1f60:	bfb4      	ite	lt
 80a1f62:	460b      	movlt	r3, r1
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a1f64:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1f68:	4602      	mov	r2, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a1f6a:	bfa4      	itt	ge
 80a1f6c:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a1f70:	ab03      	addge	r3, sp, #12
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1f72:	9300      	str	r3, [sp, #0]
 80a1f74:	4906      	ldr	r1, [pc, #24]	; (80a1f90 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>)
 80a1f76:	463b      	mov	r3, r7
 80a1f78:	4628      	mov	r0, r5

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a1f7a:	bfa8      	it	ge
 80a1f7c:	f88d 600d 	strbge.w	r6, [sp, #13]
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1f80:	f7ff fa40 	bl	80a1404 <HAL_Interrupts_Attach>
    }
    return handler!=NULL;
}
 80a1f84:	1c20      	adds	r0, r4, #0
 80a1f86:	bf18      	it	ne
 80a1f88:	2001      	movne	r0, #1
 80a1f8a:	b005      	add	sp, #20
 80a1f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1f8e:	bf00      	nop
 80a1f90:	080a1e9d 	.word	0x080a1e9d

080a1f94 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1f94:	4770      	bx	lr

080a1f96 <_ZN9IPAddressD0Ev>:
 80a1f96:	b510      	push	{r4, lr}
 80a1f98:	4604      	mov	r4, r0
 80a1f9a:	2118      	movs	r1, #24
 80a1f9c:	f000 fe9f 	bl	80a2cde <_ZdlPvj>
 80a1fa0:	4620      	mov	r0, r4
 80a1fa2:	bd10      	pop	{r4, pc}

080a1fa4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1fa6:	460f      	mov	r7, r1
 80a1fa8:	f100 0608 	add.w	r6, r0, #8
 80a1fac:	1d05      	adds	r5, r0, #4
 80a1fae:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1fb0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1fb4:	220a      	movs	r2, #10
 80a1fb6:	4638      	mov	r0, r7
 80a1fb8:	f000 f92b 	bl	80a2212 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1fbc:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1fbe:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1fc0:	d007      	beq.n	80a1fd2 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1fc2:	2c00      	cmp	r4, #0
 80a1fc4:	d0f4      	beq.n	80a1fb0 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1fc6:	212e      	movs	r1, #46	; 0x2e
 80a1fc8:	4638      	mov	r0, r7
 80a1fca:	f000 f8df 	bl	80a218c <_ZN5Print5printEc>
 80a1fce:	4404      	add	r4, r0
 80a1fd0:	e7ee      	b.n	80a1fb0 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1fd2:	4620      	mov	r0, r4
 80a1fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1fd8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1fd8:	b510      	push	{r4, lr}
 80a1fda:	4604      	mov	r4, r0
 80a1fdc:	4b04      	ldr	r3, [pc, #16]	; (80a1ff0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1fde:	2211      	movs	r2, #17
 80a1fe0:	f840 3b04 	str.w	r3, [r0], #4
 80a1fe4:	2100      	movs	r1, #0
 80a1fe6:	f003 fcf4 	bl	80a59d2 <memset>
{
    clear();
}
 80a1fea:	4620      	mov	r0, r4
 80a1fec:	bd10      	pop	{r4, pc}
 80a1fee:	bf00      	nop
 80a1ff0:	080a653c 	.word	0x080a653c

080a1ff4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1ff4:	4603      	mov	r3, r0
 80a1ff6:	4a07      	ldr	r2, [pc, #28]	; (80a2014 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1ff8:	b510      	push	{r4, lr}
 80a1ffa:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1ffe:	f101 0210 	add.w	r2, r1, #16
 80a2002:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2006:	4291      	cmp	r1, r2
 80a2008:	f843 4b04 	str.w	r4, [r3], #4
 80a200c:	d1f9      	bne.n	80a2002 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a200e:	780a      	ldrb	r2, [r1, #0]
 80a2010:	701a      	strb	r2, [r3, #0]
}
 80a2012:	bd10      	pop	{r4, pc}
 80a2014:	080a653c 	.word	0x080a653c

080a2018 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2018:	4a02      	ldr	r2, [pc, #8]	; (80a2024 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a201a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a201c:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a201e:	2204      	movs	r2, #4
 80a2020:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a2022:	4770      	bx	lr
 80a2024:	080a653c 	.word	0x080a653c

080a2028 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a2028:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a202a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a202e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a2032:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a2036:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a203a:	2304      	movs	r3, #4
 80a203c:	6041      	str	r1, [r0, #4]
 80a203e:	7503      	strb	r3, [r0, #20]
 80a2040:	bd10      	pop	{r4, pc}
	...

080a2044 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2046:	4d04      	ldr	r5, [pc, #16]	; (80a2058 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2048:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a204a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a204e:	9500      	str	r5, [sp, #0]
 80a2050:	f7ff ffea 	bl	80a2028 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2054:	b003      	add	sp, #12
 80a2056:	bd30      	pop	{r4, r5, pc}
 80a2058:	080a653c 	.word	0x080a653c

080a205c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a205c:	4a01      	ldr	r2, [pc, #4]	; (80a2064 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a205e:	4b02      	ldr	r3, [pc, #8]	; (80a2068 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2060:	601a      	str	r2, [r3, #0]
 80a2062:	4770      	bx	lr
 80a2064:	080a6601 	.word	0x080a6601
 80a2068:	20000524 	.word	0x20000524

080a206c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a206c:	2300      	movs	r3, #0
 80a206e:	461a      	mov	r2, r3
 80a2070:	6840      	ldr	r0, [r0, #4]
 80a2072:	f7ff bb3d 	b.w	80a16f0 <network_connect>

080a2076 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2076:	2200      	movs	r2, #0
 80a2078:	2102      	movs	r1, #2
 80a207a:	6840      	ldr	r0, [r0, #4]
 80a207c:	f7ff bb48 	b.w	80a1710 <network_disconnect>

080a2080 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2080:	2200      	movs	r2, #0
 80a2082:	4611      	mov	r1, r2
 80a2084:	6840      	ldr	r0, [r0, #4]
 80a2086:	f7ff bb3b 	b.w	80a1700 <network_connecting>

080a208a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a208a:	2200      	movs	r2, #0
 80a208c:	4611      	mov	r1, r2
 80a208e:	6840      	ldr	r0, [r0, #4]
 80a2090:	f7ff bb46 	b.w	80a1720 <network_ready>

080a2094 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2094:	2300      	movs	r3, #0
 80a2096:	461a      	mov	r2, r3
 80a2098:	4619      	mov	r1, r3
 80a209a:	6840      	ldr	r0, [r0, #4]
 80a209c:	f7ff bb48 	b.w	80a1730 <network_on>

080a20a0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a20a0:	2300      	movs	r3, #0
 80a20a2:	461a      	mov	r2, r3
 80a20a4:	4619      	mov	r1, r3
 80a20a6:	6840      	ldr	r0, [r0, #4]
 80a20a8:	f7ff bb4a 	b.w	80a1740 <network_off>

080a20ac <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a20ac:	2200      	movs	r2, #0
 80a20ae:	f081 0101 	eor.w	r1, r1, #1
 80a20b2:	6840      	ldr	r0, [r0, #4]
 80a20b4:	f7ff bb4c 	b.w	80a1750 <network_listen>

080a20b8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a20b8:	2200      	movs	r2, #0
 80a20ba:	6840      	ldr	r0, [r0, #4]
 80a20bc:	f7ff bb58 	b.w	80a1770 <network_set_listen_timeout>

080a20c0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a20c0:	2200      	movs	r2, #0
 80a20c2:	4611      	mov	r1, r2
 80a20c4:	6840      	ldr	r0, [r0, #4]
 80a20c6:	f7ff bb5b 	b.w	80a1780 <network_get_listen_timeout>

080a20ca <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a20ca:	2200      	movs	r2, #0
 80a20cc:	4611      	mov	r1, r2
 80a20ce:	6840      	ldr	r0, [r0, #4]
 80a20d0:	f7ff bb46 	b.w	80a1760 <network_listening>

080a20d4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a20d4:	b570      	push	{r4, r5, r6, lr}
 80a20d6:	4616      	mov	r6, r2
 80a20d8:	b08e      	sub	sp, #56	; 0x38
 80a20da:	4604      	mov	r4, r0
    IPAddress addr;
 80a20dc:	a808      	add	r0, sp, #32
 80a20de:	f7ff ff7b 	bl	80a1fd8 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a20e2:	2211      	movs	r2, #17
 80a20e4:	2100      	movs	r1, #0
 80a20e6:	a803      	add	r0, sp, #12
 80a20e8:	f003 fc73 	bl	80a59d2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a20ec:	4630      	mov	r0, r6
 80a20ee:	f003 fcce 	bl	80a5a8e <strlen>
 80a20f2:	2500      	movs	r5, #0
 80a20f4:	4b0a      	ldr	r3, [pc, #40]	; (80a2120 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a20f6:	9500      	str	r5, [sp, #0]
 80a20f8:	b281      	uxth	r1, r0
 80a20fa:	685b      	ldr	r3, [r3, #4]
 80a20fc:	aa03      	add	r2, sp, #12
 80a20fe:	4630      	mov	r0, r6
 80a2100:	f7ff fa5a 	bl	80a15b8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2104:	b120      	cbz	r0, 80a2110 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a2106:	4629      	mov	r1, r5
 80a2108:	4620      	mov	r0, r4
 80a210a:	f7ff ff85 	bl	80a2018 <_ZN9IPAddressC1Em>
 80a210e:	e003      	b.n	80a2118 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a2110:	a903      	add	r1, sp, #12
 80a2112:	4620      	mov	r0, r4
 80a2114:	f7ff ff6e 	bl	80a1ff4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2118:	4620      	mov	r0, r4
 80a211a:	b00e      	add	sp, #56	; 0x38
 80a211c:	bd70      	pop	{r4, r5, r6, pc}
 80a211e:	bf00      	nop
 80a2120:	200009b0 	.word	0x200009b0

080a2124 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2124:	4b02      	ldr	r3, [pc, #8]	; (80a2130 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2126:	4a03      	ldr	r2, [pc, #12]	; (80a2134 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2128:	601a      	str	r2, [r3, #0]
 80a212a:	2200      	movs	r2, #0
 80a212c:	605a      	str	r2, [r3, #4]
 80a212e:	4770      	bx	lr
 80a2130:	20000528 	.word	0x20000528
 80a2134:	080a6628 	.word	0x080a6628

080a2138 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a213a:	4606      	mov	r6, r0
 80a213c:	460d      	mov	r5, r1
 80a213e:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a2140:	2400      	movs	r4, #0
  while (size--) {
 80a2142:	42bd      	cmp	r5, r7
 80a2144:	d00c      	beq.n	80a2160 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2146:	6833      	ldr	r3, [r6, #0]
 80a2148:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a214c:	689b      	ldr	r3, [r3, #8]
 80a214e:	4630      	mov	r0, r6
 80a2150:	4798      	blx	r3
     if (chunk>=0)
 80a2152:	2800      	cmp	r0, #0
 80a2154:	db01      	blt.n	80a215a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2156:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a2158:	e7f3      	b.n	80a2142 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a215a:	2c00      	cmp	r4, #0
 80a215c:	bf08      	it	eq
 80a215e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2160:	4620      	mov	r0, r4
 80a2162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2164 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a2164:	b570      	push	{r4, r5, r6, lr}
 80a2166:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2168:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a216a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a216c:	b149      	cbz	r1, 80a2182 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a216e:	f003 fc8e 	bl	80a5a8e <strlen>
 80a2172:	682b      	ldr	r3, [r5, #0]
 80a2174:	4602      	mov	r2, r0
 80a2176:	4621      	mov	r1, r4
 80a2178:	4628      	mov	r0, r5
    }
 80a217a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a217e:	68db      	ldr	r3, [r3, #12]
 80a2180:	4718      	bx	r3
    }
 80a2182:	bd70      	pop	{r4, r5, r6, pc}

080a2184 <_ZN5Print5printEPKc>:
 80a2184:	b508      	push	{r3, lr}
 80a2186:	f7ff ffed 	bl	80a2164 <_ZN5Print5writeEPKc>
 80a218a:	bd08      	pop	{r3, pc}

080a218c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a218c:	6803      	ldr	r3, [r0, #0]
 80a218e:	689b      	ldr	r3, [r3, #8]
 80a2190:	4718      	bx	r3

080a2192 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2192:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a2194:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2196:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a2198:	f7ff fff8 	bl	80a218c <_ZN5Print5printEc>
  n += print('\n');
 80a219c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a219e:	4604      	mov	r4, r0
  n += print('\n');
 80a21a0:	4628      	mov	r0, r5
 80a21a2:	f7ff fff3 	bl	80a218c <_ZN5Print5printEc>
  return n;
}
 80a21a6:	4420      	add	r0, r4
 80a21a8:	bd38      	pop	{r3, r4, r5, pc}

080a21aa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a21aa:	b538      	push	{r3, r4, r5, lr}
 80a21ac:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a21ae:	f7ff ffd9 	bl	80a2164 <_ZN5Print5writeEPKc>
 80a21b2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a21b4:	4628      	mov	r0, r5
 80a21b6:	f7ff ffec 	bl	80a2192 <_ZN5Print7printlnEv>
  return n;
}
 80a21ba:	4420      	add	r0, r4
 80a21bc:	bd38      	pop	{r3, r4, r5, pc}

080a21be <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a21be:	2a01      	cmp	r2, #1
 80a21c0:	bf98      	it	ls
 80a21c2:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a21c4:	b530      	push	{r4, r5, lr}
 80a21c6:	460b      	mov	r3, r1
 80a21c8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a21ca:	2100      	movs	r1, #0
 80a21cc:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a21d0:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a21d4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a21d8:	fb05 3312 	mls	r3, r5, r2, r3
 80a21dc:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a21de:	2b09      	cmp	r3, #9
 80a21e0:	bf94      	ite	ls
 80a21e2:	3330      	addls	r3, #48	; 0x30
 80a21e4:	3337      	addhi	r3, #55	; 0x37
 80a21e6:	b2db      	uxtb	r3, r3
 80a21e8:	4621      	mov	r1, r4
 80a21ea:	f804 3901 	strb.w	r3, [r4], #-1
 80a21ee:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a21f0:	2d00      	cmp	r5, #0
 80a21f2:	d1ef      	bne.n	80a21d4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a21f4:	f7ff ffb6 	bl	80a2164 <_ZN5Print5writeEPKc>
}
 80a21f8:	b00b      	add	sp, #44	; 0x2c
 80a21fa:	bd30      	pop	{r4, r5, pc}

080a21fc <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a21fc:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a21fe:	b922      	cbnz	r2, 80a220a <_ZN5Print5printEmi+0xe>
 80a2200:	6803      	ldr	r3, [r0, #0]
 80a2202:	b2c9      	uxtb	r1, r1
 80a2204:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a2206:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a2208:	4718      	bx	r3
  else return printNumber(n, base);
 80a220a:	b2d2      	uxtb	r2, r2
}
 80a220c:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a220e:	f7ff bfd6 	b.w	80a21be <_ZN5Print11printNumberEmh>

080a2212 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a2212:	f7ff bff3 	b.w	80a21fc <_ZN5Print5printEmi>

080a2216 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a2216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a221a:	4607      	mov	r7, r0
 80a221c:	460e      	mov	r6, r1
  if (base == 0) {
 80a221e:	4615      	mov	r5, r2
 80a2220:	b92a      	cbnz	r2, 80a222e <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a2222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a2226:	6803      	ldr	r3, [r0, #0]
 80a2228:	b2c9      	uxtb	r1, r1
 80a222a:	689b      	ldr	r3, [r3, #8]
 80a222c:	4718      	bx	r3
  } else if (base == 10) {
 80a222e:	2a0a      	cmp	r2, #10
 80a2230:	d102      	bne.n	80a2238 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a2232:	2900      	cmp	r1, #0
 80a2234:	da01      	bge.n	80a223a <_ZN5Print5printEli+0x24>
 80a2236:	e004      	b.n	80a2242 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a2238:	b2d2      	uxtb	r2, r2
  }
}
 80a223a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a223e:	f7ff bfbe 	b.w	80a21be <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a2242:	212d      	movs	r1, #45	; 0x2d
 80a2244:	f7ff ffa2 	bl	80a218c <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a2248:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a224a:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a224c:	4271      	negs	r1, r6
 80a224e:	4638      	mov	r0, r7
 80a2250:	f7ff ffb5 	bl	80a21be <_ZN5Print11printNumberEmh>
 80a2254:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a2256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a225c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a225c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a2260:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a2262:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a2264:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a2266:	4617      	mov	r7, r2
 80a2268:	461e      	mov	r6, r3
 80a226a:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a226e:	f002 ff57 	bl	80a5120 <__aeabi_dcmpun>
 80a2272:	b108      	cbz	r0, 80a2278 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2274:	4947      	ldr	r1, [pc, #284]	; (80a2394 <_ZN5Print10printFloatEdh+0x138>)
 80a2276:	e012      	b.n	80a229e <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a2278:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a227c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a2280:	4b45      	ldr	r3, [pc, #276]	; (80a2398 <_ZN5Print10printFloatEdh+0x13c>)
 80a2282:	4638      	mov	r0, r7
 80a2284:	4621      	mov	r1, r4
 80a2286:	f002 ff4b 	bl	80a5120 <__aeabi_dcmpun>
 80a228a:	b968      	cbnz	r0, 80a22a8 <_ZN5Print10printFloatEdh+0x4c>
 80a228c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a2290:	4b41      	ldr	r3, [pc, #260]	; (80a2398 <_ZN5Print10printFloatEdh+0x13c>)
 80a2292:	4638      	mov	r0, r7
 80a2294:	4621      	mov	r1, r4
 80a2296:	f002 ff25 	bl	80a50e4 <__aeabi_dcmple>
 80a229a:	b928      	cbnz	r0, 80a22a8 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a229c:	493f      	ldr	r1, [pc, #252]	; (80a239c <_ZN5Print10printFloatEdh+0x140>)
 80a229e:	4640      	mov	r0, r8
 80a22a0:	f7ff ff60 	bl	80a2164 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a22a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a22a8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a22ac:	4b3c      	ldr	r3, [pc, #240]	; (80a23a0 <_ZN5Print10printFloatEdh+0x144>)
 80a22ae:	4638      	mov	r0, r7
 80a22b0:	4631      	mov	r1, r6
 80a22b2:	f002 ff2b 	bl	80a510c <__aeabi_dcmpgt>
 80a22b6:	b108      	cbz	r0, 80a22bc <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a22b8:	493a      	ldr	r1, [pc, #232]	; (80a23a4 <_ZN5Print10printFloatEdh+0x148>)
 80a22ba:	e7f0      	b.n	80a229e <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a22bc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a22c0:	4b39      	ldr	r3, [pc, #228]	; (80a23a8 <_ZN5Print10printFloatEdh+0x14c>)
 80a22c2:	4638      	mov	r0, r7
 80a22c4:	4631      	mov	r1, r6
 80a22c6:	f002 ff03 	bl	80a50d0 <__aeabi_dcmplt>
 80a22ca:	2800      	cmp	r0, #0
 80a22cc:	d1f4      	bne.n	80a22b8 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a22ce:	2200      	movs	r2, #0
 80a22d0:	2300      	movs	r3, #0
 80a22d2:	4638      	mov	r0, r7
 80a22d4:	4631      	mov	r1, r6
 80a22d6:	f002 fefb 	bl	80a50d0 <__aeabi_dcmplt>
 80a22da:	b138      	cbz	r0, 80a22ec <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a22dc:	212d      	movs	r1, #45	; 0x2d
 80a22de:	4640      	mov	r0, r8
 80a22e0:	f7ff ff54 	bl	80a218c <_ZN5Print5printEc>
     number = -number;
 80a22e4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a22e8:	4604      	mov	r4, r0
 80a22ea:	e000      	b.n	80a22ee <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a22ec:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a22ee:	492f      	ldr	r1, [pc, #188]	; (80a23ac <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a22f0:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a22f4:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a22f6:	fa5f f389 	uxtb.w	r3, r9
 80a22fa:	429d      	cmp	r5, r3
 80a22fc:	d906      	bls.n	80a230c <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a22fe:	2200      	movs	r2, #0
 80a2300:	4b2b      	ldr	r3, [pc, #172]	; (80a23b0 <_ZN5Print10printFloatEdh+0x154>)
 80a2302:	f002 fd9d 	bl	80a4e40 <__aeabi_ddiv>
 80a2306:	f109 0901 	add.w	r9, r9, #1
 80a230a:	e7f4      	b.n	80a22f6 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a230c:	463a      	mov	r2, r7
 80a230e:	4633      	mov	r3, r6
 80a2310:	f002 faba 	bl	80a4888 <__adddf3>
 80a2314:	460f      	mov	r7, r1
 80a2316:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a2318:	f002 ff40 	bl	80a519c <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a231c:	220a      	movs	r2, #10
 80a231e:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a2320:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a2322:	4640      	mov	r0, r8
 80a2324:	f7ff ff4b 	bl	80a21be <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a2328:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a232a:	b37d      	cbz	r5, 80a238c <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a232c:	4648      	mov	r0, r9
 80a232e:	f002 fbe7 	bl	80a4b00 <__aeabi_ui2d>
 80a2332:	4602      	mov	r2, r0
 80a2334:	460b      	mov	r3, r1
 80a2336:	4630      	mov	r0, r6
 80a2338:	4639      	mov	r1, r7
 80a233a:	f002 faa3 	bl	80a4884 <__aeabi_dsub>
 80a233e:	4606      	mov	r6, r0
 80a2340:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2342:	4640      	mov	r0, r8
 80a2344:	491b      	ldr	r1, [pc, #108]	; (80a23b4 <_ZN5Print10printFloatEdh+0x158>)
 80a2346:	f7ff ff0d 	bl	80a2164 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a234a:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a234c:	4b18      	ldr	r3, [pc, #96]	; (80a23b0 <_ZN5Print10printFloatEdh+0x154>)
 80a234e:	2200      	movs	r2, #0
 80a2350:	4630      	mov	r0, r6
 80a2352:	4639      	mov	r1, r7
 80a2354:	f002 fc4a 	bl	80a4bec <__aeabi_dmul>
 80a2358:	460f      	mov	r7, r1
 80a235a:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a235c:	f002 fef6 	bl	80a514c <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a2360:	220a      	movs	r2, #10
 80a2362:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a2364:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a2366:	4640      	mov	r0, r8
 80a2368:	f7ff ff55 	bl	80a2216 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a236c:	4404      	add	r4, r0
    remainder -= toPrint;
 80a236e:	4648      	mov	r0, r9
 80a2370:	f002 fbd6 	bl	80a4b20 <__aeabi_i2d>
 80a2374:	4602      	mov	r2, r0
 80a2376:	460b      	mov	r3, r1
 80a2378:	4630      	mov	r0, r6
 80a237a:	4639      	mov	r1, r7
 80a237c:	f002 fa82 	bl	80a4884 <__aeabi_dsub>
 80a2380:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a2382:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a2386:	4606      	mov	r6, r0
 80a2388:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a238a:	d1df      	bne.n	80a234c <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a238c:	4620      	mov	r0, r4
 80a238e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a2392:	bf00      	nop
 80a2394:	080a6654 	.word	0x080a6654
 80a2398:	7fefffff 	.word	0x7fefffff
 80a239c:	080a665c 	.word	0x080a665c
 80a23a0:	41efffff 	.word	0x41efffff
 80a23a4:	080a6658 	.word	0x080a6658
 80a23a8:	c1efffff 	.word	0xc1efffff
 80a23ac:	3fe00000 	.word	0x3fe00000
 80a23b0:	40240000 	.word	0x40240000
 80a23b4:	080a623c 	.word	0x080a623c

080a23b8 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a23b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a23ba:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a23be:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a23c0:	9100      	str	r1, [sp, #0]
 80a23c2:	f7ff ff4b 	bl	80a225c <_ZN5Print10printFloatEdh>
 80a23c6:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a23c8:	4628      	mov	r0, r5
 80a23ca:	f7ff fee2 	bl	80a2192 <_ZN5Print7printlnEv>
  return n;
}
 80a23ce:	4420      	add	r0, r4
 80a23d0:	b003      	add	sp, #12
 80a23d2:	bd30      	pop	{r4, r5, pc}

080a23d4 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a23d4:	b40c      	push	{r2, r3}
 80a23d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a23da:	b087      	sub	sp, #28
 80a23dc:	af00      	add	r7, sp, #0
 80a23de:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a23e2:	f854 9b04 	ldr.w	r9, [r4], #4
 80a23e6:	4605      	mov	r5, r0
 80a23e8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a23ea:	4623      	mov	r3, r4
 80a23ec:	464a      	mov	r2, r9
 80a23ee:	2114      	movs	r1, #20
 80a23f0:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a23f2:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a23f4:	f7ff f9f4 	bl	80a17e0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a23f8:	2813      	cmp	r0, #19
 80a23fa:	d805      	bhi.n	80a2408 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a23fc:	1d39      	adds	r1, r7, #4
 80a23fe:	4628      	mov	r0, r5
 80a2400:	f7ff feb0 	bl	80a2164 <_ZN5Print5writeEPKc>
 80a2404:	4604      	mov	r4, r0
 80a2406:	e013      	b.n	80a2430 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a2408:	f100 0308 	add.w	r3, r0, #8
 80a240c:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a2410:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a2412:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a2416:	1c41      	adds	r1, r0, #1
 80a2418:	4623      	mov	r3, r4
 80a241a:	464a      	mov	r2, r9
 80a241c:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a241e:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a2420:	f7ff f9de 	bl	80a17e0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2424:	4669      	mov	r1, sp
 80a2426:	4628      	mov	r0, r5
 80a2428:	f7ff fe9c 	bl	80a2164 <_ZN5Print5writeEPKc>
 80a242c:	4604      	mov	r4, r0
 80a242e:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a2430:	b11e      	cbz	r6, 80a243a <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a2432:	4628      	mov	r0, r5
 80a2434:	f7ff fead 	bl	80a2192 <_ZN5Print7printlnEv>
 80a2438:	4404      	add	r4, r0
    return n;
}
 80a243a:	4620      	mov	r0, r4
 80a243c:	371c      	adds	r7, #28
 80a243e:	46bd      	mov	sp, r7
 80a2440:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2444:	b002      	add	sp, #8
 80a2446:	4770      	bx	lr

080a2448 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2448:	b510      	push	{r4, lr}
 80a244a:	4604      	mov	r4, r0
 80a244c:	f7fd ff06 	bl	80a025c <_ZNSt14_Function_baseD1Ev>
 80a2450:	4620      	mov	r0, r4
 80a2452:	bd10      	pop	{r4, pc}

080a2454 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2454:	4803      	ldr	r0, [pc, #12]	; (80a2464 <_GLOBAL__sub_I_RGB+0x10>)
 80a2456:	2300      	movs	r3, #0
 80a2458:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a245a:	4a03      	ldr	r2, [pc, #12]	; (80a2468 <_GLOBAL__sub_I_RGB+0x14>)
 80a245c:	4903      	ldr	r1, [pc, #12]	; (80a246c <_GLOBAL__sub_I_RGB+0x18>)
 80a245e:	f000 bc39 	b.w	80a2cd4 <__aeabi_atexit>
 80a2462:	bf00      	nop
 80a2464:	20000530 	.word	0x20000530
 80a2468:	200003e0 	.word	0x200003e0
 80a246c:	080a2449 	.word	0x080a2449

080a2470 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a2470:	4770      	bx	lr

080a2472 <_ZN8SPIClassD0Ev>:
 80a2472:	b510      	push	{r4, lr}
 80a2474:	4604      	mov	r4, r0
 80a2476:	2110      	movs	r1, #16
 80a2478:	f000 fc31 	bl	80a2cde <_ZdlPvj>
 80a247c:	4620      	mov	r0, r4
 80a247e:	bd10      	pop	{r4, pc}

080a2480 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a2480:	b570      	push	{r4, r5, r6, lr}
 80a2482:	4604      	mov	r4, r0
 80a2484:	460e      	mov	r6, r1
 80a2486:	4b07      	ldr	r3, [pc, #28]	; (80a24a4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a2488:	2500      	movs	r5, #0
 80a248a:	6003      	str	r3, [r0, #0]
 80a248c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a2490:	f7fe ff50 	bl	80a1334 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a2494:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a2496:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a2498:	f7ff f806 	bl	80a14a8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a249c:	60a5      	str	r5, [r4, #8]
}
 80a249e:	4620      	mov	r0, r4
 80a24a0:	bd70      	pop	{r4, r5, r6, pc}
 80a24a2:	bf00      	nop
 80a24a4:	080a6668 	.word	0x080a6668

080a24a8 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a24a8:	7900      	ldrb	r0, [r0, #4]
 80a24aa:	f7ff b805 	b.w	80a14b8 <HAL_SPI_Is_Enabled>

080a24ae <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a24ae:	b510      	push	{r4, lr}
 80a24b0:	4604      	mov	r4, r0
{
	free(buffer);
 80a24b2:	6800      	ldr	r0, [r0, #0]
 80a24b4:	f7ff f974 	bl	80a17a0 <free>
}
 80a24b8:	4620      	mov	r0, r4
 80a24ba:	bd10      	pop	{r4, pc}

080a24bc <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a24bc:	b510      	push	{r4, lr}
 80a24be:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a24c0:	6800      	ldr	r0, [r0, #0]
 80a24c2:	b108      	cbz	r0, 80a24c8 <_ZN6String10invalidateEv+0xc>
 80a24c4:	f7ff f96c 	bl	80a17a0 <free>
	buffer = NULL;
 80a24c8:	2300      	movs	r3, #0
 80a24ca:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a24cc:	60a3      	str	r3, [r4, #8]
 80a24ce:	6063      	str	r3, [r4, #4]
 80a24d0:	bd10      	pop	{r4, pc}

080a24d2 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a24d2:	b538      	push	{r3, r4, r5, lr}
 80a24d4:	4604      	mov	r4, r0
 80a24d6:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a24d8:	6800      	ldr	r0, [r0, #0]
 80a24da:	3101      	adds	r1, #1
 80a24dc:	f7ff f968 	bl	80a17b0 <realloc>
	if (newbuffer) {
 80a24e0:	b110      	cbz	r0, 80a24e8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a24e2:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a24e6:	2001      	movs	r0, #1
	}
	return 0;
}
 80a24e8:	bd38      	pop	{r3, r4, r5, pc}

080a24ea <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a24ea:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a24ec:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a24ee:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a24f0:	b113      	cbz	r3, 80a24f8 <_ZN6String7reserveEj+0xe>
 80a24f2:	6843      	ldr	r3, [r0, #4]
 80a24f4:	428b      	cmp	r3, r1
 80a24f6:	d207      	bcs.n	80a2508 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a24f8:	4620      	mov	r0, r4
 80a24fa:	f7ff ffea 	bl	80a24d2 <_ZN6String12changeBufferEj>
 80a24fe:	b120      	cbz	r0, 80a250a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a2500:	68a3      	ldr	r3, [r4, #8]
 80a2502:	b90b      	cbnz	r3, 80a2508 <_ZN6String7reserveEj+0x1e>
 80a2504:	6822      	ldr	r2, [r4, #0]
 80a2506:	7013      	strb	r3, [r2, #0]
 80a2508:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a250a:	bd10      	pop	{r4, pc}

080a250c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a250c:	b570      	push	{r4, r5, r6, lr}
 80a250e:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a2510:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2512:	4604      	mov	r4, r0
 80a2514:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a2516:	f7ff ffe8 	bl	80a24ea <_ZN6String7reserveEj>
 80a251a:	b918      	cbnz	r0, 80a2524 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a251c:	4620      	mov	r0, r4
 80a251e:	f7ff ffcd 	bl	80a24bc <_ZN6String10invalidateEv>
		return *this;
 80a2522:	e009      	b.n	80a2538 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a2524:	462a      	mov	r2, r5
 80a2526:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a2528:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a252a:	6820      	ldr	r0, [r4, #0]
 80a252c:	f003 fa46 	bl	80a59bc <memcpy>
	buffer[len] = 0;
 80a2530:	6822      	ldr	r2, [r4, #0]
 80a2532:	68a3      	ldr	r3, [r4, #8]
 80a2534:	2100      	movs	r1, #0
 80a2536:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a2538:	4620      	mov	r0, r4
 80a253a:	bd70      	pop	{r4, r5, r6, pc}

080a253c <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a253c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a253e:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a2540:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2542:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a2544:	6043      	str	r3, [r0, #4]
	len = 0;
 80a2546:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2548:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a254a:	460d      	mov	r5, r1
 80a254c:	b139      	cbz	r1, 80a255e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a254e:	4608      	mov	r0, r1
 80a2550:	f003 fa9d 	bl	80a5a8e <strlen>
 80a2554:	4629      	mov	r1, r5
 80a2556:	4602      	mov	r2, r0
 80a2558:	4620      	mov	r0, r4
 80a255a:	f7ff ffd7 	bl	80a250c <_ZN6String4copyEPKcj>
}
 80a255e:	4620      	mov	r0, r4
 80a2560:	bd38      	pop	{r3, r4, r5, pc}

080a2562 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a2562:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a2564:	b510      	push	{r4, lr}
 80a2566:	460b      	mov	r3, r1
 80a2568:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a256a:	d007      	beq.n	80a257c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a256c:	6809      	ldr	r1, [r1, #0]
 80a256e:	b119      	cbz	r1, 80a2578 <_ZN6StringaSERKS_+0x16>
 80a2570:	689a      	ldr	r2, [r3, #8]
 80a2572:	f7ff ffcb 	bl	80a250c <_ZN6String4copyEPKcj>
 80a2576:	e001      	b.n	80a257c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a2578:	f7ff ffa0 	bl	80a24bc <_ZN6String10invalidateEv>

	return *this;
}
 80a257c:	4620      	mov	r0, r4
 80a257e:	bd10      	pop	{r4, pc}

080a2580 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a2580:	b510      	push	{r4, lr}
 80a2582:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2584:	2300      	movs	r3, #0
 80a2586:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a2588:	6043      	str	r3, [r0, #4]
	len = 0;
 80a258a:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a258c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a258e:	f7ff ffe8 	bl	80a2562 <_ZN6StringaSERKS_>
}
 80a2592:	4620      	mov	r0, r4
 80a2594:	bd10      	pop	{r4, pc}

080a2596 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a2596:	b538      	push	{r3, r4, r5, lr}
 80a2598:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a259a:	460c      	mov	r4, r1
 80a259c:	b141      	cbz	r1, 80a25b0 <_ZN6StringaSEPKc+0x1a>
 80a259e:	4608      	mov	r0, r1
 80a25a0:	f003 fa75 	bl	80a5a8e <strlen>
 80a25a4:	4621      	mov	r1, r4
 80a25a6:	4602      	mov	r2, r0
 80a25a8:	4628      	mov	r0, r5
 80a25aa:	f7ff ffaf 	bl	80a250c <_ZN6String4copyEPKcj>
 80a25ae:	e001      	b.n	80a25b4 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a25b0:	f7ff ff84 	bl	80a24bc <_ZN6String10invalidateEv>

	return *this;
}
 80a25b4:	4628      	mov	r0, r5
 80a25b6:	bd38      	pop	{r3, r4, r5, pc}

080a25b8 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a25b8:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a25ba:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a25bc:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a25be:	b912      	cbnz	r2, 80a25c6 <_ZNK6String6equalsEPKc+0xe>
 80a25c0:	b919      	cbnz	r1, 80a25ca <_ZNK6String6equalsEPKc+0x12>
 80a25c2:	2001      	movs	r0, #1
 80a25c4:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a25c6:	b911      	cbnz	r1, 80a25ce <_ZNK6String6equalsEPKc+0x16>
 80a25c8:	6803      	ldr	r3, [r0, #0]
 80a25ca:	7818      	ldrb	r0, [r3, #0]
 80a25cc:	e002      	b.n	80a25d4 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a25ce:	6800      	ldr	r0, [r0, #0]
 80a25d0:	f003 fa30 	bl	80a5a34 <strcmp>
 80a25d4:	fab0 f080 	clz	r0, r0
 80a25d8:	0940      	lsrs	r0, r0, #5
}
 80a25da:	bd08      	pop	{r3, pc}

080a25dc <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a25dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a25e0:	4b03      	ldr	r3, [pc, #12]	; (80a25f0 <_GLOBAL__sub_I_System+0x14>)
 80a25e2:	2000      	movs	r0, #0
 80a25e4:	7018      	strb	r0, [r3, #0]
 80a25e6:	8058      	strh	r0, [r3, #2]
 80a25e8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a25ea:	f7fe bffd 	b.w	80a15e8 <set_system_mode>
 80a25ee:	bf00      	nop
 80a25f0:	20000540 	.word	0x20000540

080a25f4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80a25f4:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a25f6:	2000      	movs	r0, #0
 80a25f8:	f7ff f86a 	bl	80a16d0 <spark_sync_time_pending>
 80a25fc:	b128      	cbz	r0, 80a260a <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a25fe:	f7ff f84f 	bl	80a16a0 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a2602:	f080 0001 	eor.w	r0, r0, #1
 80a2606:	b2c0      	uxtb	r0, r0
 80a2608:	bd08      	pop	{r3, pc}
 80a260a:	2001      	movs	r0, #1
    }
 80a260c:	bd08      	pop	{r3, pc}
	...

080a2610 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a2610:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 80a2612:	4b0e      	ldr	r3, [pc, #56]	; (80a264c <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a2614:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 80a2616:	681b      	ldr	r3, [r3, #0]
 80a2618:	a802      	add	r0, sp, #8
 80a261a:	4419      	add	r1, r3
 80a261c:	4b0c      	ldr	r3, [pc, #48]	; (80a2650 <_ZN9TimeClass7timeStrEl+0x40>)
 80a261e:	681b      	ldr	r3, [r3, #0]
 80a2620:	4419      	add	r1, r3
 80a2622:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 80a2626:	f003 f8d1 	bl	80a57cc <localtime>
        char* ascstr = asctime(calendar_time);
 80a262a:	f003 f885 	bl	80a5738 <asctime>
 80a262e:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 80a2630:	f003 fa2d 	bl	80a5a8e <strlen>
        ascstr[len-1] = 0; // remove final newline
 80a2634:	2300      	movs	r3, #0
 80a2636:	4428      	add	r0, r5
 80a2638:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 80a263c:	4629      	mov	r1, r5
 80a263e:	4620      	mov	r0, r4
 80a2640:	f7ff ff7c 	bl	80a253c <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a2644:	4620      	mov	r0, r4
 80a2646:	b003      	add	sp, #12
 80a2648:	bd30      	pop	{r4, r5, pc}
 80a264a:	bf00      	nop
 80a264c:	20000550 	.word	0x20000550
 80a2650:	2000054c 	.word	0x2000054c

080a2654 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a2654:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a2656:	2000      	movs	r0, #0
 80a2658:	f7fe fea4 	bl	80a13a4 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a265c:	4604      	mov	r4, r0
 80a265e:	b968      	cbnz	r0, 80a267c <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a2660:	f7fe ffba 	bl	80a15d8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a2664:	2801      	cmp	r0, #1
 80a2666:	d10b      	bne.n	80a2680 <_ZN9TimeClass7isValidEv+0x2c>
 80a2668:	4620      	mov	r0, r4
 80a266a:	f7fe ffe5 	bl	80a1638 <system_thread_get_state>
 80a266e:	b938      	cbnz	r0, 80a2680 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a2670:	f7ff ffc0 	bl	80a25f4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a2674:	b930      	cbnz	r0, 80a2684 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a2676:	f7ff f80b 	bl	80a1690 <spark_process>
 80a267a:	e7f9      	b.n	80a2670 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a267c:	2001      	movs	r0, #1
 80a267e:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a2680:	2000      	movs	r0, #0
 80a2682:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a2684:	f7ff ffb6 	bl	80a25f4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a2688:	2000      	movs	r0, #0
 80a268a:	f7fe fe8b 	bl	80a13a4 <HAL_RTC_Time_Is_Valid>
 80a268e:	3000      	adds	r0, #0
 80a2690:	bf18      	it	ne
 80a2692:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a2694:	bd10      	pop	{r4, pc}

080a2696 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a2696:	b508      	push	{r3, lr}
    (void)isValid();
 80a2698:	f7ff ffdc 	bl	80a2654 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a269c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a26a0:	f7fe be78 	b.w	80a1394 <HAL_RTC_Get_UnixTime>

080a26a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a26a4:	4b02      	ldr	r3, [pc, #8]	; (80a26b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a26a6:	681a      	ldr	r2, [r3, #0]
 80a26a8:	4b02      	ldr	r3, [pc, #8]	; (80a26b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a26aa:	601a      	str	r2, [r3, #0]
 80a26ac:	4770      	bx	lr
 80a26ae:	bf00      	nop
 80a26b0:	20000324 	.word	0x20000324
 80a26b4:	20000548 	.word	0x20000548

080a26b8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a26b8:	4770      	bx	lr

080a26ba <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a26ba:	7441      	strb	r1, [r0, #17]
 80a26bc:	4770      	bx	lr

080a26be <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a26be:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a26c0:	7c00      	ldrb	r0, [r0, #16]
 80a26c2:	f7fe ff39 	bl	80a1538 <HAL_USART_Available_Data_For_Write>
}
 80a26c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a26ca:	bd08      	pop	{r3, pc}

080a26cc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a26cc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a26ce:	7c00      	ldrb	r0, [r0, #16]
 80a26d0:	f7fe ff0a 	bl	80a14e8 <HAL_USART_Available_Data>
}
 80a26d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a26d8:	bd08      	pop	{r3, pc}

080a26da <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a26da:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a26dc:	7c00      	ldrb	r0, [r0, #16]
 80a26de:	f7fe ff13 	bl	80a1508 <HAL_USART_Peek_Data>
}
 80a26e2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a26e6:	bf28      	it	cs
 80a26e8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a26ec:	bd08      	pop	{r3, pc}

080a26ee <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a26ee:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a26f0:	7c00      	ldrb	r0, [r0, #16]
 80a26f2:	f7fe ff01 	bl	80a14f8 <HAL_USART_Read_Data>
}
 80a26f6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a26fa:	bf28      	it	cs
 80a26fc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2700:	bd08      	pop	{r3, pc}

080a2702 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2702:	7c00      	ldrb	r0, [r0, #16]
 80a2704:	f7fe bf08 	b.w	80a1518 <HAL_USART_Flush_Data>

080a2708 <_ZN11USARTSerialD0Ev>:
 80a2708:	b510      	push	{r4, lr}
 80a270a:	4604      	mov	r4, r0
 80a270c:	2114      	movs	r1, #20
 80a270e:	f000 fae6 	bl	80a2cde <_ZdlPvj>
 80a2712:	4620      	mov	r0, r4
 80a2714:	bd10      	pop	{r4, pc}

080a2716 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2716:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2718:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a271a:	4604      	mov	r4, r0
 80a271c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a271e:	b925      	cbnz	r5, 80a272a <_ZN11USARTSerial5writeEh+0x14>
 80a2720:	7c00      	ldrb	r0, [r0, #16]
 80a2722:	f7fe ff09 	bl	80a1538 <HAL_USART_Available_Data_For_Write>
 80a2726:	2800      	cmp	r0, #0
 80a2728:	dd05      	ble.n	80a2736 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a272a:	4631      	mov	r1, r6
 80a272c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a272e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2732:	f7fe bed1 	b.w	80a14d8 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2736:	4628      	mov	r0, r5
 80a2738:	bd70      	pop	{r4, r5, r6, pc}
	...

080a273c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a273c:	b510      	push	{r4, lr}
 80a273e:	4604      	mov	r4, r0
 80a2740:	4608      	mov	r0, r1
 80a2742:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2744:	2200      	movs	r2, #0
 80a2746:	6062      	str	r2, [r4, #4]
 80a2748:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a274c:	60a2      	str	r2, [r4, #8]
 80a274e:	4a05      	ldr	r2, [pc, #20]	; (80a2764 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2750:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2752:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2754:	2201      	movs	r2, #1
 80a2756:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2758:	461a      	mov	r2, r3
 80a275a:	f7fe feb5 	bl	80a14c8 <HAL_USART_Init>
}
 80a275e:	4620      	mov	r0, r4
 80a2760:	bd10      	pop	{r4, pc}
 80a2762:	bf00      	nop
 80a2764:	080a66a0 	.word	0x080a66a0

080a2768 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2768:	7c00      	ldrb	r0, [r0, #16]
 80a276a:	f7fe bedd 	b.w	80a1528 <HAL_USART_Is_Enabled>
	...

080a2770 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2770:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2772:	4d0c      	ldr	r5, [pc, #48]	; (80a27a4 <_Z22__fetch_global_Serial1v+0x34>)
 80a2774:	6829      	ldr	r1, [r5, #0]
 80a2776:	f011 0401 	ands.w	r4, r1, #1
 80a277a:	d111      	bne.n	80a27a0 <_Z22__fetch_global_Serial1v+0x30>
 80a277c:	4628      	mov	r0, r5
 80a277e:	f7fd fc90 	bl	80a00a2 <__cxa_guard_acquire>
 80a2782:	b168      	cbz	r0, 80a27a0 <_Z22__fetch_global_Serial1v+0x30>
 80a2784:	4a08      	ldr	r2, [pc, #32]	; (80a27a8 <_Z22__fetch_global_Serial1v+0x38>)
 80a2786:	4621      	mov	r1, r4
 80a2788:	4b08      	ldr	r3, [pc, #32]	; (80a27ac <_Z22__fetch_global_Serial1v+0x3c>)
 80a278a:	4809      	ldr	r0, [pc, #36]	; (80a27b0 <_Z22__fetch_global_Serial1v+0x40>)
 80a278c:	f7ff ffd6 	bl	80a273c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2790:	4628      	mov	r0, r5
 80a2792:	f7fd fc8b 	bl	80a00ac <__cxa_guard_release>
 80a2796:	4a07      	ldr	r2, [pc, #28]	; (80a27b4 <_Z22__fetch_global_Serial1v+0x44>)
 80a2798:	4907      	ldr	r1, [pc, #28]	; (80a27b8 <_Z22__fetch_global_Serial1v+0x48>)
 80a279a:	4805      	ldr	r0, [pc, #20]	; (80a27b0 <_Z22__fetch_global_Serial1v+0x40>)
 80a279c:	f000 fa9a 	bl	80a2cd4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a27a0:	4803      	ldr	r0, [pc, #12]	; (80a27b0 <_Z22__fetch_global_Serial1v+0x40>)
 80a27a2:	bd38      	pop	{r3, r4, r5, pc}
 80a27a4:	200005ec 	.word	0x200005ec
 80a27a8:	200005f0 	.word	0x200005f0
 80a27ac:	20000568 	.word	0x20000568
 80a27b0:	20000554 	.word	0x20000554
 80a27b4:	200003e0 	.word	0x200003e0
 80a27b8:	080a26b9 	.word	0x080a26b9

080a27bc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a27bc:	7441      	strb	r1, [r0, #17]
 80a27be:	4770      	bx	lr

080a27c0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a27c0:	4770      	bx	lr

080a27c2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a27c2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a27c4:	2100      	movs	r1, #0
 80a27c6:	7c00      	ldrb	r0, [r0, #16]
 80a27c8:	f7fe fede 	bl	80a1588 <HAL_USB_USART_Receive_Data>
}
 80a27cc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a27d0:	bf28      	it	cs
 80a27d2:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a27d6:	bd08      	pop	{r3, pc}

080a27d8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a27d8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a27da:	2101      	movs	r1, #1
 80a27dc:	7c00      	ldrb	r0, [r0, #16]
 80a27de:	f7fe fed3 	bl	80a1588 <HAL_USB_USART_Receive_Data>
}
 80a27e2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a27e6:	bf28      	it	cs
 80a27e8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a27ec:	bd08      	pop	{r3, pc}

080a27ee <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a27ee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a27f0:	7c00      	ldrb	r0, [r0, #16]
 80a27f2:	f7fe fec1 	bl	80a1578 <HAL_USB_USART_Available_Data_For_Write>
}
 80a27f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a27fa:	bd08      	pop	{r3, pc}

080a27fc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a27fc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a27fe:	7c00      	ldrb	r0, [r0, #16]
 80a2800:	f7fe feb2 	bl	80a1568 <HAL_USB_USART_Available_Data>
}
 80a2804:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2808:	bd08      	pop	{r3, pc}

080a280a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a280a:	7c00      	ldrb	r0, [r0, #16]
 80a280c:	f7fe becc 	b.w	80a15a8 <HAL_USB_USART_Flush_Data>

080a2810 <_ZN9USBSerialD0Ev>:
 80a2810:	b510      	push	{r4, lr}
 80a2812:	4604      	mov	r4, r0
 80a2814:	2114      	movs	r1, #20
 80a2816:	f000 fa62 	bl	80a2cde <_ZdlPvj>
 80a281a:	4620      	mov	r0, r4
 80a281c:	bd10      	pop	{r4, pc}

080a281e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a281e:	b538      	push	{r3, r4, r5, lr}
 80a2820:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2822:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2824:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2826:	f7fe fea7 	bl	80a1578 <HAL_USB_USART_Available_Data_For_Write>
 80a282a:	2800      	cmp	r0, #0
 80a282c:	dc01      	bgt.n	80a2832 <_ZN9USBSerial5writeEh+0x14>
 80a282e:	7c60      	ldrb	r0, [r4, #17]
 80a2830:	b128      	cbz	r0, 80a283e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2832:	4629      	mov	r1, r5
 80a2834:	7c20      	ldrb	r0, [r4, #16]
 80a2836:	f7fe feaf 	bl	80a1598 <HAL_USB_USART_Send_Data>
 80a283a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a283e:	bd38      	pop	{r3, r4, r5, pc}

080a2840 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2840:	b510      	push	{r4, lr}
 80a2842:	4604      	mov	r4, r0
 80a2844:	2300      	movs	r3, #0
 80a2846:	6063      	str	r3, [r4, #4]
 80a2848:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a284c:	60a3      	str	r3, [r4, #8]
 80a284e:	4b05      	ldr	r3, [pc, #20]	; (80a2864 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2850:	4608      	mov	r0, r1
 80a2852:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2854:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2856:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2858:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a285a:	4611      	mov	r1, r2
 80a285c:	f7fe fe74 	bl	80a1548 <HAL_USB_USART_Init>
}
 80a2860:	4620      	mov	r0, r4
 80a2862:	bd10      	pop	{r4, pc}
 80a2864:	080a66d0 	.word	0x080a66d0

080a2868 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2868:	2200      	movs	r2, #0
 80a286a:	7c00      	ldrb	r0, [r0, #16]
 80a286c:	f7fe be74 	b.w	80a1558 <HAL_USB_USART_Begin>

080a2870 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2870:	b510      	push	{r4, lr}
 80a2872:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2874:	2214      	movs	r2, #20
 80a2876:	2100      	movs	r1, #0
 80a2878:	f003 f8ab 	bl	80a59d2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a287c:	4b05      	ldr	r3, [pc, #20]	; (80a2894 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a287e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2880:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2882:	4b05      	ldr	r3, [pc, #20]	; (80a2898 <_Z19acquireSerialBufferv+0x28>)
 80a2884:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2886:	f240 1301 	movw	r3, #257	; 0x101
 80a288a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a288c:	2381      	movs	r3, #129	; 0x81
 80a288e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2890:	bd10      	pop	{r4, pc}
 80a2892:	bf00      	nop
 80a2894:	200006f9 	.word	0x200006f9
 80a2898:	20000678 	.word	0x20000678

080a289c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a289c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a289e:	4d0e      	ldr	r5, [pc, #56]	; (80a28d8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a28a0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a28a2:	a801      	add	r0, sp, #4
 80a28a4:	f7ff ffe4 	bl	80a2870 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a28a8:	6829      	ldr	r1, [r5, #0]
 80a28aa:	f011 0401 	ands.w	r4, r1, #1
 80a28ae:	d110      	bne.n	80a28d2 <_Z16_fetch_usbserialv+0x36>
 80a28b0:	4628      	mov	r0, r5
 80a28b2:	f7fd fbf6 	bl	80a00a2 <__cxa_guard_acquire>
 80a28b6:	b160      	cbz	r0, 80a28d2 <_Z16_fetch_usbserialv+0x36>
 80a28b8:	aa01      	add	r2, sp, #4
 80a28ba:	4621      	mov	r1, r4
 80a28bc:	4807      	ldr	r0, [pc, #28]	; (80a28dc <_Z16_fetch_usbserialv+0x40>)
 80a28be:	f7ff ffbf 	bl	80a2840 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a28c2:	4628      	mov	r0, r5
 80a28c4:	f7fd fbf2 	bl	80a00ac <__cxa_guard_release>
 80a28c8:	4a05      	ldr	r2, [pc, #20]	; (80a28e0 <_Z16_fetch_usbserialv+0x44>)
 80a28ca:	4906      	ldr	r1, [pc, #24]	; (80a28e4 <_Z16_fetch_usbserialv+0x48>)
 80a28cc:	4803      	ldr	r0, [pc, #12]	; (80a28dc <_Z16_fetch_usbserialv+0x40>)
 80a28ce:	f000 fa01 	bl	80a2cd4 <__aeabi_atexit>
	return _usbserial;
}
 80a28d2:	4802      	ldr	r0, [pc, #8]	; (80a28dc <_Z16_fetch_usbserialv+0x40>)
 80a28d4:	b007      	add	sp, #28
 80a28d6:	bd30      	pop	{r4, r5, pc}
 80a28d8:	20000674 	.word	0x20000674
 80a28dc:	200007fc 	.word	0x200007fc
 80a28e0:	200003e0 	.word	0x200003e0
 80a28e4:	080a27c1 	.word	0x080a27c1

080a28e8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a28e8:	b510      	push	{r4, lr}
 80a28ea:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a28ec:	2214      	movs	r2, #20
 80a28ee:	2100      	movs	r1, #0
 80a28f0:	f003 f86f 	bl	80a59d2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a28f4:	4b05      	ldr	r3, [pc, #20]	; (80a290c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a28f6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a28f8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a28fa:	4b05      	ldr	r3, [pc, #20]	; (80a2910 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a28fc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a28fe:	f240 1301 	movw	r3, #257	; 0x101
 80a2902:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2904:	2381      	movs	r3, #129	; 0x81
 80a2906:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2908:	bd10      	pop	{r4, pc}
 80a290a:	bf00      	nop
 80a290c:	200008ac 	.word	0x200008ac
 80a2910:	20000814 	.word	0x20000814

080a2914 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2914:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2916:	4c0e      	ldr	r4, [pc, #56]	; (80a2950 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2918:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a291a:	a801      	add	r0, sp, #4
 80a291c:	f7ff ffe4 	bl	80a28e8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2920:	6823      	ldr	r3, [r4, #0]
 80a2922:	07db      	lsls	r3, r3, #31
 80a2924:	d410      	bmi.n	80a2948 <_Z17_fetch_usbserial1v+0x34>
 80a2926:	4620      	mov	r0, r4
 80a2928:	f7fd fbbb 	bl	80a00a2 <__cxa_guard_acquire>
 80a292c:	b160      	cbz	r0, 80a2948 <_Z17_fetch_usbserial1v+0x34>
 80a292e:	aa01      	add	r2, sp, #4
 80a2930:	2101      	movs	r1, #1
 80a2932:	4808      	ldr	r0, [pc, #32]	; (80a2954 <_Z17_fetch_usbserial1v+0x40>)
 80a2934:	f7ff ff84 	bl	80a2840 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2938:	4620      	mov	r0, r4
 80a293a:	f7fd fbb7 	bl	80a00ac <__cxa_guard_release>
 80a293e:	4a06      	ldr	r2, [pc, #24]	; (80a2958 <_Z17_fetch_usbserial1v+0x44>)
 80a2940:	4906      	ldr	r1, [pc, #24]	; (80a295c <_Z17_fetch_usbserial1v+0x48>)
 80a2942:	4804      	ldr	r0, [pc, #16]	; (80a2954 <_Z17_fetch_usbserial1v+0x40>)
 80a2944:	f000 f9c6 	bl	80a2cd4 <__aeabi_atexit>
  return _usbserial1;
}
 80a2948:	4802      	ldr	r0, [pc, #8]	; (80a2954 <_Z17_fetch_usbserial1v+0x40>)
 80a294a:	b006      	add	sp, #24
 80a294c:	bd10      	pop	{r4, pc}
 80a294e:	bf00      	nop
 80a2950:	20000810 	.word	0x20000810
 80a2954:	20000898 	.word	0x20000898
 80a2958:	200003e0 	.word	0x200003e0
 80a295c:	080a27c1 	.word	0x080a27c1

080a2960 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2960:	2200      	movs	r2, #0
 80a2962:	4611      	mov	r1, r2
 80a2964:	6840      	ldr	r0, [r0, #4]
 80a2966:	f7fe bedb 	b.w	80a1720 <network_ready>

080a296a <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a296a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a296c:	4616      	mov	r6, r2
 80a296e:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2970:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2972:	460f      	mov	r7, r1
 80a2974:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a2976:	2100      	movs	r1, #0
 80a2978:	a803      	add	r0, sp, #12
 80a297a:	f003 f82a 	bl	80a59d2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a297e:	4630      	mov	r0, r6
 80a2980:	f003 f885 	bl	80a5a8e <strlen>
 80a2984:	2500      	movs	r5, #0
 80a2986:	9500      	str	r5, [sp, #0]
 80a2988:	b281      	uxth	r1, r0
 80a298a:	687b      	ldr	r3, [r7, #4]
 80a298c:	aa03      	add	r2, sp, #12
 80a298e:	4630      	mov	r0, r6
 80a2990:	f7fe fe12 	bl	80a15b8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2994:	b120      	cbz	r0, 80a29a0 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a2996:	4629      	mov	r1, r5
 80a2998:	4620      	mov	r0, r4
 80a299a:	f7ff fb3d 	bl	80a2018 <_ZN9IPAddressC1Em>
 80a299e:	e003      	b.n	80a29a8 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a29a0:	a903      	add	r1, sp, #12
 80a29a2:	4620      	mov	r0, r4
 80a29a4:	f7ff fb26 	bl	80a1ff4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a29a8:	4620      	mov	r0, r4
 80a29aa:	b009      	add	sp, #36	; 0x24
 80a29ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a29ae <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a29ae:	2200      	movs	r2, #0
 80a29b0:	4611      	mov	r1, r2
 80a29b2:	6840      	ldr	r0, [r0, #4]
 80a29b4:	f7fe bed4 	b.w	80a1760 <network_listening>

080a29b8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a29b8:	2200      	movs	r2, #0
 80a29ba:	4611      	mov	r1, r2
 80a29bc:	6840      	ldr	r0, [r0, #4]
 80a29be:	f7fe bedf 	b.w	80a1780 <network_get_listen_timeout>

080a29c2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a29c2:	2200      	movs	r2, #0
 80a29c4:	6840      	ldr	r0, [r0, #4]
 80a29c6:	f7fe bed3 	b.w	80a1770 <network_set_listen_timeout>

080a29ca <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a29ca:	2200      	movs	r2, #0
 80a29cc:	f081 0101 	eor.w	r1, r1, #1
 80a29d0:	6840      	ldr	r0, [r0, #4]
 80a29d2:	f7fe bebd 	b.w	80a1750 <network_listen>

080a29d6 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a29d6:	2300      	movs	r3, #0
 80a29d8:	461a      	mov	r2, r3
 80a29da:	4619      	mov	r1, r3
 80a29dc:	6840      	ldr	r0, [r0, #4]
 80a29de:	f7fe beaf 	b.w	80a1740 <network_off>

080a29e2 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a29e2:	2300      	movs	r3, #0
 80a29e4:	461a      	mov	r2, r3
 80a29e6:	4619      	mov	r1, r3
 80a29e8:	6840      	ldr	r0, [r0, #4]
 80a29ea:	f7fe bea1 	b.w	80a1730 <network_on>

080a29ee <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a29ee:	2200      	movs	r2, #0
 80a29f0:	4611      	mov	r1, r2
 80a29f2:	6840      	ldr	r0, [r0, #4]
 80a29f4:	f7fe be84 	b.w	80a1700 <network_connecting>

080a29f8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a29f8:	2200      	movs	r2, #0
 80a29fa:	2102      	movs	r1, #2
 80a29fc:	6840      	ldr	r0, [r0, #4]
 80a29fe:	f7fe be87 	b.w	80a1710 <network_disconnect>

080a2a02 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a2a02:	2300      	movs	r3, #0
 80a2a04:	461a      	mov	r2, r3
 80a2a06:	6840      	ldr	r0, [r0, #4]
 80a2a08:	f7fe be72 	b.w	80a16f0 <network_connect>

080a2a0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a2a0c:	4b02      	ldr	r3, [pc, #8]	; (80a2a18 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2a0e:	2204      	movs	r2, #4
 80a2a10:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2a12:	4a02      	ldr	r2, [pc, #8]	; (80a2a1c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2a14:	601a      	str	r2, [r3, #0]
 80a2a16:	4770      	bx	lr
 80a2a18:	200009b0 	.word	0x200009b0
 80a2a1c:	080a6700 	.word	0x080a6700

080a2a20 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2a20:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2a22:	4b14      	ldr	r3, [pc, #80]	; (80a2a74 <serialEventRun+0x54>)
 80a2a24:	b133      	cbz	r3, 80a2a34 <serialEventRun+0x14>
 80a2a26:	f7ff ff39 	bl	80a289c <_Z16_fetch_usbserialv>
 80a2a2a:	6803      	ldr	r3, [r0, #0]
 80a2a2c:	691b      	ldr	r3, [r3, #16]
 80a2a2e:	4798      	blx	r3
 80a2a30:	2800      	cmp	r0, #0
 80a2a32:	dc16      	bgt.n	80a2a62 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2a34:	4b10      	ldr	r3, [pc, #64]	; (80a2a78 <serialEventRun+0x58>)
 80a2a36:	b133      	cbz	r3, 80a2a46 <serialEventRun+0x26>
 80a2a38:	f7ff fe9a 	bl	80a2770 <_Z22__fetch_global_Serial1v>
 80a2a3c:	6803      	ldr	r3, [r0, #0]
 80a2a3e:	691b      	ldr	r3, [r3, #16]
 80a2a40:	4798      	blx	r3
 80a2a42:	2800      	cmp	r0, #0
 80a2a44:	dc10      	bgt.n	80a2a68 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2a46:	4b0d      	ldr	r3, [pc, #52]	; (80a2a7c <serialEventRun+0x5c>)
 80a2a48:	b10b      	cbz	r3, 80a2a4e <serialEventRun+0x2e>
 80a2a4a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2a4e:	4b0c      	ldr	r3, [pc, #48]	; (80a2a80 <serialEventRun+0x60>)
 80a2a50:	b17b      	cbz	r3, 80a2a72 <serialEventRun+0x52>
 80a2a52:	f7ff ff5f 	bl	80a2914 <_Z17_fetch_usbserial1v>
 80a2a56:	6803      	ldr	r3, [r0, #0]
 80a2a58:	691b      	ldr	r3, [r3, #16]
 80a2a5a:	4798      	blx	r3
 80a2a5c:	2800      	cmp	r0, #0
 80a2a5e:	dc06      	bgt.n	80a2a6e <serialEventRun+0x4e>
 80a2a60:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2a62:	f3af 8000 	nop.w
 80a2a66:	e7e5      	b.n	80a2a34 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2a68:	f3af 8000 	nop.w
 80a2a6c:	e7eb      	b.n	80a2a46 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2a6e:	f3af 8000 	nop.w
 80a2a72:	bd08      	pop	{r3, pc}
	...

080a2a84 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2a84:	b508      	push	{r3, lr}
	serialEventRun();
 80a2a86:	f7ff ffcb 	bl	80a2a20 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2a8a:	f7fe fc7b 	bl	80a1384 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2a8e:	4b01      	ldr	r3, [pc, #4]	; (80a2a94 <_post_loop+0x10>)
 80a2a90:	6018      	str	r0, [r3, #0]
 80a2a92:	bd08      	pop	{r3, pc}
 80a2a94:	200009c0 	.word	0x200009c0

080a2a98 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2a98:	4802      	ldr	r0, [pc, #8]	; (80a2aa4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2a9a:	4a03      	ldr	r2, [pc, #12]	; (80a2aa8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2a9c:	4903      	ldr	r1, [pc, #12]	; (80a2aac <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2a9e:	1a12      	subs	r2, r2, r0
 80a2aa0:	f002 bf8c 	b.w	80a59bc <memcpy>
 80a2aa4:	40024000 	.word	0x40024000
 80a2aa8:	40024004 	.word	0x40024004
 80a2aac:	080a69f0 	.word	0x080a69f0

080a2ab0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2ab0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2ab2:	2300      	movs	r3, #0
 80a2ab4:	9300      	str	r3, [sp, #0]
 80a2ab6:	461a      	mov	r2, r3
 80a2ab8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2abc:	f7fe fdce 	bl	80a165c <system_ctrl_set_result>
}
 80a2ac0:	b003      	add	sp, #12
 80a2ac2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2ac8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2ac8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2aca:	8843      	ldrh	r3, [r0, #2]
 80a2acc:	2b0a      	cmp	r3, #10
 80a2ace:	d008      	beq.n	80a2ae2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2ad0:	2b50      	cmp	r3, #80	; 0x50
 80a2ad2:	d109      	bne.n	80a2ae8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2ad4:	4b09      	ldr	r3, [pc, #36]	; (80a2afc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2ad6:	681b      	ldr	r3, [r3, #0]
 80a2ad8:	b13b      	cbz	r3, 80a2aea <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2ada:	b003      	add	sp, #12
 80a2adc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2ae0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2ae2:	f7ff ffe5 	bl	80a2ab0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2ae6:	e006      	b.n	80a2af6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2ae8:	2300      	movs	r3, #0
 80a2aea:	9300      	str	r3, [sp, #0]
 80a2aec:	461a      	mov	r2, r3
 80a2aee:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2af2:	f7fe fdb3 	bl	80a165c <system_ctrl_set_result>
        break;
    }
}
 80a2af6:	b003      	add	sp, #12
 80a2af8:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2afc:	200009b8 	.word	0x200009b8

080a2b00 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2b00:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2b02:	4c10      	ldr	r4, [pc, #64]	; (80a2b44 <module_user_init_hook+0x44>)
 80a2b04:	4d10      	ldr	r5, [pc, #64]	; (80a2b48 <module_user_init_hook+0x48>)
 80a2b06:	6823      	ldr	r3, [r4, #0]
 80a2b08:	42ab      	cmp	r3, r5
 80a2b0a:	4b10      	ldr	r3, [pc, #64]	; (80a2b4c <module_user_init_hook+0x4c>)
 80a2b0c:	bf0c      	ite	eq
 80a2b0e:	2201      	moveq	r2, #1
 80a2b10:	2200      	movne	r2, #0
 80a2b12:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2b14:	d002      	beq.n	80a2b1c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2b16:	f7ff ffbf 	bl	80a2a98 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2b1a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2b1c:	f7fe fc1a 	bl	80a1354 <HAL_RNG_GetRandomNumber>
 80a2b20:	4604      	mov	r4, r0
    srand(seed);
 80a2b22:	f002 ff5f 	bl	80a59e4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2b26:	4b0a      	ldr	r3, [pc, #40]	; (80a2b50 <module_user_init_hook+0x50>)
 80a2b28:	b113      	cbz	r3, 80a2b30 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a2b2a:	4620      	mov	r0, r4
 80a2b2c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2b30:	2100      	movs	r1, #0
 80a2b32:	4807      	ldr	r0, [pc, #28]	; (80a2b50 <module_user_init_hook+0x50>)
 80a2b34:	f7fe fdd4 	bl	80a16e0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2b3c:	2100      	movs	r1, #0
 80a2b3e:	4805      	ldr	r0, [pc, #20]	; (80a2b54 <module_user_init_hook+0x54>)
 80a2b40:	f7fe bd82 	b.w	80a1648 <system_ctrl_set_app_request_handler>
 80a2b44:	40024000 	.word	0x40024000
 80a2b48:	9a271c1e 	.word	0x9a271c1e
 80a2b4c:	200009bc 	.word	0x200009bc
 80a2b50:	00000000 	.word	0x00000000
 80a2b54:	080a2ac9 	.word	0x080a2ac9

080a2b58 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2b58:	b510      	push	{r4, lr}
 80a2b5a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2b5c:	480f      	ldr	r0, [pc, #60]	; (80a2b9c <pinAvailable+0x44>)
 80a2b5e:	f7ff fca3 	bl	80a24a8 <_ZN8SPIClass9isEnabledEv>
 80a2b62:	b128      	cbz	r0, 80a2b70 <pinAvailable+0x18>
 80a2b64:	f1a4 030d 	sub.w	r3, r4, #13
 80a2b68:	2b02      	cmp	r3, #2
 80a2b6a:	d801      	bhi.n	80a2b70 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2b6c:	2000      	movs	r0, #0
 80a2b6e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2b70:	f000 f856 	bl	80a2c20 <_Z19__fetch_global_Wirev>
 80a2b74:	f7ff f98e 	bl	80a1e94 <_ZN7TwoWire9isEnabledEv>
 80a2b78:	b108      	cbz	r0, 80a2b7e <pinAvailable+0x26>
 80a2b7a:	2c01      	cmp	r4, #1
 80a2b7c:	d9f6      	bls.n	80a2b6c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2b7e:	f7ff fdf7 	bl	80a2770 <_Z22__fetch_global_Serial1v>
 80a2b82:	f7ff fdf1 	bl	80a2768 <_ZN11USARTSerial9isEnabledEv>
 80a2b86:	b118      	cbz	r0, 80a2b90 <pinAvailable+0x38>
 80a2b88:	f1a4 0312 	sub.w	r3, r4, #18
 80a2b8c:	2b01      	cmp	r3, #1
 80a2b8e:	d9ed      	bls.n	80a2b6c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2b90:	2c17      	cmp	r4, #23
 80a2b92:	bf8c      	ite	hi
 80a2b94:	2000      	movhi	r0, #0
 80a2b96:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2b98:	bd10      	pop	{r4, pc}
 80a2b9a:	bf00      	nop
 80a2b9c:	200009f4 	.word	0x200009f4

080a2ba0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2ba0:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2ba2:	b538      	push	{r3, r4, r5, lr}
 80a2ba4:	4604      	mov	r4, r0
 80a2ba6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2ba8:	d80a      	bhi.n	80a2bc0 <pinMode+0x20>
 80a2baa:	29ff      	cmp	r1, #255	; 0xff
 80a2bac:	d008      	beq.n	80a2bc0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2bae:	f7ff ffd3 	bl	80a2b58 <pinAvailable>
 80a2bb2:	b128      	cbz	r0, 80a2bc0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2bb4:	4629      	mov	r1, r5
 80a2bb6:	4620      	mov	r0, r4
}
 80a2bb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2bbc:	f7fe bc02 	b.w	80a13c4 <HAL_Pin_Mode>
 80a2bc0:	bd38      	pop	{r3, r4, r5, pc}

080a2bc2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2bc2:	b538      	push	{r3, r4, r5, lr}
 80a2bc4:	4604      	mov	r4, r0
 80a2bc6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2bc8:	f7fe fc04 	bl	80a13d4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2bcc:	28ff      	cmp	r0, #255	; 0xff
 80a2bce:	d010      	beq.n	80a2bf2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2bd0:	2806      	cmp	r0, #6
 80a2bd2:	d804      	bhi.n	80a2bde <digitalWrite+0x1c>
 80a2bd4:	234d      	movs	r3, #77	; 0x4d
 80a2bd6:	fa23 f000 	lsr.w	r0, r3, r0
 80a2bda:	07c3      	lsls	r3, r0, #31
 80a2bdc:	d409      	bmi.n	80a2bf2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2bde:	4620      	mov	r0, r4
 80a2be0:	f7ff ffba 	bl	80a2b58 <pinAvailable>
 80a2be4:	b128      	cbz	r0, 80a2bf2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2be6:	4629      	mov	r1, r5
 80a2be8:	4620      	mov	r0, r4
}
 80a2bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2bee:	f7fe bbf9 	b.w	80a13e4 <HAL_GPIO_Write>
 80a2bf2:	bd38      	pop	{r3, r4, r5, pc}

080a2bf4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2bf4:	b510      	push	{r4, lr}
 80a2bf6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2bf8:	f7fe fbec 	bl	80a13d4 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a2bfc:	3804      	subs	r0, #4
 80a2bfe:	b2c0      	uxtb	r0, r0
 80a2c00:	2801      	cmp	r0, #1
 80a2c02:	d908      	bls.n	80a2c16 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2c04:	4620      	mov	r0, r4
 80a2c06:	f7ff ffa7 	bl	80a2b58 <pinAvailable>
 80a2c0a:	b120      	cbz	r0, 80a2c16 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2c0c:	4620      	mov	r0, r4
}
 80a2c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2c12:	f7fe bbef 	b.w	80a13f4 <HAL_GPIO_Read>
}
 80a2c16:	2000      	movs	r0, #0
 80a2c18:	bd10      	pop	{r4, pc}

080a2c1a <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
 80a2c1a:	f7fe bc03 	b.w	80a1424 <HAL_Pulse_In>
	...

080a2c20 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2c20:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a2c22:	4d0b      	ldr	r5, [pc, #44]	; (80a2c50 <_Z19__fetch_global_Wirev+0x30>)
 80a2c24:	6829      	ldr	r1, [r5, #0]
 80a2c26:	f011 0401 	ands.w	r4, r1, #1
 80a2c2a:	d10f      	bne.n	80a2c4c <_Z19__fetch_global_Wirev+0x2c>
 80a2c2c:	4628      	mov	r0, r5
 80a2c2e:	f7fd fa38 	bl	80a00a2 <__cxa_guard_acquire>
 80a2c32:	b158      	cbz	r0, 80a2c4c <_Z19__fetch_global_Wirev+0x2c>
 80a2c34:	4621      	mov	r1, r4
 80a2c36:	4807      	ldr	r0, [pc, #28]	; (80a2c54 <_Z19__fetch_global_Wirev+0x34>)
 80a2c38:	f7ff f91a 	bl	80a1e70 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2c3c:	4628      	mov	r0, r5
 80a2c3e:	f7fd fa35 	bl	80a00ac <__cxa_guard_release>
 80a2c42:	4a05      	ldr	r2, [pc, #20]	; (80a2c58 <_Z19__fetch_global_Wirev+0x38>)
 80a2c44:	4905      	ldr	r1, [pc, #20]	; (80a2c5c <_Z19__fetch_global_Wirev+0x3c>)
 80a2c46:	4803      	ldr	r0, [pc, #12]	; (80a2c54 <_Z19__fetch_global_Wirev+0x34>)
 80a2c48:	f000 f844 	bl	80a2cd4 <__aeabi_atexit>
	return wire;
}
 80a2c4c:	4801      	ldr	r0, [pc, #4]	; (80a2c54 <_Z19__fetch_global_Wirev+0x34>)
 80a2c4e:	bd38      	pop	{r3, r4, r5, pc}
 80a2c50:	200009c4 	.word	0x200009c4
 80a2c54:	200009c8 	.word	0x200009c8
 80a2c58:	200003e0 	.word	0x200003e0
 80a2c5c:	080a1e19 	.word	0x080a1e19

080a2c60 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2c60:	b513      	push	{r0, r1, r4, lr}
 80a2c62:	4c08      	ldr	r4, [pc, #32]	; (80a2c84 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2c64:	2300      	movs	r3, #0
 80a2c66:	461a      	mov	r2, r3
 80a2c68:	4619      	mov	r1, r3
 80a2c6a:	9300      	str	r3, [sp, #0]
 80a2c6c:	4620      	mov	r0, r4
 80a2c6e:	f7ff f9e9 	bl	80a2044 <_ZN9IPAddressC1Ehhhh>
 80a2c72:	4620      	mov	r0, r4
 80a2c74:	4a04      	ldr	r2, [pc, #16]	; (80a2c88 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2c76:	4905      	ldr	r1, [pc, #20]	; (80a2c8c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2c78:	b002      	add	sp, #8
 80a2c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2c7e:	f000 b829 	b.w	80a2cd4 <__aeabi_atexit>
 80a2c82:	bf00      	nop
 80a2c84:	200009dc 	.word	0x200009dc
 80a2c88:	200003e0 	.word	0x200003e0
 80a2c8c:	080a1f95 	.word	0x080a1f95

080a2c90 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2c90:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2c92:	4c0c      	ldr	r4, [pc, #48]	; (80a2cc4 <_GLOBAL__sub_I_SPI+0x34>)
 80a2c94:	4e0c      	ldr	r6, [pc, #48]	; (80a2cc8 <_GLOBAL__sub_I_SPI+0x38>)
 80a2c96:	4d0d      	ldr	r5, [pc, #52]	; (80a2ccc <_GLOBAL__sub_I_SPI+0x3c>)
 80a2c98:	2100      	movs	r1, #0
 80a2c9a:	4620      	mov	r0, r4
 80a2c9c:	f7ff fbf0 	bl	80a2480 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2ca0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2ca2:	4c0b      	ldr	r4, [pc, #44]	; (80a2cd0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2ca4:	4632      	mov	r2, r6
 80a2ca6:	4629      	mov	r1, r5
 80a2ca8:	f000 f814 	bl	80a2cd4 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2cac:	2101      	movs	r1, #1
 80a2cae:	4620      	mov	r0, r4
 80a2cb0:	f7ff fbe6 	bl	80a2480 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2cb4:	4632      	mov	r2, r6
 80a2cb6:	4629      	mov	r1, r5
 80a2cb8:	4620      	mov	r0, r4
 80a2cba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a2cbe:	f000 b809 	b.w	80a2cd4 <__aeabi_atexit>
 80a2cc2:	bf00      	nop
 80a2cc4:	200009f4 	.word	0x200009f4
 80a2cc8:	200003e0 	.word	0x200003e0
 80a2ccc:	080a2471 	.word	0x080a2471
 80a2cd0:	20000a04 	.word	0x20000a04

080a2cd4 <__aeabi_atexit>:
 80a2cd4:	460b      	mov	r3, r1
 80a2cd6:	4601      	mov	r1, r0
 80a2cd8:	4618      	mov	r0, r3
 80a2cda:	f002 bd69 	b.w	80a57b0 <__cxa_atexit>

080a2cde <_ZdlPvj>:
 80a2cde:	f7fd b9de 	b.w	80a009e <_ZdlPv>

080a2ce2 <_ZSt25__throw_bad_function_callv>:
 80a2ce2:	b508      	push	{r3, lr}
 80a2ce4:	f7fe fd84 	bl	80a17f0 <abort>

080a2ce8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2ce8:	4b24      	ldr	r3, [pc, #144]	; (80a2d7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2cea:	681a      	ldr	r2, [r3, #0]
 80a2cec:	07d0      	lsls	r0, r2, #31
 80a2cee:	bf5c      	itt	pl
 80a2cf0:	2201      	movpl	r2, #1
 80a2cf2:	601a      	strpl	r2, [r3, #0]
 80a2cf4:	4b22      	ldr	r3, [pc, #136]	; (80a2d80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2cf6:	681a      	ldr	r2, [r3, #0]
 80a2cf8:	07d1      	lsls	r1, r2, #31
 80a2cfa:	bf5c      	itt	pl
 80a2cfc:	2201      	movpl	r2, #1
 80a2cfe:	601a      	strpl	r2, [r3, #0]
 80a2d00:	4b20      	ldr	r3, [pc, #128]	; (80a2d84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2d02:	681a      	ldr	r2, [r3, #0]
 80a2d04:	07d2      	lsls	r2, r2, #31
 80a2d06:	bf5c      	itt	pl
 80a2d08:	2201      	movpl	r2, #1
 80a2d0a:	601a      	strpl	r2, [r3, #0]
 80a2d0c:	4b1e      	ldr	r3, [pc, #120]	; (80a2d88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2d0e:	681a      	ldr	r2, [r3, #0]
 80a2d10:	07d0      	lsls	r0, r2, #31
 80a2d12:	bf5c      	itt	pl
 80a2d14:	2201      	movpl	r2, #1
 80a2d16:	601a      	strpl	r2, [r3, #0]
 80a2d18:	4b1c      	ldr	r3, [pc, #112]	; (80a2d8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2d1a:	681a      	ldr	r2, [r3, #0]
 80a2d1c:	07d1      	lsls	r1, r2, #31
 80a2d1e:	bf5c      	itt	pl
 80a2d20:	2201      	movpl	r2, #1
 80a2d22:	601a      	strpl	r2, [r3, #0]
 80a2d24:	4b1a      	ldr	r3, [pc, #104]	; (80a2d90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2d26:	681a      	ldr	r2, [r3, #0]
 80a2d28:	07d2      	lsls	r2, r2, #31
 80a2d2a:	bf5c      	itt	pl
 80a2d2c:	2201      	movpl	r2, #1
 80a2d2e:	601a      	strpl	r2, [r3, #0]
 80a2d30:	4b18      	ldr	r3, [pc, #96]	; (80a2d94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2d32:	681a      	ldr	r2, [r3, #0]
 80a2d34:	07d0      	lsls	r0, r2, #31
 80a2d36:	bf5c      	itt	pl
 80a2d38:	2201      	movpl	r2, #1
 80a2d3a:	601a      	strpl	r2, [r3, #0]
 80a2d3c:	4b16      	ldr	r3, [pc, #88]	; (80a2d98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2d3e:	681a      	ldr	r2, [r3, #0]
 80a2d40:	07d1      	lsls	r1, r2, #31
 80a2d42:	bf5c      	itt	pl
 80a2d44:	2201      	movpl	r2, #1
 80a2d46:	601a      	strpl	r2, [r3, #0]
 80a2d48:	4b14      	ldr	r3, [pc, #80]	; (80a2d9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2d4a:	681a      	ldr	r2, [r3, #0]
 80a2d4c:	07d2      	lsls	r2, r2, #31
 80a2d4e:	bf5c      	itt	pl
 80a2d50:	2201      	movpl	r2, #1
 80a2d52:	601a      	strpl	r2, [r3, #0]
 80a2d54:	4b12      	ldr	r3, [pc, #72]	; (80a2da0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2d56:	681a      	ldr	r2, [r3, #0]
 80a2d58:	07d0      	lsls	r0, r2, #31
 80a2d5a:	bf5c      	itt	pl
 80a2d5c:	2201      	movpl	r2, #1
 80a2d5e:	601a      	strpl	r2, [r3, #0]
 80a2d60:	4b10      	ldr	r3, [pc, #64]	; (80a2da4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2d62:	681a      	ldr	r2, [r3, #0]
 80a2d64:	07d1      	lsls	r1, r2, #31
 80a2d66:	bf5c      	itt	pl
 80a2d68:	2201      	movpl	r2, #1
 80a2d6a:	601a      	strpl	r2, [r3, #0]
 80a2d6c:	4b0e      	ldr	r3, [pc, #56]	; (80a2da8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2d6e:	681a      	ldr	r2, [r3, #0]
 80a2d70:	07d2      	lsls	r2, r2, #31
 80a2d72:	bf5c      	itt	pl
 80a2d74:	2201      	movpl	r2, #1
 80a2d76:	601a      	strpl	r2, [r3, #0]
 80a2d78:	4770      	bx	lr
 80a2d7a:	bf00      	nop
 80a2d7c:	20000a40 	.word	0x20000a40
 80a2d80:	20000a3c 	.word	0x20000a3c
 80a2d84:	20000a38 	.word	0x20000a38
 80a2d88:	20000a34 	.word	0x20000a34
 80a2d8c:	20000a30 	.word	0x20000a30
 80a2d90:	20000a2c 	.word	0x20000a2c
 80a2d94:	20000a28 	.word	0x20000a28
 80a2d98:	20000a24 	.word	0x20000a24
 80a2d9c:	20000a20 	.word	0x20000a20
 80a2da0:	20000a1c 	.word	0x20000a1c
 80a2da4:	20000a18 	.word	0x20000a18
 80a2da8:	20000a14 	.word	0x20000a14

080a2dac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2dac:	4b18      	ldr	r3, [pc, #96]	; (80a2e10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2dae:	681a      	ldr	r2, [r3, #0]
 80a2db0:	07d1      	lsls	r1, r2, #31
 80a2db2:	bf5c      	itt	pl
 80a2db4:	2201      	movpl	r2, #1
 80a2db6:	601a      	strpl	r2, [r3, #0]
 80a2db8:	4b16      	ldr	r3, [pc, #88]	; (80a2e14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2dba:	681a      	ldr	r2, [r3, #0]
 80a2dbc:	07d2      	lsls	r2, r2, #31
 80a2dbe:	bf5c      	itt	pl
 80a2dc0:	2201      	movpl	r2, #1
 80a2dc2:	601a      	strpl	r2, [r3, #0]
 80a2dc4:	4b14      	ldr	r3, [pc, #80]	; (80a2e18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2dc6:	681a      	ldr	r2, [r3, #0]
 80a2dc8:	07d0      	lsls	r0, r2, #31
 80a2dca:	bf5c      	itt	pl
 80a2dcc:	2201      	movpl	r2, #1
 80a2dce:	601a      	strpl	r2, [r3, #0]
 80a2dd0:	4b12      	ldr	r3, [pc, #72]	; (80a2e1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2dd2:	681a      	ldr	r2, [r3, #0]
 80a2dd4:	07d1      	lsls	r1, r2, #31
 80a2dd6:	bf5c      	itt	pl
 80a2dd8:	2201      	movpl	r2, #1
 80a2dda:	601a      	strpl	r2, [r3, #0]
 80a2ddc:	4b10      	ldr	r3, [pc, #64]	; (80a2e20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2dde:	681a      	ldr	r2, [r3, #0]
 80a2de0:	07d2      	lsls	r2, r2, #31
 80a2de2:	bf5c      	itt	pl
 80a2de4:	2201      	movpl	r2, #1
 80a2de6:	601a      	strpl	r2, [r3, #0]
 80a2de8:	4b0e      	ldr	r3, [pc, #56]	; (80a2e24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2dea:	681a      	ldr	r2, [r3, #0]
 80a2dec:	07d0      	lsls	r0, r2, #31
 80a2dee:	bf5c      	itt	pl
 80a2df0:	2201      	movpl	r2, #1
 80a2df2:	601a      	strpl	r2, [r3, #0]
 80a2df4:	4b0c      	ldr	r3, [pc, #48]	; (80a2e28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2df6:	681a      	ldr	r2, [r3, #0]
 80a2df8:	07d1      	lsls	r1, r2, #31
 80a2dfa:	bf5c      	itt	pl
 80a2dfc:	2201      	movpl	r2, #1
 80a2dfe:	601a      	strpl	r2, [r3, #0]
 80a2e00:	4b0a      	ldr	r3, [pc, #40]	; (80a2e2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2e02:	681a      	ldr	r2, [r3, #0]
 80a2e04:	07d2      	lsls	r2, r2, #31
 80a2e06:	bf5c      	itt	pl
 80a2e08:	2201      	movpl	r2, #1
 80a2e0a:	601a      	strpl	r2, [r3, #0]
 80a2e0c:	4770      	bx	lr
 80a2e0e:	bf00      	nop
 80a2e10:	20000a60 	.word	0x20000a60
 80a2e14:	20000a5c 	.word	0x20000a5c
 80a2e18:	20000a58 	.word	0x20000a58
 80a2e1c:	20000a54 	.word	0x20000a54
 80a2e20:	20000a50 	.word	0x20000a50
 80a2e24:	20000a4c 	.word	0x20000a4c
 80a2e28:	20000a48 	.word	0x20000a48
 80a2e2c:	20000a44 	.word	0x20000a44

080a2e30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2e30:	4b18      	ldr	r3, [pc, #96]	; (80a2e94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2e32:	681a      	ldr	r2, [r3, #0]
 80a2e34:	07d1      	lsls	r1, r2, #31
 80a2e36:	bf5c      	itt	pl
 80a2e38:	2201      	movpl	r2, #1
 80a2e3a:	601a      	strpl	r2, [r3, #0]
 80a2e3c:	4b16      	ldr	r3, [pc, #88]	; (80a2e98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2e3e:	681a      	ldr	r2, [r3, #0]
 80a2e40:	07d2      	lsls	r2, r2, #31
 80a2e42:	bf5c      	itt	pl
 80a2e44:	2201      	movpl	r2, #1
 80a2e46:	601a      	strpl	r2, [r3, #0]
 80a2e48:	4b14      	ldr	r3, [pc, #80]	; (80a2e9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2e4a:	681a      	ldr	r2, [r3, #0]
 80a2e4c:	07d0      	lsls	r0, r2, #31
 80a2e4e:	bf5c      	itt	pl
 80a2e50:	2201      	movpl	r2, #1
 80a2e52:	601a      	strpl	r2, [r3, #0]
 80a2e54:	4b12      	ldr	r3, [pc, #72]	; (80a2ea0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2e56:	681a      	ldr	r2, [r3, #0]
 80a2e58:	07d1      	lsls	r1, r2, #31
 80a2e5a:	bf5c      	itt	pl
 80a2e5c:	2201      	movpl	r2, #1
 80a2e5e:	601a      	strpl	r2, [r3, #0]
 80a2e60:	4b10      	ldr	r3, [pc, #64]	; (80a2ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2e62:	681a      	ldr	r2, [r3, #0]
 80a2e64:	07d2      	lsls	r2, r2, #31
 80a2e66:	bf5c      	itt	pl
 80a2e68:	2201      	movpl	r2, #1
 80a2e6a:	601a      	strpl	r2, [r3, #0]
 80a2e6c:	4b0e      	ldr	r3, [pc, #56]	; (80a2ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2e6e:	681a      	ldr	r2, [r3, #0]
 80a2e70:	07d0      	lsls	r0, r2, #31
 80a2e72:	bf5c      	itt	pl
 80a2e74:	2201      	movpl	r2, #1
 80a2e76:	601a      	strpl	r2, [r3, #0]
 80a2e78:	4b0c      	ldr	r3, [pc, #48]	; (80a2eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2e7a:	681a      	ldr	r2, [r3, #0]
 80a2e7c:	07d1      	lsls	r1, r2, #31
 80a2e7e:	bf5c      	itt	pl
 80a2e80:	2201      	movpl	r2, #1
 80a2e82:	601a      	strpl	r2, [r3, #0]
 80a2e84:	4b0a      	ldr	r3, [pc, #40]	; (80a2eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2e86:	681a      	ldr	r2, [r3, #0]
 80a2e88:	07d2      	lsls	r2, r2, #31
 80a2e8a:	bf5c      	itt	pl
 80a2e8c:	2201      	movpl	r2, #1
 80a2e8e:	601a      	strpl	r2, [r3, #0]
 80a2e90:	4770      	bx	lr
 80a2e92:	bf00      	nop
 80a2e94:	20000a80 	.word	0x20000a80
 80a2e98:	20000a7c 	.word	0x20000a7c
 80a2e9c:	20000a78 	.word	0x20000a78
 80a2ea0:	20000a74 	.word	0x20000a74
 80a2ea4:	20000a70 	.word	0x20000a70
 80a2ea8:	20000a6c 	.word	0x20000a6c
 80a2eac:	20000a68 	.word	0x20000a68
 80a2eb0:	20000a64 	.word	0x20000a64

080a2eb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2eb4:	4b24      	ldr	r3, [pc, #144]	; (80a2f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2eb6:	681a      	ldr	r2, [r3, #0]
 80a2eb8:	07d0      	lsls	r0, r2, #31
 80a2eba:	bf5c      	itt	pl
 80a2ebc:	2201      	movpl	r2, #1
 80a2ebe:	601a      	strpl	r2, [r3, #0]
 80a2ec0:	4b22      	ldr	r3, [pc, #136]	; (80a2f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2ec2:	681a      	ldr	r2, [r3, #0]
 80a2ec4:	07d1      	lsls	r1, r2, #31
 80a2ec6:	bf5c      	itt	pl
 80a2ec8:	2201      	movpl	r2, #1
 80a2eca:	601a      	strpl	r2, [r3, #0]
 80a2ecc:	4b20      	ldr	r3, [pc, #128]	; (80a2f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2ece:	681a      	ldr	r2, [r3, #0]
 80a2ed0:	07d2      	lsls	r2, r2, #31
 80a2ed2:	bf5c      	itt	pl
 80a2ed4:	2201      	movpl	r2, #1
 80a2ed6:	601a      	strpl	r2, [r3, #0]
 80a2ed8:	4b1e      	ldr	r3, [pc, #120]	; (80a2f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2eda:	681a      	ldr	r2, [r3, #0]
 80a2edc:	07d0      	lsls	r0, r2, #31
 80a2ede:	bf5c      	itt	pl
 80a2ee0:	2201      	movpl	r2, #1
 80a2ee2:	601a      	strpl	r2, [r3, #0]
 80a2ee4:	4b1c      	ldr	r3, [pc, #112]	; (80a2f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2ee6:	681a      	ldr	r2, [r3, #0]
 80a2ee8:	07d1      	lsls	r1, r2, #31
 80a2eea:	bf5c      	itt	pl
 80a2eec:	2201      	movpl	r2, #1
 80a2eee:	601a      	strpl	r2, [r3, #0]
 80a2ef0:	4b1a      	ldr	r3, [pc, #104]	; (80a2f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2ef2:	681a      	ldr	r2, [r3, #0]
 80a2ef4:	07d2      	lsls	r2, r2, #31
 80a2ef6:	bf5c      	itt	pl
 80a2ef8:	2201      	movpl	r2, #1
 80a2efa:	601a      	strpl	r2, [r3, #0]
 80a2efc:	4b18      	ldr	r3, [pc, #96]	; (80a2f60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2efe:	681a      	ldr	r2, [r3, #0]
 80a2f00:	07d0      	lsls	r0, r2, #31
 80a2f02:	bf5c      	itt	pl
 80a2f04:	2201      	movpl	r2, #1
 80a2f06:	601a      	strpl	r2, [r3, #0]
 80a2f08:	4b16      	ldr	r3, [pc, #88]	; (80a2f64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2f0a:	681a      	ldr	r2, [r3, #0]
 80a2f0c:	07d1      	lsls	r1, r2, #31
 80a2f0e:	bf5c      	itt	pl
 80a2f10:	2201      	movpl	r2, #1
 80a2f12:	601a      	strpl	r2, [r3, #0]
 80a2f14:	4b14      	ldr	r3, [pc, #80]	; (80a2f68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2f16:	681a      	ldr	r2, [r3, #0]
 80a2f18:	07d2      	lsls	r2, r2, #31
 80a2f1a:	bf5c      	itt	pl
 80a2f1c:	2201      	movpl	r2, #1
 80a2f1e:	601a      	strpl	r2, [r3, #0]
 80a2f20:	4b12      	ldr	r3, [pc, #72]	; (80a2f6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2f22:	681a      	ldr	r2, [r3, #0]
 80a2f24:	07d0      	lsls	r0, r2, #31
 80a2f26:	bf5c      	itt	pl
 80a2f28:	2201      	movpl	r2, #1
 80a2f2a:	601a      	strpl	r2, [r3, #0]
 80a2f2c:	4b10      	ldr	r3, [pc, #64]	; (80a2f70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2f2e:	681a      	ldr	r2, [r3, #0]
 80a2f30:	07d1      	lsls	r1, r2, #31
 80a2f32:	bf5c      	itt	pl
 80a2f34:	2201      	movpl	r2, #1
 80a2f36:	601a      	strpl	r2, [r3, #0]
 80a2f38:	4b0e      	ldr	r3, [pc, #56]	; (80a2f74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2f3a:	681a      	ldr	r2, [r3, #0]
 80a2f3c:	07d2      	lsls	r2, r2, #31
 80a2f3e:	bf5c      	itt	pl
 80a2f40:	2201      	movpl	r2, #1
 80a2f42:	601a      	strpl	r2, [r3, #0]
 80a2f44:	4770      	bx	lr
 80a2f46:	bf00      	nop
 80a2f48:	20000ab0 	.word	0x20000ab0
 80a2f4c:	20000aac 	.word	0x20000aac
 80a2f50:	20000aa8 	.word	0x20000aa8
 80a2f54:	20000aa4 	.word	0x20000aa4
 80a2f58:	20000aa0 	.word	0x20000aa0
 80a2f5c:	20000a9c 	.word	0x20000a9c
 80a2f60:	20000a98 	.word	0x20000a98
 80a2f64:	20000a94 	.word	0x20000a94
 80a2f68:	20000a90 	.word	0x20000a90
 80a2f6c:	20000a8c 	.word	0x20000a8c
 80a2f70:	20000a88 	.word	0x20000a88
 80a2f74:	20000a84 	.word	0x20000a84

080a2f78 <roundf>:
 80a2f78:	b508      	push	{r3, lr}
 80a2f7a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80a2f7e:	3b7f      	subs	r3, #127	; 0x7f
 80a2f80:	2b16      	cmp	r3, #22
 80a2f82:	4601      	mov	r1, r0
 80a2f84:	dc0e      	bgt.n	80a2fa4 <roundf+0x2c>
 80a2f86:	2b00      	cmp	r3, #0
 80a2f88:	4602      	mov	r2, r0
 80a2f8a:	db10      	blt.n	80a2fae <roundf+0x36>
 80a2f8c:	480b      	ldr	r0, [pc, #44]	; (80a2fbc <roundf+0x44>)
 80a2f8e:	4118      	asrs	r0, r3
 80a2f90:	4201      	tst	r1, r0
 80a2f92:	d005      	beq.n	80a2fa0 <roundf+0x28>
 80a2f94:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80a2f98:	4119      	asrs	r1, r3
 80a2f9a:	4411      	add	r1, r2
 80a2f9c:	ea21 0100 	bic.w	r1, r1, r0
 80a2fa0:	4608      	mov	r0, r1
 80a2fa2:	bd08      	pop	{r3, pc}
 80a2fa4:	2b80      	cmp	r3, #128	; 0x80
 80a2fa6:	d1fb      	bne.n	80a2fa0 <roundf+0x28>
 80a2fa8:	f002 f96e 	bl	80a5288 <__addsf3>
 80a2fac:	bd08      	pop	{r3, pc}
 80a2fae:	3301      	adds	r3, #1
 80a2fb0:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 80a2fb4:	d1f4      	bne.n	80a2fa0 <roundf+0x28>
 80a2fb6:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 80a2fba:	e7f1      	b.n	80a2fa0 <roundf+0x28>
 80a2fbc:	007fffff 	.word	0x007fffff

080a2fc0 <log>:
 80a2fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2fc4:	b08a      	sub	sp, #40	; 0x28
 80a2fc6:	4604      	mov	r4, r0
 80a2fc8:	460d      	mov	r5, r1
 80a2fca:	f000 fa95 	bl	80a34f8 <__ieee754_log>
 80a2fce:	4b37      	ldr	r3, [pc, #220]	; (80a30ac <log+0xec>)
 80a2fd0:	4606      	mov	r6, r0
 80a2fd2:	f993 8000 	ldrsb.w	r8, [r3]
 80a2fd6:	460f      	mov	r7, r1
 80a2fd8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80a2fdc:	d00d      	beq.n	80a2ffa <log+0x3a>
 80a2fde:	4622      	mov	r2, r4
 80a2fe0:	462b      	mov	r3, r5
 80a2fe2:	4620      	mov	r0, r4
 80a2fe4:	4629      	mov	r1, r5
 80a2fe6:	f002 f89b 	bl	80a5120 <__aeabi_dcmpun>
 80a2fea:	b930      	cbnz	r0, 80a2ffa <log+0x3a>
 80a2fec:	2200      	movs	r2, #0
 80a2fee:	2300      	movs	r3, #0
 80a2ff0:	4620      	mov	r0, r4
 80a2ff2:	4629      	mov	r1, r5
 80a2ff4:	f002 f88a 	bl	80a510c <__aeabi_dcmpgt>
 80a2ff8:	b120      	cbz	r0, 80a3004 <log+0x44>
 80a2ffa:	4630      	mov	r0, r6
 80a2ffc:	4639      	mov	r1, r7
 80a2ffe:	b00a      	add	sp, #40	; 0x28
 80a3000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3004:	4b2a      	ldr	r3, [pc, #168]	; (80a30b0 <log+0xf0>)
 80a3006:	9008      	str	r0, [sp, #32]
 80a3008:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80a300c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80a3010:	9301      	str	r3, [sp, #4]
 80a3012:	f1b8 0f00 	cmp.w	r8, #0
 80a3016:	d119      	bne.n	80a304c <log+0x8c>
 80a3018:	4f26      	ldr	r7, [pc, #152]	; (80a30b4 <log+0xf4>)
 80a301a:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
 80a301e:	4620      	mov	r0, r4
 80a3020:	4629      	mov	r1, r5
 80a3022:	2200      	movs	r2, #0
 80a3024:	2300      	movs	r3, #0
 80a3026:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a302a:	f002 f847 	bl	80a50bc <__aeabi_dcmpeq>
 80a302e:	2800      	cmp	r0, #0
 80a3030:	d034      	beq.n	80a309c <log+0xdc>
 80a3032:	2302      	movs	r3, #2
 80a3034:	9300      	str	r3, [sp, #0]
 80a3036:	4668      	mov	r0, sp
 80a3038:	f001 fb0e 	bl	80a4658 <matherr>
 80a303c:	b1a8      	cbz	r0, 80a306a <log+0xaa>
 80a303e:	9b08      	ldr	r3, [sp, #32]
 80a3040:	b9c3      	cbnz	r3, 80a3074 <log+0xb4>
 80a3042:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a3046:	b00a      	add	sp, #40	; 0x28
 80a3048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a304c:	4f1a      	ldr	r7, [pc, #104]	; (80a30b8 <log+0xf8>)
 80a304e:	2600      	movs	r6, #0
 80a3050:	4620      	mov	r0, r4
 80a3052:	4629      	mov	r1, r5
 80a3054:	2200      	movs	r2, #0
 80a3056:	2300      	movs	r3, #0
 80a3058:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a305c:	f002 f82e 	bl	80a50bc <__aeabi_dcmpeq>
 80a3060:	b168      	cbz	r0, 80a307e <log+0xbe>
 80a3062:	2302      	movs	r3, #2
 80a3064:	4598      	cmp	r8, r3
 80a3066:	9300      	str	r3, [sp, #0]
 80a3068:	d1e5      	bne.n	80a3036 <log+0x76>
 80a306a:	f7fe fbd1 	bl	80a1810 <__errno>
 80a306e:	2322      	movs	r3, #34	; 0x22
 80a3070:	6003      	str	r3, [r0, #0]
 80a3072:	e7e4      	b.n	80a303e <log+0x7e>
 80a3074:	f7fe fbcc 	bl	80a1810 <__errno>
 80a3078:	9b08      	ldr	r3, [sp, #32]
 80a307a:	6003      	str	r3, [r0, #0]
 80a307c:	e7e1      	b.n	80a3042 <log+0x82>
 80a307e:	2301      	movs	r3, #1
 80a3080:	f1b8 0f02 	cmp.w	r8, #2
 80a3084:	9300      	str	r3, [sp, #0]
 80a3086:	d10b      	bne.n	80a30a0 <log+0xe0>
 80a3088:	f7fe fbc2 	bl	80a1810 <__errno>
 80a308c:	2321      	movs	r3, #33	; 0x21
 80a308e:	6003      	str	r3, [r0, #0]
 80a3090:	480a      	ldr	r0, [pc, #40]	; (80a30bc <log+0xfc>)
 80a3092:	f001 fae3 	bl	80a465c <nan>
 80a3096:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a309a:	e7d0      	b.n	80a303e <log+0x7e>
 80a309c:	2301      	movs	r3, #1
 80a309e:	9300      	str	r3, [sp, #0]
 80a30a0:	4668      	mov	r0, sp
 80a30a2:	f001 fad9 	bl	80a4658 <matherr>
 80a30a6:	2800      	cmp	r0, #0
 80a30a8:	d1f2      	bne.n	80a3090 <log+0xd0>
 80a30aa:	e7ed      	b.n	80a3088 <log+0xc8>
 80a30ac:	20000328 	.word	0x20000328
 80a30b0:	080a672c 	.word	0x080a672c
 80a30b4:	c7efffff 	.word	0xc7efffff
 80a30b8:	fff00000 	.word	0xfff00000
 80a30bc:	080a6730 	.word	0x080a6730

080a30c0 <log10>:
 80a30c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a30c4:	b08b      	sub	sp, #44	; 0x2c
 80a30c6:	4604      	mov	r4, r0
 80a30c8:	460d      	mov	r5, r1
 80a30ca:	f000 fc09 	bl	80a38e0 <__ieee754_log10>
 80a30ce:	4b38      	ldr	r3, [pc, #224]	; (80a31b0 <log10+0xf0>)
 80a30d0:	4606      	mov	r6, r0
 80a30d2:	f993 8000 	ldrsb.w	r8, [r3]
 80a30d6:	460f      	mov	r7, r1
 80a30d8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80a30dc:	d00e      	beq.n	80a30fc <log10+0x3c>
 80a30de:	4622      	mov	r2, r4
 80a30e0:	462b      	mov	r3, r5
 80a30e2:	4620      	mov	r0, r4
 80a30e4:	4629      	mov	r1, r5
 80a30e6:	f002 f81b 	bl	80a5120 <__aeabi_dcmpun>
 80a30ea:	4681      	mov	r9, r0
 80a30ec:	b930      	cbnz	r0, 80a30fc <log10+0x3c>
 80a30ee:	2200      	movs	r2, #0
 80a30f0:	2300      	movs	r3, #0
 80a30f2:	4620      	mov	r0, r4
 80a30f4:	4629      	mov	r1, r5
 80a30f6:	f001 fff5 	bl	80a50e4 <__aeabi_dcmple>
 80a30fa:	b920      	cbnz	r0, 80a3106 <log10+0x46>
 80a30fc:	4630      	mov	r0, r6
 80a30fe:	4639      	mov	r1, r7
 80a3100:	b00b      	add	sp, #44	; 0x2c
 80a3102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a3106:	4b2b      	ldr	r3, [pc, #172]	; (80a31b4 <log10+0xf4>)
 80a3108:	f8cd 9020 	str.w	r9, [sp, #32]
 80a310c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80a3110:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80a3114:	9301      	str	r3, [sp, #4]
 80a3116:	f1b8 0f00 	cmp.w	r8, #0
 80a311a:	d119      	bne.n	80a3150 <log10+0x90>
 80a311c:	4f26      	ldr	r7, [pc, #152]	; (80a31b8 <log10+0xf8>)
 80a311e:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
 80a3122:	4620      	mov	r0, r4
 80a3124:	4629      	mov	r1, r5
 80a3126:	2200      	movs	r2, #0
 80a3128:	2300      	movs	r3, #0
 80a312a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a312e:	f001 ffc5 	bl	80a50bc <__aeabi_dcmpeq>
 80a3132:	2800      	cmp	r0, #0
 80a3134:	d034      	beq.n	80a31a0 <log10+0xe0>
 80a3136:	2302      	movs	r3, #2
 80a3138:	9300      	str	r3, [sp, #0]
 80a313a:	4668      	mov	r0, sp
 80a313c:	f001 fa8c 	bl	80a4658 <matherr>
 80a3140:	b1a8      	cbz	r0, 80a316e <log10+0xae>
 80a3142:	9b08      	ldr	r3, [sp, #32]
 80a3144:	b9c3      	cbnz	r3, 80a3178 <log10+0xb8>
 80a3146:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a314a:	b00b      	add	sp, #44	; 0x2c
 80a314c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a3150:	4f1a      	ldr	r7, [pc, #104]	; (80a31bc <log10+0xfc>)
 80a3152:	2600      	movs	r6, #0
 80a3154:	4620      	mov	r0, r4
 80a3156:	4629      	mov	r1, r5
 80a3158:	2200      	movs	r2, #0
 80a315a:	2300      	movs	r3, #0
 80a315c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a3160:	f001 ffac 	bl	80a50bc <__aeabi_dcmpeq>
 80a3164:	b168      	cbz	r0, 80a3182 <log10+0xc2>
 80a3166:	2302      	movs	r3, #2
 80a3168:	4598      	cmp	r8, r3
 80a316a:	9300      	str	r3, [sp, #0]
 80a316c:	d1e5      	bne.n	80a313a <log10+0x7a>
 80a316e:	f7fe fb4f 	bl	80a1810 <__errno>
 80a3172:	2322      	movs	r3, #34	; 0x22
 80a3174:	6003      	str	r3, [r0, #0]
 80a3176:	e7e4      	b.n	80a3142 <log10+0x82>
 80a3178:	f7fe fb4a 	bl	80a1810 <__errno>
 80a317c:	9b08      	ldr	r3, [sp, #32]
 80a317e:	6003      	str	r3, [r0, #0]
 80a3180:	e7e1      	b.n	80a3146 <log10+0x86>
 80a3182:	2301      	movs	r3, #1
 80a3184:	f1b8 0f02 	cmp.w	r8, #2
 80a3188:	9300      	str	r3, [sp, #0]
 80a318a:	d10b      	bne.n	80a31a4 <log10+0xe4>
 80a318c:	f7fe fb40 	bl	80a1810 <__errno>
 80a3190:	2321      	movs	r3, #33	; 0x21
 80a3192:	6003      	str	r3, [r0, #0]
 80a3194:	480a      	ldr	r0, [pc, #40]	; (80a31c0 <log10+0x100>)
 80a3196:	f001 fa61 	bl	80a465c <nan>
 80a319a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a319e:	e7d0      	b.n	80a3142 <log10+0x82>
 80a31a0:	2301      	movs	r3, #1
 80a31a2:	9300      	str	r3, [sp, #0]
 80a31a4:	4668      	mov	r0, sp
 80a31a6:	f001 fa57 	bl	80a4658 <matherr>
 80a31aa:	2800      	cmp	r0, #0
 80a31ac:	d1f2      	bne.n	80a3194 <log10+0xd4>
 80a31ae:	e7ed      	b.n	80a318c <log10+0xcc>
 80a31b0:	20000328 	.word	0x20000328
 80a31b4:	080a6734 	.word	0x080a6734
 80a31b8:	c7efffff 	.word	0xc7efffff
 80a31bc:	fff00000 	.word	0xfff00000
 80a31c0:	080a6730 	.word	0x080a6730

080a31c4 <pow>:
 80a31c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a31c8:	b08d      	sub	sp, #52	; 0x34
 80a31ca:	4606      	mov	r6, r0
 80a31cc:	460f      	mov	r7, r1
 80a31ce:	4614      	mov	r4, r2
 80a31d0:	461d      	mov	r5, r3
 80a31d2:	f000 fc11 	bl	80a39f8 <__ieee754_pow>
 80a31d6:	f8df 9310 	ldr.w	r9, [pc, #784]	; 80a34e8 <pow+0x324>
 80a31da:	e9cd 0100 	strd	r0, r1, [sp]
 80a31de:	f999 8000 	ldrsb.w	r8, [r9]
 80a31e2:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80a31e6:	d046      	beq.n	80a3276 <pow+0xb2>
 80a31e8:	4622      	mov	r2, r4
 80a31ea:	462b      	mov	r3, r5
 80a31ec:	4620      	mov	r0, r4
 80a31ee:	4629      	mov	r1, r5
 80a31f0:	f001 ff96 	bl	80a5120 <__aeabi_dcmpun>
 80a31f4:	4683      	mov	fp, r0
 80a31f6:	2800      	cmp	r0, #0
 80a31f8:	d13d      	bne.n	80a3276 <pow+0xb2>
 80a31fa:	4632      	mov	r2, r6
 80a31fc:	463b      	mov	r3, r7
 80a31fe:	4630      	mov	r0, r6
 80a3200:	4639      	mov	r1, r7
 80a3202:	f001 ff8d 	bl	80a5120 <__aeabi_dcmpun>
 80a3206:	4682      	mov	sl, r0
 80a3208:	2800      	cmp	r0, #0
 80a320a:	d174      	bne.n	80a32f6 <pow+0x132>
 80a320c:	4630      	mov	r0, r6
 80a320e:	4639      	mov	r1, r7
 80a3210:	2200      	movs	r2, #0
 80a3212:	2300      	movs	r3, #0
 80a3214:	f001 ff52 	bl	80a50bc <__aeabi_dcmpeq>
 80a3218:	2800      	cmp	r0, #0
 80a321a:	d033      	beq.n	80a3284 <pow+0xc0>
 80a321c:	2200      	movs	r2, #0
 80a321e:	2300      	movs	r3, #0
 80a3220:	4620      	mov	r0, r4
 80a3222:	4629      	mov	r1, r5
 80a3224:	f001 ff4a 	bl	80a50bc <__aeabi_dcmpeq>
 80a3228:	4683      	mov	fp, r0
 80a322a:	b1b8      	cbz	r0, 80a325c <pow+0x98>
 80a322c:	4aa9      	ldr	r2, [pc, #676]	; (80a34d4 <pow+0x310>)
 80a322e:	2301      	movs	r3, #1
 80a3230:	2000      	movs	r0, #0
 80a3232:	2100      	movs	r1, #0
 80a3234:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80a3238:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a323c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a3240:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a3244:	9203      	str	r2, [sp, #12]
 80a3246:	9302      	str	r3, [sp, #8]
 80a3248:	f1b8 0f00 	cmp.w	r8, #0
 80a324c:	d06c      	beq.n	80a3328 <pow+0x164>
 80a324e:	4ba2      	ldr	r3, [pc, #648]	; (80a34d8 <pow+0x314>)
 80a3250:	2200      	movs	r2, #0
 80a3252:	4610      	mov	r0, r2
 80a3254:	4619      	mov	r1, r3
 80a3256:	b00d      	add	sp, #52	; 0x34
 80a3258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a325c:	4620      	mov	r0, r4
 80a325e:	4629      	mov	r1, r5
 80a3260:	f001 f9f4 	bl	80a464c <finite>
 80a3264:	b138      	cbz	r0, 80a3276 <pow+0xb2>
 80a3266:	2200      	movs	r2, #0
 80a3268:	2300      	movs	r3, #0
 80a326a:	4620      	mov	r0, r4
 80a326c:	4629      	mov	r1, r5
 80a326e:	f001 ff2f 	bl	80a50d0 <__aeabi_dcmplt>
 80a3272:	2800      	cmp	r0, #0
 80a3274:	d16a      	bne.n	80a334c <pow+0x188>
 80a3276:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a327a:	4610      	mov	r0, r2
 80a327c:	4619      	mov	r1, r3
 80a327e:	b00d      	add	sp, #52	; 0x34
 80a3280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3284:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3288:	f001 f9e0 	bl	80a464c <finite>
 80a328c:	4680      	mov	r8, r0
 80a328e:	2800      	cmp	r0, #0
 80a3290:	d07d      	beq.n	80a338e <pow+0x1ca>
 80a3292:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3296:	f04f 0a00 	mov.w	sl, #0
 80a329a:	f04f 0b00 	mov.w	fp, #0
 80a329e:	4652      	mov	r2, sl
 80a32a0:	465b      	mov	r3, fp
 80a32a2:	f001 ff0b 	bl	80a50bc <__aeabi_dcmpeq>
 80a32a6:	2800      	cmp	r0, #0
 80a32a8:	d0e5      	beq.n	80a3276 <pow+0xb2>
 80a32aa:	4630      	mov	r0, r6
 80a32ac:	4639      	mov	r1, r7
 80a32ae:	f001 f9cd 	bl	80a464c <finite>
 80a32b2:	2800      	cmp	r0, #0
 80a32b4:	d0df      	beq.n	80a3276 <pow+0xb2>
 80a32b6:	4620      	mov	r0, r4
 80a32b8:	4629      	mov	r1, r5
 80a32ba:	f001 f9c7 	bl	80a464c <finite>
 80a32be:	2800      	cmp	r0, #0
 80a32c0:	d0d9      	beq.n	80a3276 <pow+0xb2>
 80a32c2:	f999 3000 	ldrsb.w	r3, [r9]
 80a32c6:	4883      	ldr	r0, [pc, #524]	; (80a34d4 <pow+0x310>)
 80a32c8:	2104      	movs	r1, #4
 80a32ca:	2200      	movs	r2, #0
 80a32cc:	2b02      	cmp	r3, #2
 80a32ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a32d2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a32d6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a32da:	9003      	str	r0, [sp, #12]
 80a32dc:	9102      	str	r1, [sp, #8]
 80a32de:	920a      	str	r2, [sp, #40]	; 0x28
 80a32e0:	d004      	beq.n	80a32ec <pow+0x128>
 80a32e2:	a802      	add	r0, sp, #8
 80a32e4:	f001 f9b8 	bl	80a4658 <matherr>
 80a32e8:	2800      	cmp	r0, #0
 80a32ea:	d147      	bne.n	80a337c <pow+0x1b8>
 80a32ec:	f7fe fa90 	bl	80a1810 <__errno>
 80a32f0:	2322      	movs	r3, #34	; 0x22
 80a32f2:	6003      	str	r3, [r0, #0]
 80a32f4:	e042      	b.n	80a337c <pow+0x1b8>
 80a32f6:	2200      	movs	r2, #0
 80a32f8:	2300      	movs	r3, #0
 80a32fa:	4620      	mov	r0, r4
 80a32fc:	4629      	mov	r1, r5
 80a32fe:	f001 fedd 	bl	80a50bc <__aeabi_dcmpeq>
 80a3302:	2800      	cmp	r0, #0
 80a3304:	d0b7      	beq.n	80a3276 <pow+0xb2>
 80a3306:	4b74      	ldr	r3, [pc, #464]	; (80a34d8 <pow+0x314>)
 80a3308:	4872      	ldr	r0, [pc, #456]	; (80a34d4 <pow+0x310>)
 80a330a:	2200      	movs	r2, #0
 80a330c:	2101      	movs	r1, #1
 80a330e:	f1b8 0f02 	cmp.w	r8, #2
 80a3312:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80a3316:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a331a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a331e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a3322:	9003      	str	r0, [sp, #12]
 80a3324:	9102      	str	r1, [sp, #8]
 80a3326:	d0a8      	beq.n	80a327a <pow+0xb6>
 80a3328:	a802      	add	r0, sp, #8
 80a332a:	f001 f995 	bl	80a4658 <matherr>
 80a332e:	2800      	cmp	r0, #0
 80a3330:	d07e      	beq.n	80a3430 <pow+0x26c>
 80a3332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3334:	b343      	cbz	r3, 80a3388 <pow+0x1c4>
 80a3336:	f7fe fa6b 	bl	80a1810 <__errno>
 80a333a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a333e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a3340:	6001      	str	r1, [r0, #0]
 80a3342:	4610      	mov	r0, r2
 80a3344:	4619      	mov	r1, r3
 80a3346:	b00d      	add	sp, #52	; 0x34
 80a3348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a334c:	4961      	ldr	r1, [pc, #388]	; (80a34d4 <pow+0x310>)
 80a334e:	f999 3000 	ldrsb.w	r3, [r9]
 80a3352:	2201      	movs	r2, #1
 80a3354:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80a3358:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a335c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a3360:	9103      	str	r1, [sp, #12]
 80a3362:	9202      	str	r2, [sp, #8]
 80a3364:	2b00      	cmp	r3, #0
 80a3366:	d068      	beq.n	80a343a <pow+0x276>
 80a3368:	495c      	ldr	r1, [pc, #368]	; (80a34dc <pow+0x318>)
 80a336a:	2000      	movs	r0, #0
 80a336c:	2b02      	cmp	r3, #2
 80a336e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a3372:	d166      	bne.n	80a3442 <pow+0x27e>
 80a3374:	f7fe fa4c 	bl	80a1810 <__errno>
 80a3378:	2321      	movs	r3, #33	; 0x21
 80a337a:	6003      	str	r3, [r0, #0]
 80a337c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a337e:	b11b      	cbz	r3, 80a3388 <pow+0x1c4>
 80a3380:	f7fe fa46 	bl	80a1810 <__errno>
 80a3384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3386:	6003      	str	r3, [r0, #0]
 80a3388:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a338c:	e775      	b.n	80a327a <pow+0xb6>
 80a338e:	4630      	mov	r0, r6
 80a3390:	4639      	mov	r1, r7
 80a3392:	f001 f95b 	bl	80a464c <finite>
 80a3396:	2800      	cmp	r0, #0
 80a3398:	f43f af7b 	beq.w	80a3292 <pow+0xce>
 80a339c:	4620      	mov	r0, r4
 80a339e:	4629      	mov	r1, r5
 80a33a0:	f001 f954 	bl	80a464c <finite>
 80a33a4:	2800      	cmp	r0, #0
 80a33a6:	f43f af74 	beq.w	80a3292 <pow+0xce>
 80a33aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a33ae:	4610      	mov	r0, r2
 80a33b0:	4619      	mov	r1, r3
 80a33b2:	f001 feb5 	bl	80a5120 <__aeabi_dcmpun>
 80a33b6:	2800      	cmp	r0, #0
 80a33b8:	d16f      	bne.n	80a349a <pow+0x2d6>
 80a33ba:	4b46      	ldr	r3, [pc, #280]	; (80a34d4 <pow+0x310>)
 80a33bc:	f999 8000 	ldrsb.w	r8, [r9]
 80a33c0:	9303      	str	r3, [sp, #12]
 80a33c2:	2303      	movs	r3, #3
 80a33c4:	900a      	str	r0, [sp, #40]	; 0x28
 80a33c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a33ca:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a33ce:	9302      	str	r3, [sp, #8]
 80a33d0:	f1b8 0f00 	cmp.w	r8, #0
 80a33d4:	d13b      	bne.n	80a344e <pow+0x28a>
 80a33d6:	f8df b114 	ldr.w	fp, [pc, #276]	; 80a34ec <pow+0x328>
 80a33da:	f04f 4a60 	mov.w	sl, #3758096384	; 0xe0000000
 80a33de:	2200      	movs	r2, #0
 80a33e0:	2300      	movs	r3, #0
 80a33e2:	4630      	mov	r0, r6
 80a33e4:	4639      	mov	r1, r7
 80a33e6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a33ea:	f001 fe71 	bl	80a50d0 <__aeabi_dcmplt>
 80a33ee:	2800      	cmp	r0, #0
 80a33f0:	f43f af77 	beq.w	80a32e2 <pow+0x11e>
 80a33f4:	2200      	movs	r2, #0
 80a33f6:	4b3a      	ldr	r3, [pc, #232]	; (80a34e0 <pow+0x31c>)
 80a33f8:	4620      	mov	r0, r4
 80a33fa:	4629      	mov	r1, r5
 80a33fc:	f001 fbf6 	bl	80a4bec <__aeabi_dmul>
 80a3400:	4604      	mov	r4, r0
 80a3402:	460d      	mov	r5, r1
 80a3404:	f001 f930 	bl	80a4668 <rint>
 80a3408:	4602      	mov	r2, r0
 80a340a:	460b      	mov	r3, r1
 80a340c:	4620      	mov	r0, r4
 80a340e:	4629      	mov	r1, r5
 80a3410:	f001 fe54 	bl	80a50bc <__aeabi_dcmpeq>
 80a3414:	2800      	cmp	r0, #0
 80a3416:	d13d      	bne.n	80a3494 <pow+0x2d0>
 80a3418:	4b32      	ldr	r3, [pc, #200]	; (80a34e4 <pow+0x320>)
 80a341a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a341e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a3422:	f999 8000 	ldrsb.w	r8, [r9]
 80a3426:	f1b8 0f02 	cmp.w	r8, #2
 80a342a:	f47f af5a 	bne.w	80a32e2 <pow+0x11e>
 80a342e:	e75d      	b.n	80a32ec <pow+0x128>
 80a3430:	f7fe f9ee 	bl	80a1810 <__errno>
 80a3434:	2321      	movs	r3, #33	; 0x21
 80a3436:	6003      	str	r3, [r0, #0]
 80a3438:	e77b      	b.n	80a3332 <pow+0x16e>
 80a343a:	2300      	movs	r3, #0
 80a343c:	2400      	movs	r4, #0
 80a343e:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80a3442:	a802      	add	r0, sp, #8
 80a3444:	f001 f908 	bl	80a4658 <matherr>
 80a3448:	2800      	cmp	r0, #0
 80a344a:	d197      	bne.n	80a337c <pow+0x1b8>
 80a344c:	e792      	b.n	80a3374 <pow+0x1b0>
 80a344e:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 80a34f0 <pow+0x32c>
 80a3452:	f04f 0a00 	mov.w	sl, #0
 80a3456:	2200      	movs	r2, #0
 80a3458:	2300      	movs	r3, #0
 80a345a:	4630      	mov	r0, r6
 80a345c:	4639      	mov	r1, r7
 80a345e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a3462:	f001 fe35 	bl	80a50d0 <__aeabi_dcmplt>
 80a3466:	2800      	cmp	r0, #0
 80a3468:	d0dd      	beq.n	80a3426 <pow+0x262>
 80a346a:	2200      	movs	r2, #0
 80a346c:	4b1c      	ldr	r3, [pc, #112]	; (80a34e0 <pow+0x31c>)
 80a346e:	4620      	mov	r0, r4
 80a3470:	4629      	mov	r1, r5
 80a3472:	f001 fbbb 	bl	80a4bec <__aeabi_dmul>
 80a3476:	4604      	mov	r4, r0
 80a3478:	460d      	mov	r5, r1
 80a347a:	f001 f8f5 	bl	80a4668 <rint>
 80a347e:	4602      	mov	r2, r0
 80a3480:	460b      	mov	r3, r1
 80a3482:	4620      	mov	r0, r4
 80a3484:	4629      	mov	r1, r5
 80a3486:	f001 fe19 	bl	80a50bc <__aeabi_dcmpeq>
 80a348a:	b918      	cbnz	r0, 80a3494 <pow+0x2d0>
 80a348c:	4b13      	ldr	r3, [pc, #76]	; (80a34dc <pow+0x318>)
 80a348e:	2200      	movs	r2, #0
 80a3490:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a3494:	f999 8000 	ldrsb.w	r8, [r9]
 80a3498:	e7c5      	b.n	80a3426 <pow+0x262>
 80a349a:	4a0e      	ldr	r2, [pc, #56]	; (80a34d4 <pow+0x310>)
 80a349c:	f999 9000 	ldrsb.w	r9, [r9]
 80a34a0:	2301      	movs	r3, #1
 80a34a2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80a34a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a34aa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a34ae:	9203      	str	r2, [sp, #12]
 80a34b0:	9302      	str	r3, [sp, #8]
 80a34b2:	f1b9 0f00 	cmp.w	r9, #0
 80a34b6:	d0c0      	beq.n	80a343a <pow+0x276>
 80a34b8:	2200      	movs	r2, #0
 80a34ba:	2300      	movs	r3, #0
 80a34bc:	4610      	mov	r0, r2
 80a34be:	4619      	mov	r1, r3
 80a34c0:	f001 fcbe 	bl	80a4e40 <__aeabi_ddiv>
 80a34c4:	f1b9 0f02 	cmp.w	r9, #2
 80a34c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a34cc:	f43f af52 	beq.w	80a3374 <pow+0x1b0>
 80a34d0:	e7b7      	b.n	80a3442 <pow+0x27e>
 80a34d2:	bf00      	nop
 80a34d4:	080a673c 	.word	0x080a673c
 80a34d8:	3ff00000 	.word	0x3ff00000
 80a34dc:	fff00000 	.word	0xfff00000
 80a34e0:	3fe00000 	.word	0x3fe00000
 80a34e4:	c7efffff 	.word	0xc7efffff
 80a34e8:	20000328 	.word	0x20000328
 80a34ec:	47efffff 	.word	0x47efffff
 80a34f0:	7ff00000 	.word	0x7ff00000
 80a34f4:	00000000 	.word	0x00000000

080a34f8 <__ieee754_log>:
 80a34f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a34fc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a3500:	b085      	sub	sp, #20
 80a3502:	4606      	mov	r6, r0
 80a3504:	460f      	mov	r7, r1
 80a3506:	460b      	mov	r3, r1
 80a3508:	da5a      	bge.n	80a35c0 <__ieee754_log+0xc8>
 80a350a:	4602      	mov	r2, r0
 80a350c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80a3510:	4322      	orrs	r2, r4
 80a3512:	f000 80f7 	beq.w	80a3704 <__ieee754_log+0x20c>
 80a3516:	2900      	cmp	r1, #0
 80a3518:	f2c0 8179 	blt.w	80a380e <__ieee754_log+0x316>
 80a351c:	2200      	movs	r2, #0
 80a351e:	4bd6      	ldr	r3, [pc, #856]	; (80a3878 <__ieee754_log+0x380>)
 80a3520:	f001 fb64 	bl	80a4bec <__aeabi_dmul>
 80a3524:	460b      	mov	r3, r1
 80a3526:	460f      	mov	r7, r1
 80a3528:	49d4      	ldr	r1, [pc, #848]	; (80a387c <__ieee754_log+0x384>)
 80a352a:	4606      	mov	r6, r0
 80a352c:	428b      	cmp	r3, r1
 80a352e:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80a3532:	dc49      	bgt.n	80a35c8 <__ieee754_log+0xd0>
 80a3534:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80a3538:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
 80a353c:	f604 7464 	addw	r4, r4, #3940	; 0xf64
 80a3540:	f404 1e80 	and.w	lr, r4, #1048576	; 0x100000
 80a3544:	f08e 517f 	eor.w	r1, lr, #1069547520	; 0x3fc00000
 80a3548:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 80a354c:	151b      	asrs	r3, r3, #20
 80a354e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a3552:	ea41 0705 	orr.w	r7, r1, r5
 80a3556:	189c      	adds	r4, r3, r2
 80a3558:	4630      	mov	r0, r6
 80a355a:	2200      	movs	r2, #0
 80a355c:	4bc8      	ldr	r3, [pc, #800]	; (80a3880 <__ieee754_log+0x388>)
 80a355e:	4639      	mov	r1, r7
 80a3560:	eb04 541e 	add.w	r4, r4, lr, lsr #20
 80a3564:	f001 f98e 	bl	80a4884 <__aeabi_dsub>
 80a3568:	1cab      	adds	r3, r5, #2
 80a356a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a356e:	2b02      	cmp	r3, #2
 80a3570:	4682      	mov	sl, r0
 80a3572:	468b      	mov	fp, r1
 80a3574:	f04f 0200 	mov.w	r2, #0
 80a3578:	dc2f      	bgt.n	80a35da <__ieee754_log+0xe2>
 80a357a:	2300      	movs	r3, #0
 80a357c:	f001 fd9e 	bl	80a50bc <__aeabi_dcmpeq>
 80a3580:	2800      	cmp	r0, #0
 80a3582:	f000 80c8 	beq.w	80a3716 <__ieee754_log+0x21e>
 80a3586:	2c00      	cmp	r4, #0
 80a3588:	f000 814a 	beq.w	80a3820 <__ieee754_log+0x328>
 80a358c:	4620      	mov	r0, r4
 80a358e:	f001 fac7 	bl	80a4b20 <__aeabi_i2d>
 80a3592:	a3a5      	add	r3, pc, #660	; (adr r3, 80a3828 <__ieee754_log+0x330>)
 80a3594:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3598:	4606      	mov	r6, r0
 80a359a:	460f      	mov	r7, r1
 80a359c:	f001 fb26 	bl	80a4bec <__aeabi_dmul>
 80a35a0:	a3a3      	add	r3, pc, #652	; (adr r3, 80a3830 <__ieee754_log+0x338>)
 80a35a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a35a6:	4604      	mov	r4, r0
 80a35a8:	460d      	mov	r5, r1
 80a35aa:	4630      	mov	r0, r6
 80a35ac:	4639      	mov	r1, r7
 80a35ae:	f001 fb1d 	bl	80a4bec <__aeabi_dmul>
 80a35b2:	4602      	mov	r2, r0
 80a35b4:	460b      	mov	r3, r1
 80a35b6:	4620      	mov	r0, r4
 80a35b8:	4629      	mov	r1, r5
 80a35ba:	f001 f965 	bl	80a4888 <__adddf3>
 80a35be:	e009      	b.n	80a35d4 <__ieee754_log+0xdc>
 80a35c0:	49ae      	ldr	r1, [pc, #696]	; (80a387c <__ieee754_log+0x384>)
 80a35c2:	2200      	movs	r2, #0
 80a35c4:	428b      	cmp	r3, r1
 80a35c6:	ddb5      	ble.n	80a3534 <__ieee754_log+0x3c>
 80a35c8:	4632      	mov	r2, r6
 80a35ca:	463b      	mov	r3, r7
 80a35cc:	4630      	mov	r0, r6
 80a35ce:	4639      	mov	r1, r7
 80a35d0:	f001 f95a 	bl	80a4888 <__adddf3>
 80a35d4:	b005      	add	sp, #20
 80a35d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a35da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a35de:	f001 f953 	bl	80a4888 <__adddf3>
 80a35e2:	4602      	mov	r2, r0
 80a35e4:	460b      	mov	r3, r1
 80a35e6:	4650      	mov	r0, sl
 80a35e8:	4659      	mov	r1, fp
 80a35ea:	f001 fc29 	bl	80a4e40 <__aeabi_ddiv>
 80a35ee:	4606      	mov	r6, r0
 80a35f0:	4620      	mov	r0, r4
 80a35f2:	460f      	mov	r7, r1
 80a35f4:	f001 fa94 	bl	80a4b20 <__aeabi_i2d>
 80a35f8:	4632      	mov	r2, r6
 80a35fa:	e9cd 0100 	strd	r0, r1, [sp]
 80a35fe:	463b      	mov	r3, r7
 80a3600:	4630      	mov	r0, r6
 80a3602:	4639      	mov	r1, r7
 80a3604:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80a3608:	f001 faf0 	bl	80a4bec <__aeabi_dmul>
 80a360c:	4602      	mov	r2, r0
 80a360e:	460b      	mov	r3, r1
 80a3610:	4680      	mov	r8, r0
 80a3612:	4689      	mov	r9, r1
 80a3614:	f001 faea 	bl	80a4bec <__aeabi_dmul>
 80a3618:	a387      	add	r3, pc, #540	; (adr r3, 80a3838 <__ieee754_log+0x340>)
 80a361a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a361e:	4606      	mov	r6, r0
 80a3620:	460f      	mov	r7, r1
 80a3622:	f001 fae3 	bl	80a4bec <__aeabi_dmul>
 80a3626:	a386      	add	r3, pc, #536	; (adr r3, 80a3840 <__ieee754_log+0x348>)
 80a3628:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a362c:	f001 f92c 	bl	80a4888 <__adddf3>
 80a3630:	4632      	mov	r2, r6
 80a3632:	463b      	mov	r3, r7
 80a3634:	f001 fada 	bl	80a4bec <__aeabi_dmul>
 80a3638:	a383      	add	r3, pc, #524	; (adr r3, 80a3848 <__ieee754_log+0x350>)
 80a363a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a363e:	f001 f923 	bl	80a4888 <__adddf3>
 80a3642:	4632      	mov	r2, r6
 80a3644:	463b      	mov	r3, r7
 80a3646:	f001 fad1 	bl	80a4bec <__aeabi_dmul>
 80a364a:	a381      	add	r3, pc, #516	; (adr r3, 80a3850 <__ieee754_log+0x358>)
 80a364c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3650:	f001 f91a 	bl	80a4888 <__adddf3>
 80a3654:	4642      	mov	r2, r8
 80a3656:	464b      	mov	r3, r9
 80a3658:	f001 fac8 	bl	80a4bec <__aeabi_dmul>
 80a365c:	a37e      	add	r3, pc, #504	; (adr r3, 80a3858 <__ieee754_log+0x360>)
 80a365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3662:	4680      	mov	r8, r0
 80a3664:	4689      	mov	r9, r1
 80a3666:	4630      	mov	r0, r6
 80a3668:	4639      	mov	r1, r7
 80a366a:	f001 fabf 	bl	80a4bec <__aeabi_dmul>
 80a366e:	a37c      	add	r3, pc, #496	; (adr r3, 80a3860 <__ieee754_log+0x368>)
 80a3670:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3674:	f001 f908 	bl	80a4888 <__adddf3>
 80a3678:	4632      	mov	r2, r6
 80a367a:	463b      	mov	r3, r7
 80a367c:	f001 fab6 	bl	80a4bec <__aeabi_dmul>
 80a3680:	a379      	add	r3, pc, #484	; (adr r3, 80a3868 <__ieee754_log+0x370>)
 80a3682:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3686:	f001 f8ff 	bl	80a4888 <__adddf3>
 80a368a:	4632      	mov	r2, r6
 80a368c:	463b      	mov	r3, r7
 80a368e:	f001 faad 	bl	80a4bec <__aeabi_dmul>
 80a3692:	460b      	mov	r3, r1
 80a3694:	4602      	mov	r2, r0
 80a3696:	4649      	mov	r1, r9
 80a3698:	4640      	mov	r0, r8
 80a369a:	f001 f8f5 	bl	80a4888 <__adddf3>
 80a369e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80a36a2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80a36a6:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80a36aa:	3551      	adds	r5, #81	; 0x51
 80a36ac:	431d      	orrs	r5, r3
 80a36ae:	2d00      	cmp	r5, #0
 80a36b0:	4680      	mov	r8, r0
 80a36b2:	4689      	mov	r9, r1
 80a36b4:	dd56      	ble.n	80a3764 <__ieee754_log+0x26c>
 80a36b6:	2200      	movs	r2, #0
 80a36b8:	4b72      	ldr	r3, [pc, #456]	; (80a3884 <__ieee754_log+0x38c>)
 80a36ba:	4650      	mov	r0, sl
 80a36bc:	4659      	mov	r1, fp
 80a36be:	f001 fa95 	bl	80a4bec <__aeabi_dmul>
 80a36c2:	4652      	mov	r2, sl
 80a36c4:	465b      	mov	r3, fp
 80a36c6:	f001 fa91 	bl	80a4bec <__aeabi_dmul>
 80a36ca:	4606      	mov	r6, r0
 80a36cc:	460f      	mov	r7, r1
 80a36ce:	2c00      	cmp	r4, #0
 80a36d0:	d168      	bne.n	80a37a4 <__ieee754_log+0x2ac>
 80a36d2:	4632      	mov	r2, r6
 80a36d4:	463b      	mov	r3, r7
 80a36d6:	4640      	mov	r0, r8
 80a36d8:	4649      	mov	r1, r9
 80a36da:	f001 f8d5 	bl	80a4888 <__adddf3>
 80a36de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a36e2:	f001 fa83 	bl	80a4bec <__aeabi_dmul>
 80a36e6:	4602      	mov	r2, r0
 80a36e8:	460b      	mov	r3, r1
 80a36ea:	4630      	mov	r0, r6
 80a36ec:	4639      	mov	r1, r7
 80a36ee:	f001 f8c9 	bl	80a4884 <__aeabi_dsub>
 80a36f2:	4602      	mov	r2, r0
 80a36f4:	460b      	mov	r3, r1
 80a36f6:	4650      	mov	r0, sl
 80a36f8:	4659      	mov	r1, fp
 80a36fa:	f001 f8c3 	bl	80a4884 <__aeabi_dsub>
 80a36fe:	b005      	add	sp, #20
 80a3700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3704:	2200      	movs	r2, #0
 80a3706:	2300      	movs	r3, #0
 80a3708:	2000      	movs	r0, #0
 80a370a:	495f      	ldr	r1, [pc, #380]	; (80a3888 <__ieee754_log+0x390>)
 80a370c:	f001 fb98 	bl	80a4e40 <__aeabi_ddiv>
 80a3710:	b005      	add	sp, #20
 80a3712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3716:	a356      	add	r3, pc, #344	; (adr r3, 80a3870 <__ieee754_log+0x378>)
 80a3718:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a371c:	4650      	mov	r0, sl
 80a371e:	4659      	mov	r1, fp
 80a3720:	f001 fa64 	bl	80a4bec <__aeabi_dmul>
 80a3724:	4602      	mov	r2, r0
 80a3726:	460b      	mov	r3, r1
 80a3728:	2000      	movs	r0, #0
 80a372a:	4956      	ldr	r1, [pc, #344]	; (80a3884 <__ieee754_log+0x38c>)
 80a372c:	f001 f8aa 	bl	80a4884 <__aeabi_dsub>
 80a3730:	4652      	mov	r2, sl
 80a3732:	4606      	mov	r6, r0
 80a3734:	460f      	mov	r7, r1
 80a3736:	465b      	mov	r3, fp
 80a3738:	4650      	mov	r0, sl
 80a373a:	4659      	mov	r1, fp
 80a373c:	f001 fa56 	bl	80a4bec <__aeabi_dmul>
 80a3740:	4602      	mov	r2, r0
 80a3742:	460b      	mov	r3, r1
 80a3744:	4630      	mov	r0, r6
 80a3746:	4639      	mov	r1, r7
 80a3748:	f001 fa50 	bl	80a4bec <__aeabi_dmul>
 80a374c:	4606      	mov	r6, r0
 80a374e:	460f      	mov	r7, r1
 80a3750:	2c00      	cmp	r4, #0
 80a3752:	f040 809b 	bne.w	80a388c <__ieee754_log+0x394>
 80a3756:	4602      	mov	r2, r0
 80a3758:	460b      	mov	r3, r1
 80a375a:	4650      	mov	r0, sl
 80a375c:	4659      	mov	r1, fp
 80a375e:	f001 f891 	bl	80a4884 <__aeabi_dsub>
 80a3762:	e737      	b.n	80a35d4 <__ieee754_log+0xdc>
 80a3764:	2c00      	cmp	r4, #0
 80a3766:	f000 80a5 	beq.w	80a38b4 <__ieee754_log+0x3bc>
 80a376a:	a32f      	add	r3, pc, #188	; (adr r3, 80a3828 <__ieee754_log+0x330>)
 80a376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3770:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3774:	f001 fa3a 	bl	80a4bec <__aeabi_dmul>
 80a3778:	4642      	mov	r2, r8
 80a377a:	464b      	mov	r3, r9
 80a377c:	4604      	mov	r4, r0
 80a377e:	460d      	mov	r5, r1
 80a3780:	4650      	mov	r0, sl
 80a3782:	4659      	mov	r1, fp
 80a3784:	f001 f87e 	bl	80a4884 <__aeabi_dsub>
 80a3788:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a378c:	f001 fa2e 	bl	80a4bec <__aeabi_dmul>
 80a3790:	a327      	add	r3, pc, #156	; (adr r3, 80a3830 <__ieee754_log+0x338>)
 80a3792:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3796:	4606      	mov	r6, r0
 80a3798:	460f      	mov	r7, r1
 80a379a:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a379e:	f001 fa25 	bl	80a4bec <__aeabi_dmul>
 80a37a2:	e021      	b.n	80a37e8 <__ieee754_log+0x2f0>
 80a37a4:	a320      	add	r3, pc, #128	; (adr r3, 80a3828 <__ieee754_log+0x330>)
 80a37a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a37aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a37ae:	f001 fa1d 	bl	80a4bec <__aeabi_dmul>
 80a37b2:	4632      	mov	r2, r6
 80a37b4:	463b      	mov	r3, r7
 80a37b6:	4604      	mov	r4, r0
 80a37b8:	460d      	mov	r5, r1
 80a37ba:	4640      	mov	r0, r8
 80a37bc:	4649      	mov	r1, r9
 80a37be:	f001 f863 	bl	80a4888 <__adddf3>
 80a37c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a37c6:	f001 fa11 	bl	80a4bec <__aeabi_dmul>
 80a37ca:	a319      	add	r3, pc, #100	; (adr r3, 80a3830 <__ieee754_log+0x338>)
 80a37cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a37d0:	4680      	mov	r8, r0
 80a37d2:	4689      	mov	r9, r1
 80a37d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a37d8:	f001 fa08 	bl	80a4bec <__aeabi_dmul>
 80a37dc:	4602      	mov	r2, r0
 80a37de:	460b      	mov	r3, r1
 80a37e0:	4640      	mov	r0, r8
 80a37e2:	4649      	mov	r1, r9
 80a37e4:	f001 f850 	bl	80a4888 <__adddf3>
 80a37e8:	4602      	mov	r2, r0
 80a37ea:	460b      	mov	r3, r1
 80a37ec:	4630      	mov	r0, r6
 80a37ee:	4639      	mov	r1, r7
 80a37f0:	f001 f848 	bl	80a4884 <__aeabi_dsub>
 80a37f4:	4652      	mov	r2, sl
 80a37f6:	465b      	mov	r3, fp
 80a37f8:	f001 f844 	bl	80a4884 <__aeabi_dsub>
 80a37fc:	4602      	mov	r2, r0
 80a37fe:	460b      	mov	r3, r1
 80a3800:	4620      	mov	r0, r4
 80a3802:	4629      	mov	r1, r5
 80a3804:	f001 f83e 	bl	80a4884 <__aeabi_dsub>
 80a3808:	b005      	add	sp, #20
 80a380a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a380e:	4602      	mov	r2, r0
 80a3810:	460b      	mov	r3, r1
 80a3812:	f001 f837 	bl	80a4884 <__aeabi_dsub>
 80a3816:	2200      	movs	r2, #0
 80a3818:	2300      	movs	r3, #0
 80a381a:	f001 fb11 	bl	80a4e40 <__aeabi_ddiv>
 80a381e:	e6d9      	b.n	80a35d4 <__ieee754_log+0xdc>
 80a3820:	2000      	movs	r0, #0
 80a3822:	2100      	movs	r1, #0
 80a3824:	e6d6      	b.n	80a35d4 <__ieee754_log+0xdc>
 80a3826:	bf00      	nop
 80a3828:	fee00000 	.word	0xfee00000
 80a382c:	3fe62e42 	.word	0x3fe62e42
 80a3830:	35793c76 	.word	0x35793c76
 80a3834:	3dea39ef 	.word	0x3dea39ef
 80a3838:	df3e5244 	.word	0xdf3e5244
 80a383c:	3fc2f112 	.word	0x3fc2f112
 80a3840:	96cb03de 	.word	0x96cb03de
 80a3844:	3fc74664 	.word	0x3fc74664
 80a3848:	94229359 	.word	0x94229359
 80a384c:	3fd24924 	.word	0x3fd24924
 80a3850:	55555593 	.word	0x55555593
 80a3854:	3fe55555 	.word	0x3fe55555
 80a3858:	d078c69f 	.word	0xd078c69f
 80a385c:	3fc39a09 	.word	0x3fc39a09
 80a3860:	1d8e78af 	.word	0x1d8e78af
 80a3864:	3fcc71c5 	.word	0x3fcc71c5
 80a3868:	9997fa04 	.word	0x9997fa04
 80a386c:	3fd99999 	.word	0x3fd99999
 80a3870:	55555555 	.word	0x55555555
 80a3874:	3fd55555 	.word	0x3fd55555
 80a3878:	43500000 	.word	0x43500000
 80a387c:	7fefffff 	.word	0x7fefffff
 80a3880:	3ff00000 	.word	0x3ff00000
 80a3884:	3fe00000 	.word	0x3fe00000
 80a3888:	c3500000 	.word	0xc3500000
 80a388c:	4620      	mov	r0, r4
 80a388e:	f001 f947 	bl	80a4b20 <__aeabi_i2d>
 80a3892:	a30f      	add	r3, pc, #60	; (adr r3, 80a38d0 <__ieee754_log+0x3d8>)
 80a3894:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3898:	4680      	mov	r8, r0
 80a389a:	4689      	mov	r9, r1
 80a389c:	f001 f9a6 	bl	80a4bec <__aeabi_dmul>
 80a38a0:	a30d      	add	r3, pc, #52	; (adr r3, 80a38d8 <__ieee754_log+0x3e0>)
 80a38a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a38a6:	4604      	mov	r4, r0
 80a38a8:	460d      	mov	r5, r1
 80a38aa:	4640      	mov	r0, r8
 80a38ac:	4649      	mov	r1, r9
 80a38ae:	f001 f99d 	bl	80a4bec <__aeabi_dmul>
 80a38b2:	e799      	b.n	80a37e8 <__ieee754_log+0x2f0>
 80a38b4:	4602      	mov	r2, r0
 80a38b6:	460b      	mov	r3, r1
 80a38b8:	4650      	mov	r0, sl
 80a38ba:	4659      	mov	r1, fp
 80a38bc:	f000 ffe2 	bl	80a4884 <__aeabi_dsub>
 80a38c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a38c4:	f001 f992 	bl	80a4bec <__aeabi_dmul>
 80a38c8:	e713      	b.n	80a36f2 <__ieee754_log+0x1fa>
 80a38ca:	bf00      	nop
 80a38cc:	f3af 8000 	nop.w
 80a38d0:	fee00000 	.word	0xfee00000
 80a38d4:	3fe62e42 	.word	0x3fe62e42
 80a38d8:	35793c76 	.word	0x35793c76
 80a38dc:	3dea39ef 	.word	0x3dea39ef

080a38e0 <__ieee754_log10>:
 80a38e0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a38e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a38e8:	4604      	mov	r4, r0
 80a38ea:	460d      	mov	r5, r1
 80a38ec:	460b      	mov	r3, r1
 80a38ee:	da1a      	bge.n	80a3926 <__ieee754_log10+0x46>
 80a38f0:	4602      	mov	r2, r0
 80a38f2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a38f6:	4332      	orrs	r2, r6
 80a38f8:	d058      	beq.n	80a39ac <__ieee754_log10+0xcc>
 80a38fa:	2900      	cmp	r1, #0
 80a38fc:	db5e      	blt.n	80a39bc <__ieee754_log10+0xdc>
 80a38fe:	2200      	movs	r2, #0
 80a3900:	4b39      	ldr	r3, [pc, #228]	; (80a39e8 <__ieee754_log10+0x108>)
 80a3902:	f001 f973 	bl	80a4bec <__aeabi_dmul>
 80a3906:	460b      	mov	r3, r1
 80a3908:	460d      	mov	r5, r1
 80a390a:	4938      	ldr	r1, [pc, #224]	; (80a39ec <__ieee754_log10+0x10c>)
 80a390c:	4604      	mov	r4, r0
 80a390e:	428b      	cmp	r3, r1
 80a3910:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80a3914:	dd0b      	ble.n	80a392e <__ieee754_log10+0x4e>
 80a3916:	4622      	mov	r2, r4
 80a3918:	462b      	mov	r3, r5
 80a391a:	4620      	mov	r0, r4
 80a391c:	4629      	mov	r1, r5
 80a391e:	f000 ffb3 	bl	80a4888 <__adddf3>
 80a3922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3926:	4931      	ldr	r1, [pc, #196]	; (80a39ec <__ieee754_log10+0x10c>)
 80a3928:	2200      	movs	r2, #0
 80a392a:	428b      	cmp	r3, r1
 80a392c:	dcf3      	bgt.n	80a3916 <__ieee754_log10+0x36>
 80a392e:	1518      	asrs	r0, r3, #20
 80a3930:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80a3934:	4410      	add	r0, r2
 80a3936:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 80a393a:	4448      	add	r0, r9
 80a393c:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80a3940:	f001 f8ee 	bl	80a4b20 <__aeabi_i2d>
 80a3944:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80a3948:	3303      	adds	r3, #3
 80a394a:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80a394e:	4606      	mov	r6, r0
 80a3950:	460f      	mov	r7, r1
 80a3952:	4620      	mov	r0, r4
 80a3954:	4629      	mov	r1, r5
 80a3956:	f7ff fdcf 	bl	80a34f8 <__ieee754_log>
 80a395a:	a31d      	add	r3, pc, #116	; (adr r3, 80a39d0 <__ieee754_log10+0xf0>)
 80a395c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3960:	4680      	mov	r8, r0
 80a3962:	4689      	mov	r9, r1
 80a3964:	4630      	mov	r0, r6
 80a3966:	4639      	mov	r1, r7
 80a3968:	f001 f940 	bl	80a4bec <__aeabi_dmul>
 80a396c:	a31a      	add	r3, pc, #104	; (adr r3, 80a39d8 <__ieee754_log10+0xf8>)
 80a396e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3972:	4604      	mov	r4, r0
 80a3974:	460d      	mov	r5, r1
 80a3976:	4640      	mov	r0, r8
 80a3978:	4649      	mov	r1, r9
 80a397a:	f001 f937 	bl	80a4bec <__aeabi_dmul>
 80a397e:	4602      	mov	r2, r0
 80a3980:	460b      	mov	r3, r1
 80a3982:	4620      	mov	r0, r4
 80a3984:	4629      	mov	r1, r5
 80a3986:	f000 ff7f 	bl	80a4888 <__adddf3>
 80a398a:	a315      	add	r3, pc, #84	; (adr r3, 80a39e0 <__ieee754_log10+0x100>)
 80a398c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3990:	4604      	mov	r4, r0
 80a3992:	460d      	mov	r5, r1
 80a3994:	4630      	mov	r0, r6
 80a3996:	4639      	mov	r1, r7
 80a3998:	f001 f928 	bl	80a4bec <__aeabi_dmul>
 80a399c:	4602      	mov	r2, r0
 80a399e:	460b      	mov	r3, r1
 80a39a0:	4620      	mov	r0, r4
 80a39a2:	4629      	mov	r1, r5
 80a39a4:	f000 ff70 	bl	80a4888 <__adddf3>
 80a39a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a39ac:	2200      	movs	r2, #0
 80a39ae:	2300      	movs	r3, #0
 80a39b0:	2000      	movs	r0, #0
 80a39b2:	490f      	ldr	r1, [pc, #60]	; (80a39f0 <__ieee754_log10+0x110>)
 80a39b4:	f001 fa44 	bl	80a4e40 <__aeabi_ddiv>
 80a39b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a39bc:	4602      	mov	r2, r0
 80a39be:	460b      	mov	r3, r1
 80a39c0:	f000 ff60 	bl	80a4884 <__aeabi_dsub>
 80a39c4:	2200      	movs	r2, #0
 80a39c6:	2300      	movs	r3, #0
 80a39c8:	f001 fa3a 	bl	80a4e40 <__aeabi_ddiv>
 80a39cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a39d0:	11f12b36 	.word	0x11f12b36
 80a39d4:	3d59fef3 	.word	0x3d59fef3
 80a39d8:	1526e50e 	.word	0x1526e50e
 80a39dc:	3fdbcb7b 	.word	0x3fdbcb7b
 80a39e0:	509f6000 	.word	0x509f6000
 80a39e4:	3fd34413 	.word	0x3fd34413
 80a39e8:	43500000 	.word	0x43500000
 80a39ec:	7fefffff 	.word	0x7fefffff
 80a39f0:	c3500000 	.word	0xc3500000
 80a39f4:	00000000 	.word	0x00000000

080a39f8 <__ieee754_pow>:
 80a39f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a39fc:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 80a3a00:	ea58 0902 	orrs.w	r9, r8, r2
 80a3a04:	b093      	sub	sp, #76	; 0x4c
 80a3a06:	d03c      	beq.n	80a3a82 <__ieee754_pow+0x8a>
 80a3a08:	4c71      	ldr	r4, [pc, #452]	; (80a3bd0 <__ieee754_pow+0x1d8>)
 80a3a0a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a3a0e:	42a6      	cmp	r6, r4
 80a3a10:	4683      	mov	fp, r0
 80a3a12:	460d      	mov	r5, r1
 80a3a14:	dd0c      	ble.n	80a3a30 <__ieee754_pow+0x38>
 80a3a16:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 80a3a1a:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80a3a1e:	ea56 000b 	orrs.w	r0, r6, fp
 80a3a22:	d138      	bne.n	80a3a96 <__ieee754_pow+0x9e>
 80a3a24:	4683      	mov	fp, r0
 80a3a26:	496b      	ldr	r1, [pc, #428]	; (80a3bd4 <__ieee754_pow+0x1dc>)
 80a3a28:	4658      	mov	r0, fp
 80a3a2a:	b013      	add	sp, #76	; 0x4c
 80a3a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3a30:	469a      	mov	sl, r3
 80a3a32:	4696      	mov	lr, r2
 80a3a34:	d02b      	beq.n	80a3a8e <__ieee754_pow+0x96>
 80a3a36:	45a0      	cmp	r8, r4
 80a3a38:	dced      	bgt.n	80a3a16 <__ieee754_pow+0x1e>
 80a3a3a:	4c65      	ldr	r4, [pc, #404]	; (80a3bd0 <__ieee754_pow+0x1d8>)
 80a3a3c:	45a0      	cmp	r8, r4
 80a3a3e:	d078      	beq.n	80a3b32 <__ieee754_pow+0x13a>
 80a3a40:	2d00      	cmp	r5, #0
 80a3a42:	460f      	mov	r7, r1
 80a3a44:	4681      	mov	r9, r0
 80a3a46:	e9cd 2300 	strd	r2, r3, [sp]
 80a3a4a:	db76      	blt.n	80a3b3a <__ieee754_pow+0x142>
 80a3a4c:	2400      	movs	r4, #0
 80a3a4e:	f1be 0f00 	cmp.w	lr, #0
 80a3a52:	d127      	bne.n	80a3aa4 <__ieee754_pow+0xac>
 80a3a54:	4b5e      	ldr	r3, [pc, #376]	; (80a3bd0 <__ieee754_pow+0x1d8>)
 80a3a56:	4598      	cmp	r8, r3
 80a3a58:	f000 808b 	beq.w	80a3b72 <__ieee754_pow+0x17a>
 80a3a5c:	4b5d      	ldr	r3, [pc, #372]	; (80a3bd4 <__ieee754_pow+0x1dc>)
 80a3a5e:	4598      	cmp	r8, r3
 80a3a60:	d052      	beq.n	80a3b08 <__ieee754_pow+0x110>
 80a3a62:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
 80a3a66:	f000 83c9 	beq.w	80a41fc <__ieee754_pow+0x804>
 80a3a6a:	4b5b      	ldr	r3, [pc, #364]	; (80a3bd8 <__ieee754_pow+0x1e0>)
 80a3a6c:	459a      	cmp	sl, r3
 80a3a6e:	d119      	bne.n	80a3aa4 <__ieee754_pow+0xac>
 80a3a70:	2d00      	cmp	r5, #0
 80a3a72:	db17      	blt.n	80a3aa4 <__ieee754_pow+0xac>
 80a3a74:	4648      	mov	r0, r9
 80a3a76:	4639      	mov	r1, r7
 80a3a78:	b013      	add	sp, #76	; 0x4c
 80a3a7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3a7e:	f000 bd1d 	b.w	80a44bc <__ieee754_sqrt>
 80a3a82:	46cb      	mov	fp, r9
 80a3a84:	4658      	mov	r0, fp
 80a3a86:	4953      	ldr	r1, [pc, #332]	; (80a3bd4 <__ieee754_pow+0x1dc>)
 80a3a88:	b013      	add	sp, #76	; 0x4c
 80a3a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3a8e:	2800      	cmp	r0, #0
 80a3a90:	d1c1      	bne.n	80a3a16 <__ieee754_pow+0x1e>
 80a3a92:	45b0      	cmp	r8, r6
 80a3a94:	ddd1      	ble.n	80a3a3a <__ieee754_pow+0x42>
 80a3a96:	4851      	ldr	r0, [pc, #324]	; (80a3bdc <__ieee754_pow+0x1e4>)
 80a3a98:	b013      	add	sp, #76	; 0x4c
 80a3a9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3a9e:	f000 bddd 	b.w	80a465c <nan>
 80a3aa2:	2400      	movs	r4, #0
 80a3aa4:	4648      	mov	r0, r9
 80a3aa6:	4639      	mov	r1, r7
 80a3aa8:	f000 fdcc 	bl	80a4644 <fabs>
 80a3aac:	f1bb 0f00 	cmp.w	fp, #0
 80a3ab0:	d01c      	beq.n	80a3aec <__ieee754_pow+0xf4>
 80a3ab2:	0fed      	lsrs	r5, r5, #31
 80a3ab4:	3d01      	subs	r5, #1
 80a3ab6:	ea54 0305 	orrs.w	r3, r4, r5
 80a3aba:	d070      	beq.n	80a3b9e <__ieee754_pow+0x1a6>
 80a3abc:	4b48      	ldr	r3, [pc, #288]	; (80a3be0 <__ieee754_pow+0x1e8>)
 80a3abe:	4598      	cmp	r8, r3
 80a3ac0:	f340 8094 	ble.w	80a3bec <__ieee754_pow+0x1f4>
 80a3ac4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80a3ac8:	4598      	cmp	r8, r3
 80a3aca:	f340 840d 	ble.w	80a42e8 <__ieee754_pow+0x8f0>
 80a3ace:	4b45      	ldr	r3, [pc, #276]	; (80a3be4 <__ieee754_pow+0x1ec>)
 80a3ad0:	429e      	cmp	r6, r3
 80a3ad2:	dd70      	ble.n	80a3bb6 <__ieee754_pow+0x1be>
 80a3ad4:	f1ba 0f00 	cmp.w	sl, #0
 80a3ad8:	dd70      	ble.n	80a3bbc <__ieee754_pow+0x1c4>
 80a3ada:	a33b      	add	r3, pc, #236	; (adr r3, 80a3bc8 <__ieee754_pow+0x1d0>)
 80a3adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3ae0:	4610      	mov	r0, r2
 80a3ae2:	4619      	mov	r1, r3
 80a3ae4:	f001 f882 	bl	80a4bec <__aeabi_dmul>
 80a3ae8:	4683      	mov	fp, r0
 80a3aea:	e79d      	b.n	80a3a28 <__ieee754_pow+0x30>
 80a3aec:	b126      	cbz	r6, 80a3af8 <__ieee754_pow+0x100>
 80a3aee:	4b39      	ldr	r3, [pc, #228]	; (80a3bd4 <__ieee754_pow+0x1dc>)
 80a3af0:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80a3af4:	429a      	cmp	r2, r3
 80a3af6:	d1dc      	bne.n	80a3ab2 <__ieee754_pow+0xba>
 80a3af8:	f1ba 0f00 	cmp.w	sl, #0
 80a3afc:	f2c0 83b7 	blt.w	80a426e <__ieee754_pow+0x876>
 80a3b00:	2d00      	cmp	r5, #0
 80a3b02:	db08      	blt.n	80a3b16 <__ieee754_pow+0x11e>
 80a3b04:	4683      	mov	fp, r0
 80a3b06:	e78f      	b.n	80a3a28 <__ieee754_pow+0x30>
 80a3b08:	f1ba 0f00 	cmp.w	sl, #0
 80a3b0c:	f2c0 845e 	blt.w	80a43cc <__ieee754_pow+0x9d4>
 80a3b10:	46cb      	mov	fp, r9
 80a3b12:	4639      	mov	r1, r7
 80a3b14:	e788      	b.n	80a3a28 <__ieee754_pow+0x30>
 80a3b16:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 80a3b1a:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80a3b1e:	ea56 0304 	orrs.w	r3, r6, r4
 80a3b22:	f000 8483 	beq.w	80a442c <__ieee754_pow+0xa34>
 80a3b26:	2c01      	cmp	r4, #1
 80a3b28:	d1ec      	bne.n	80a3b04 <__ieee754_pow+0x10c>
 80a3b2a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a3b2e:	4683      	mov	fp, r0
 80a3b30:	e77a      	b.n	80a3a28 <__ieee754_pow+0x30>
 80a3b32:	f1be 0f00 	cmp.w	lr, #0
 80a3b36:	d083      	beq.n	80a3a40 <__ieee754_pow+0x48>
 80a3b38:	e76d      	b.n	80a3a16 <__ieee754_pow+0x1e>
 80a3b3a:	4b2b      	ldr	r3, [pc, #172]	; (80a3be8 <__ieee754_pow+0x1f0>)
 80a3b3c:	4598      	cmp	r8, r3
 80a3b3e:	dc2c      	bgt.n	80a3b9a <__ieee754_pow+0x1a2>
 80a3b40:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80a3b44:	4598      	cmp	r8, r3
 80a3b46:	dd81      	ble.n	80a3a4c <__ieee754_pow+0x54>
 80a3b48:	ea4f 5328 	mov.w	r3, r8, asr #20
 80a3b4c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a3b50:	2b14      	cmp	r3, #20
 80a3b52:	f340 8453 	ble.w	80a43fc <__ieee754_pow+0xa04>
 80a3b56:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80a3b5a:	fa2e f203 	lsr.w	r2, lr, r3
 80a3b5e:	fa02 f303 	lsl.w	r3, r2, r3
 80a3b62:	459e      	cmp	lr, r3
 80a3b64:	f47f af72 	bne.w	80a3a4c <__ieee754_pow+0x54>
 80a3b68:	f002 0201 	and.w	r2, r2, #1
 80a3b6c:	f1c2 0402 	rsb	r4, r2, #2
 80a3b70:	e76d      	b.n	80a3a4e <__ieee754_pow+0x56>
 80a3b72:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
 80a3b76:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80a3b7a:	ea53 030b 	orrs.w	r3, r3, fp
 80a3b7e:	f000 833a 	beq.w	80a41f6 <__ieee754_pow+0x7fe>
 80a3b82:	4b18      	ldr	r3, [pc, #96]	; (80a3be4 <__ieee754_pow+0x1ec>)
 80a3b84:	429e      	cmp	r6, r3
 80a3b86:	f340 8367 	ble.w	80a4258 <__ieee754_pow+0x860>
 80a3b8a:	f1ba 0f00 	cmp.w	sl, #0
 80a3b8e:	db15      	blt.n	80a3bbc <__ieee754_pow+0x1c4>
 80a3b90:	e9dd 3400 	ldrd	r3, r4, [sp]
 80a3b94:	469b      	mov	fp, r3
 80a3b96:	4621      	mov	r1, r4
 80a3b98:	e746      	b.n	80a3a28 <__ieee754_pow+0x30>
 80a3b9a:	2402      	movs	r4, #2
 80a3b9c:	e757      	b.n	80a3a4e <__ieee754_pow+0x56>
 80a3b9e:	464a      	mov	r2, r9
 80a3ba0:	4648      	mov	r0, r9
 80a3ba2:	463b      	mov	r3, r7
 80a3ba4:	4639      	mov	r1, r7
 80a3ba6:	f000 fe6d 	bl	80a4884 <__aeabi_dsub>
 80a3baa:	4602      	mov	r2, r0
 80a3bac:	460b      	mov	r3, r1
 80a3bae:	f001 f947 	bl	80a4e40 <__aeabi_ddiv>
 80a3bb2:	4683      	mov	fp, r0
 80a3bb4:	e738      	b.n	80a3a28 <__ieee754_pow+0x30>
 80a3bb6:	f1ba 0f00 	cmp.w	sl, #0
 80a3bba:	db8e      	blt.n	80a3ada <__ieee754_pow+0xe2>
 80a3bbc:	f04f 0b00 	mov.w	fp, #0
 80a3bc0:	4659      	mov	r1, fp
 80a3bc2:	e731      	b.n	80a3a28 <__ieee754_pow+0x30>
 80a3bc4:	f3af 8000 	nop.w
 80a3bc8:	8800759c 	.word	0x8800759c
 80a3bcc:	7e37e43c 	.word	0x7e37e43c
 80a3bd0:	7ff00000 	.word	0x7ff00000
 80a3bd4:	3ff00000 	.word	0x3ff00000
 80a3bd8:	3fe00000 	.word	0x3fe00000
 80a3bdc:	080a6730 	.word	0x080a6730
 80a3be0:	41e00000 	.word	0x41e00000
 80a3be4:	3fefffff 	.word	0x3fefffff
 80a3be8:	433fffff 	.word	0x433fffff
 80a3bec:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
 80a3bf0:	f04f 0200 	mov.w	r2, #0
 80a3bf4:	da05      	bge.n	80a3c02 <__ieee754_pow+0x20a>
 80a3bf6:	4bd0      	ldr	r3, [pc, #832]	; (80a3f38 <__ieee754_pow+0x540>)
 80a3bf8:	f000 fff8 	bl	80a4bec <__aeabi_dmul>
 80a3bfc:	460e      	mov	r6, r1
 80a3bfe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80a3c02:	f8df e344 	ldr.w	lr, [pc, #836]	; 80a3f48 <__ieee754_pow+0x550>
 80a3c06:	1533      	asrs	r3, r6, #20
 80a3c08:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80a3c0c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a3c10:	f046 577f 	orr.w	r7, r6, #1069547520	; 0x3fc00000
 80a3c14:	4576      	cmp	r6, lr
 80a3c16:	eb03 0a02 	add.w	sl, r3, r2
 80a3c1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80a3c1e:	f340 83c9 	ble.w	80a43b4 <__ieee754_pow+0x9bc>
 80a3c22:	4bc6      	ldr	r3, [pc, #792]	; (80a3f3c <__ieee754_pow+0x544>)
 80a3c24:	2200      	movs	r2, #0
 80a3c26:	429e      	cmp	r6, r3
 80a3c28:	f340 8404 	ble.w	80a4434 <__ieee754_pow+0xa3c>
 80a3c2c:	2300      	movs	r3, #0
 80a3c2e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a3c32:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a3c36:	4bc2      	ldr	r3, [pc, #776]	; (80a3f40 <__ieee754_pow+0x548>)
 80a3c38:	2200      	movs	r2, #0
 80a3c3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a3c3e:	f10a 0a01 	add.w	sl, sl, #1
 80a3c42:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80a3c46:	2600      	movs	r6, #0
 80a3c48:	4639      	mov	r1, r7
 80a3c4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a3c4e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a3c52:	f000 fe17 	bl	80a4884 <__aeabi_dsub>
 80a3c56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a3c5a:	4680      	mov	r8, r0
 80a3c5c:	4689      	mov	r9, r1
 80a3c5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a3c62:	f000 fe11 	bl	80a4888 <__adddf3>
 80a3c66:	4602      	mov	r2, r0
 80a3c68:	460b      	mov	r3, r1
 80a3c6a:	2000      	movs	r0, #0
 80a3c6c:	49b4      	ldr	r1, [pc, #720]	; (80a3f40 <__ieee754_pow+0x548>)
 80a3c6e:	f001 f8e7 	bl	80a4e40 <__aeabi_ddiv>
 80a3c72:	460a      	mov	r2, r1
 80a3c74:	4601      	mov	r1, r0
 80a3c76:	4613      	mov	r3, r2
 80a3c78:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 80a3c7c:	4602      	mov	r2, r0
 80a3c7e:	4649      	mov	r1, r9
 80a3c80:	4640      	mov	r0, r8
 80a3c82:	f000 ffb3 	bl	80a4bec <__aeabi_dmul>
 80a3c86:	468c      	mov	ip, r1
 80a3c88:	4683      	mov	fp, r0
 80a3c8a:	107b      	asrs	r3, r7, #1
 80a3c8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80a3c90:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80a3c94:	1999      	adds	r1, r3, r6
 80a3c96:	2000      	movs	r0, #0
 80a3c98:	e9cd bc04 	strd	fp, ip, [sp, #16]
 80a3c9c:	4606      	mov	r6, r0
 80a3c9e:	460f      	mov	r7, r1
 80a3ca0:	f04f 0b00 	mov.w	fp, #0
 80a3ca4:	4661      	mov	r1, ip
 80a3ca6:	4658      	mov	r0, fp
 80a3ca8:	4632      	mov	r2, r6
 80a3caa:	463b      	mov	r3, r7
 80a3cac:	e9cd bc10 	strd	fp, ip, [sp, #64]	; 0x40
 80a3cb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a3cb4:	f000 ff9a 	bl	80a4bec <__aeabi_dmul>
 80a3cb8:	4602      	mov	r2, r0
 80a3cba:	460b      	mov	r3, r1
 80a3cbc:	4640      	mov	r0, r8
 80a3cbe:	4649      	mov	r1, r9
 80a3cc0:	f000 fde0 	bl	80a4884 <__aeabi_dsub>
 80a3cc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a3cc8:	4680      	mov	r8, r0
 80a3cca:	4689      	mov	r9, r1
 80a3ccc:	4630      	mov	r0, r6
 80a3cce:	4639      	mov	r1, r7
 80a3cd0:	f000 fdd8 	bl	80a4884 <__aeabi_dsub>
 80a3cd4:	4602      	mov	r2, r0
 80a3cd6:	460b      	mov	r3, r1
 80a3cd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a3cdc:	f000 fdd2 	bl	80a4884 <__aeabi_dsub>
 80a3ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3ce4:	f000 ff82 	bl	80a4bec <__aeabi_dmul>
 80a3ce8:	4602      	mov	r2, r0
 80a3cea:	460b      	mov	r3, r1
 80a3cec:	4640      	mov	r0, r8
 80a3cee:	4649      	mov	r1, r9
 80a3cf0:	f000 fdc8 	bl	80a4884 <__aeabi_dsub>
 80a3cf4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80a3cf8:	f000 ff78 	bl	80a4bec <__aeabi_dmul>
 80a3cfc:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
 80a3d00:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a3d04:	463a      	mov	r2, r7
 80a3d06:	4643      	mov	r3, r8
 80a3d08:	4638      	mov	r0, r7
 80a3d0a:	4641      	mov	r1, r8
 80a3d0c:	f000 ff6e 	bl	80a4bec <__aeabi_dmul>
 80a3d10:	a377      	add	r3, pc, #476	; (adr r3, 80a3ef0 <__ieee754_pow+0x4f8>)
 80a3d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3d16:	4606      	mov	r6, r0
 80a3d18:	460f      	mov	r7, r1
 80a3d1a:	f000 ff67 	bl	80a4bec <__aeabi_dmul>
 80a3d1e:	a376      	add	r3, pc, #472	; (adr r3, 80a3ef8 <__ieee754_pow+0x500>)
 80a3d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3d24:	f000 fdb0 	bl	80a4888 <__adddf3>
 80a3d28:	4632      	mov	r2, r6
 80a3d2a:	463b      	mov	r3, r7
 80a3d2c:	f000 ff5e 	bl	80a4bec <__aeabi_dmul>
 80a3d30:	a373      	add	r3, pc, #460	; (adr r3, 80a3f00 <__ieee754_pow+0x508>)
 80a3d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3d36:	f000 fda7 	bl	80a4888 <__adddf3>
 80a3d3a:	4632      	mov	r2, r6
 80a3d3c:	463b      	mov	r3, r7
 80a3d3e:	f000 ff55 	bl	80a4bec <__aeabi_dmul>
 80a3d42:	a371      	add	r3, pc, #452	; (adr r3, 80a3f08 <__ieee754_pow+0x510>)
 80a3d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3d48:	f000 fd9e 	bl	80a4888 <__adddf3>
 80a3d4c:	4632      	mov	r2, r6
 80a3d4e:	463b      	mov	r3, r7
 80a3d50:	f000 ff4c 	bl	80a4bec <__aeabi_dmul>
 80a3d54:	a36e      	add	r3, pc, #440	; (adr r3, 80a3f10 <__ieee754_pow+0x518>)
 80a3d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3d5a:	f000 fd95 	bl	80a4888 <__adddf3>
 80a3d5e:	4632      	mov	r2, r6
 80a3d60:	463b      	mov	r3, r7
 80a3d62:	f000 ff43 	bl	80a4bec <__aeabi_dmul>
 80a3d66:	a36c      	add	r3, pc, #432	; (adr r3, 80a3f18 <__ieee754_pow+0x520>)
 80a3d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3d6c:	f000 fd8c 	bl	80a4888 <__adddf3>
 80a3d70:	4632      	mov	r2, r6
 80a3d72:	4680      	mov	r8, r0
 80a3d74:	4689      	mov	r9, r1
 80a3d76:	463b      	mov	r3, r7
 80a3d78:	4630      	mov	r0, r6
 80a3d7a:	4639      	mov	r1, r7
 80a3d7c:	f000 ff36 	bl	80a4bec <__aeabi_dmul>
 80a3d80:	4602      	mov	r2, r0
 80a3d82:	460b      	mov	r3, r1
 80a3d84:	4640      	mov	r0, r8
 80a3d86:	4649      	mov	r1, r9
 80a3d88:	f000 ff30 	bl	80a4bec <__aeabi_dmul>
 80a3d8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3d90:	4606      	mov	r6, r0
 80a3d92:	460f      	mov	r7, r1
 80a3d94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a3d98:	f000 fd76 	bl	80a4888 <__adddf3>
 80a3d9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a3da0:	f000 ff24 	bl	80a4bec <__aeabi_dmul>
 80a3da4:	4632      	mov	r2, r6
 80a3da6:	463b      	mov	r3, r7
 80a3da8:	f000 fd6e 	bl	80a4888 <__adddf3>
 80a3dac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80a3db0:	4680      	mov	r8, r0
 80a3db2:	4689      	mov	r9, r1
 80a3db4:	4632      	mov	r2, r6
 80a3db6:	463b      	mov	r3, r7
 80a3db8:	4630      	mov	r0, r6
 80a3dba:	4639      	mov	r1, r7
 80a3dbc:	f000 ff16 	bl	80a4bec <__aeabi_dmul>
 80a3dc0:	2200      	movs	r2, #0
 80a3dc2:	4b60      	ldr	r3, [pc, #384]	; (80a3f44 <__ieee754_pow+0x54c>)
 80a3dc4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a3dc8:	f000 fd5e 	bl	80a4888 <__adddf3>
 80a3dcc:	4642      	mov	r2, r8
 80a3dce:	464b      	mov	r3, r9
 80a3dd0:	f000 fd5a 	bl	80a4888 <__adddf3>
 80a3dd4:	e9dd bc10 	ldrd	fp, ip, [sp, #64]	; 0x40
 80a3dd8:	460f      	mov	r7, r1
 80a3dda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3dde:	465a      	mov	r2, fp
 80a3de0:	463b      	mov	r3, r7
 80a3de2:	e9cd bc0e 	strd	fp, ip, [sp, #56]	; 0x38
 80a3de6:	465e      	mov	r6, fp
 80a3de8:	f000 ff00 	bl	80a4bec <__aeabi_dmul>
 80a3dec:	2200      	movs	r2, #0
 80a3dee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a3df2:	4b54      	ldr	r3, [pc, #336]	; (80a3f44 <__ieee754_pow+0x54c>)
 80a3df4:	4630      	mov	r0, r6
 80a3df6:	4639      	mov	r1, r7
 80a3df8:	f000 fd44 	bl	80a4884 <__aeabi_dsub>
 80a3dfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a3e00:	f000 fd40 	bl	80a4884 <__aeabi_dsub>
 80a3e04:	4602      	mov	r2, r0
 80a3e06:	460b      	mov	r3, r1
 80a3e08:	4640      	mov	r0, r8
 80a3e0a:	4649      	mov	r1, r9
 80a3e0c:	f000 fd3a 	bl	80a4884 <__aeabi_dsub>
 80a3e10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a3e14:	f000 feea 	bl	80a4bec <__aeabi_dmul>
 80a3e18:	4632      	mov	r2, r6
 80a3e1a:	4680      	mov	r8, r0
 80a3e1c:	4689      	mov	r9, r1
 80a3e1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a3e22:	463b      	mov	r3, r7
 80a3e24:	f000 fee2 	bl	80a4bec <__aeabi_dmul>
 80a3e28:	4602      	mov	r2, r0
 80a3e2a:	460b      	mov	r3, r1
 80a3e2c:	4640      	mov	r0, r8
 80a3e2e:	4649      	mov	r1, r9
 80a3e30:	f000 fd2a 	bl	80a4888 <__adddf3>
 80a3e34:	4680      	mov	r8, r0
 80a3e36:	4689      	mov	r9, r1
 80a3e38:	4602      	mov	r2, r0
 80a3e3a:	460b      	mov	r3, r1
 80a3e3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3e40:	f000 fd22 	bl	80a4888 <__adddf3>
 80a3e44:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	; 0x38
 80a3e48:	a335      	add	r3, pc, #212	; (adr r3, 80a3f20 <__ieee754_pow+0x528>)
 80a3e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3e4e:	4658      	mov	r0, fp
 80a3e50:	e9cd bc06 	strd	fp, ip, [sp, #24]
 80a3e54:	465e      	mov	r6, fp
 80a3e56:	460f      	mov	r7, r1
 80a3e58:	f000 fec8 	bl	80a4bec <__aeabi_dmul>
 80a3e5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3e60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a3e64:	4630      	mov	r0, r6
 80a3e66:	4639      	mov	r1, r7
 80a3e68:	f000 fd0c 	bl	80a4884 <__aeabi_dsub>
 80a3e6c:	4602      	mov	r2, r0
 80a3e6e:	460b      	mov	r3, r1
 80a3e70:	4640      	mov	r0, r8
 80a3e72:	4649      	mov	r1, r9
 80a3e74:	f000 fd06 	bl	80a4884 <__aeabi_dsub>
 80a3e78:	a32b      	add	r3, pc, #172	; (adr r3, 80a3f28 <__ieee754_pow+0x530>)
 80a3e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3e7e:	f000 feb5 	bl	80a4bec <__aeabi_dmul>
 80a3e82:	a32b      	add	r3, pc, #172	; (adr r3, 80a3f30 <__ieee754_pow+0x538>)
 80a3e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3e88:	4680      	mov	r8, r0
 80a3e8a:	4689      	mov	r9, r1
 80a3e8c:	4630      	mov	r0, r6
 80a3e8e:	4639      	mov	r1, r7
 80a3e90:	f000 feac 	bl	80a4bec <__aeabi_dmul>
 80a3e94:	4602      	mov	r2, r0
 80a3e96:	460b      	mov	r3, r1
 80a3e98:	4640      	mov	r0, r8
 80a3e9a:	4649      	mov	r1, r9
 80a3e9c:	f000 fcf4 	bl	80a4888 <__adddf3>
 80a3ea0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80a3ea4:	f000 fcf0 	bl	80a4888 <__adddf3>
 80a3ea8:	4680      	mov	r8, r0
 80a3eaa:	4650      	mov	r0, sl
 80a3eac:	4689      	mov	r9, r1
 80a3eae:	f000 fe37 	bl	80a4b20 <__aeabi_i2d>
 80a3eb2:	4606      	mov	r6, r0
 80a3eb4:	460f      	mov	r7, r1
 80a3eb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a3eba:	4642      	mov	r2, r8
 80a3ebc:	464b      	mov	r3, r9
 80a3ebe:	f000 fce3 	bl	80a4888 <__adddf3>
 80a3ec2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a3ec6:	f000 fcdf 	bl	80a4888 <__adddf3>
 80a3eca:	4632      	mov	r2, r6
 80a3ecc:	463b      	mov	r3, r7
 80a3ece:	f000 fcdb 	bl	80a4888 <__adddf3>
 80a3ed2:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 80a3ed6:	4632      	mov	r2, r6
 80a3ed8:	4658      	mov	r0, fp
 80a3eda:	463b      	mov	r3, r7
 80a3edc:	46da      	mov	sl, fp
 80a3ede:	468b      	mov	fp, r1
 80a3ee0:	f000 fcd0 	bl	80a4884 <__aeabi_dsub>
 80a3ee4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a3ee8:	e030      	b.n	80a3f4c <__ieee754_pow+0x554>
 80a3eea:	bf00      	nop
 80a3eec:	f3af 8000 	nop.w
 80a3ef0:	4a454eef 	.word	0x4a454eef
 80a3ef4:	3fca7e28 	.word	0x3fca7e28
 80a3ef8:	93c9db65 	.word	0x93c9db65
 80a3efc:	3fcd864a 	.word	0x3fcd864a
 80a3f00:	a91d4101 	.word	0xa91d4101
 80a3f04:	3fd17460 	.word	0x3fd17460
 80a3f08:	518f264d 	.word	0x518f264d
 80a3f0c:	3fd55555 	.word	0x3fd55555
 80a3f10:	db6fabff 	.word	0xdb6fabff
 80a3f14:	3fdb6db6 	.word	0x3fdb6db6
 80a3f18:	33333303 	.word	0x33333303
 80a3f1c:	3fe33333 	.word	0x3fe33333
 80a3f20:	e0000000 	.word	0xe0000000
 80a3f24:	3feec709 	.word	0x3feec709
 80a3f28:	dc3a03fd 	.word	0xdc3a03fd
 80a3f2c:	3feec709 	.word	0x3feec709
 80a3f30:	145b01f5 	.word	0x145b01f5
 80a3f34:	be3e2fe0 	.word	0xbe3e2fe0
 80a3f38:	43400000 	.word	0x43400000
 80a3f3c:	000bb679 	.word	0x000bb679
 80a3f40:	3ff00000 	.word	0x3ff00000
 80a3f44:	40080000 	.word	0x40080000
 80a3f48:	0003988e 	.word	0x0003988e
 80a3f4c:	f000 fc9a 	bl	80a4884 <__aeabi_dsub>
 80a3f50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a3f54:	f000 fc96 	bl	80a4884 <__aeabi_dsub>
 80a3f58:	4602      	mov	r2, r0
 80a3f5a:	460b      	mov	r3, r1
 80a3f5c:	4640      	mov	r0, r8
 80a3f5e:	4649      	mov	r1, r9
 80a3f60:	f000 fc90 	bl	80a4884 <__aeabi_dsub>
 80a3f64:	4680      	mov	r8, r0
 80a3f66:	4689      	mov	r9, r1
 80a3f68:	e9dd 1200 	ldrd	r1, r2, [sp]
 80a3f6c:	3c01      	subs	r4, #1
 80a3f6e:	ea54 0305 	orrs.w	r3, r4, r5
 80a3f72:	bf14      	ite	ne
 80a3f74:	4cd6      	ldrne	r4, [pc, #856]	; (80a42d0 <__ieee754_pow+0x8d8>)
 80a3f76:	4cd7      	ldreq	r4, [pc, #860]	; (80a42d4 <__ieee754_pow+0x8dc>)
 80a3f78:	2300      	movs	r3, #0
 80a3f7a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80a3f7e:	460b      	mov	r3, r1
 80a3f80:	4614      	mov	r4, r2
 80a3f82:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a3f86:	2300      	movs	r3, #0
 80a3f88:	9302      	str	r3, [sp, #8]
 80a3f8a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80a3f8e:	4608      	mov	r0, r1
 80a3f90:	462b      	mov	r3, r5
 80a3f92:	4611      	mov	r1, r2
 80a3f94:	4622      	mov	r2, r4
 80a3f96:	f000 fc75 	bl	80a4884 <__aeabi_dsub>
 80a3f9a:	4652      	mov	r2, sl
 80a3f9c:	465b      	mov	r3, fp
 80a3f9e:	f000 fe25 	bl	80a4bec <__aeabi_dmul>
 80a3fa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a3fa6:	4606      	mov	r6, r0
 80a3fa8:	460f      	mov	r7, r1
 80a3faa:	4640      	mov	r0, r8
 80a3fac:	4649      	mov	r1, r9
 80a3fae:	f000 fe1d 	bl	80a4bec <__aeabi_dmul>
 80a3fb2:	4602      	mov	r2, r0
 80a3fb4:	460b      	mov	r3, r1
 80a3fb6:	4630      	mov	r0, r6
 80a3fb8:	4639      	mov	r1, r7
 80a3fba:	f000 fc65 	bl	80a4888 <__adddf3>
 80a3fbe:	4606      	mov	r6, r0
 80a3fc0:	460f      	mov	r7, r1
 80a3fc2:	4622      	mov	r2, r4
 80a3fc4:	462b      	mov	r3, r5
 80a3fc6:	4650      	mov	r0, sl
 80a3fc8:	4659      	mov	r1, fp
 80a3fca:	e9cd 6700 	strd	r6, r7, [sp]
 80a3fce:	f000 fe0d 	bl	80a4bec <__aeabi_dmul>
 80a3fd2:	460b      	mov	r3, r1
 80a3fd4:	4602      	mov	r2, r0
 80a3fd6:	4680      	mov	r8, r0
 80a3fd8:	4689      	mov	r9, r1
 80a3fda:	4630      	mov	r0, r6
 80a3fdc:	4639      	mov	r1, r7
 80a3fde:	f000 fc53 	bl	80a4888 <__adddf3>
 80a3fe2:	4bbd      	ldr	r3, [pc, #756]	; (80a42d8 <__ieee754_pow+0x8e0>)
 80a3fe4:	4606      	mov	r6, r0
 80a3fe6:	4299      	cmp	r1, r3
 80a3fe8:	460d      	mov	r5, r1
 80a3fea:	460c      	mov	r4, r1
 80a3fec:	f340 810e 	ble.w	80a420c <__ieee754_pow+0x814>
 80a3ff0:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80a3ff4:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80a3ff8:	4303      	orrs	r3, r0
 80a3ffa:	f040 81f0 	bne.w	80a43de <__ieee754_pow+0x9e6>
 80a3ffe:	a3a0      	add	r3, pc, #640	; (adr r3, 80a4280 <__ieee754_pow+0x888>)
 80a4000:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4004:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4008:	f000 fc3e 	bl	80a4888 <__adddf3>
 80a400c:	4642      	mov	r2, r8
 80a400e:	4682      	mov	sl, r0
 80a4010:	468b      	mov	fp, r1
 80a4012:	464b      	mov	r3, r9
 80a4014:	4630      	mov	r0, r6
 80a4016:	4629      	mov	r1, r5
 80a4018:	f000 fc34 	bl	80a4884 <__aeabi_dsub>
 80a401c:	4602      	mov	r2, r0
 80a401e:	460b      	mov	r3, r1
 80a4020:	4650      	mov	r0, sl
 80a4022:	4659      	mov	r1, fp
 80a4024:	f001 f872 	bl	80a510c <__aeabi_dcmpgt>
 80a4028:	2800      	cmp	r0, #0
 80a402a:	f040 81d8 	bne.w	80a43de <__ieee754_pow+0x9e6>
 80a402e:	462f      	mov	r7, r5
 80a4030:	153b      	asrs	r3, r7, #20
 80a4032:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80a4036:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80a403a:	fa42 f303 	asr.w	r3, r2, r3
 80a403e:	4423      	add	r3, r4
 80a4040:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80a4044:	4ea5      	ldr	r6, [pc, #660]	; (80a42dc <__ieee754_pow+0x8e4>)
 80a4046:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80a404a:	4116      	asrs	r6, r2
 80a404c:	f3c3 0b13 	ubfx	fp, r3, #0, #20
 80a4050:	2000      	movs	r0, #0
 80a4052:	f1c2 0514 	rsb	r5, r2, #20
 80a4056:	ea23 0106 	bic.w	r1, r3, r6
 80a405a:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
 80a405e:	4602      	mov	r2, r0
 80a4060:	460b      	mov	r3, r1
 80a4062:	2c00      	cmp	r4, #0
 80a4064:	fa4b fb05 	asr.w	fp, fp, r5
 80a4068:	4640      	mov	r0, r8
 80a406a:	4649      	mov	r1, r9
 80a406c:	bfb8      	it	lt
 80a406e:	f1cb 0b00 	rsblt	fp, fp, #0
 80a4072:	f000 fc07 	bl	80a4884 <__aeabi_dsub>
 80a4076:	4602      	mov	r2, r0
 80a4078:	460b      	mov	r3, r1
 80a407a:	4680      	mov	r8, r0
 80a407c:	4689      	mov	r9, r1
 80a407e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4082:	f000 fc01 	bl	80a4888 <__adddf3>
 80a4086:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
 80a408a:	2400      	movs	r4, #0
 80a408c:	a37e      	add	r3, pc, #504	; (adr r3, 80a4288 <__ieee754_pow+0x890>)
 80a408e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4092:	4620      	mov	r0, r4
 80a4094:	460d      	mov	r5, r1
 80a4096:	f000 fda9 	bl	80a4bec <__aeabi_dmul>
 80a409a:	4642      	mov	r2, r8
 80a409c:	4606      	mov	r6, r0
 80a409e:	460f      	mov	r7, r1
 80a40a0:	464b      	mov	r3, r9
 80a40a2:	4620      	mov	r0, r4
 80a40a4:	4629      	mov	r1, r5
 80a40a6:	f000 fbed 	bl	80a4884 <__aeabi_dsub>
 80a40aa:	4602      	mov	r2, r0
 80a40ac:	460b      	mov	r3, r1
 80a40ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a40b2:	f000 fbe7 	bl	80a4884 <__aeabi_dsub>
 80a40b6:	a376      	add	r3, pc, #472	; (adr r3, 80a4290 <__ieee754_pow+0x898>)
 80a40b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a40bc:	f000 fd96 	bl	80a4bec <__aeabi_dmul>
 80a40c0:	a375      	add	r3, pc, #468	; (adr r3, 80a4298 <__ieee754_pow+0x8a0>)
 80a40c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a40c6:	4680      	mov	r8, r0
 80a40c8:	4689      	mov	r9, r1
 80a40ca:	4620      	mov	r0, r4
 80a40cc:	4629      	mov	r1, r5
 80a40ce:	f000 fd8d 	bl	80a4bec <__aeabi_dmul>
 80a40d2:	4602      	mov	r2, r0
 80a40d4:	460b      	mov	r3, r1
 80a40d6:	4640      	mov	r0, r8
 80a40d8:	4649      	mov	r1, r9
 80a40da:	f000 fbd5 	bl	80a4888 <__adddf3>
 80a40de:	4680      	mov	r8, r0
 80a40e0:	4689      	mov	r9, r1
 80a40e2:	4602      	mov	r2, r0
 80a40e4:	460b      	mov	r3, r1
 80a40e6:	4630      	mov	r0, r6
 80a40e8:	4639      	mov	r1, r7
 80a40ea:	f000 fbcd 	bl	80a4888 <__adddf3>
 80a40ee:	4632      	mov	r2, r6
 80a40f0:	463b      	mov	r3, r7
 80a40f2:	4604      	mov	r4, r0
 80a40f4:	460d      	mov	r5, r1
 80a40f6:	f000 fbc5 	bl	80a4884 <__aeabi_dsub>
 80a40fa:	4602      	mov	r2, r0
 80a40fc:	460b      	mov	r3, r1
 80a40fe:	4640      	mov	r0, r8
 80a4100:	4649      	mov	r1, r9
 80a4102:	f000 fbbf 	bl	80a4884 <__aeabi_dsub>
 80a4106:	4622      	mov	r2, r4
 80a4108:	4680      	mov	r8, r0
 80a410a:	4689      	mov	r9, r1
 80a410c:	462b      	mov	r3, r5
 80a410e:	4620      	mov	r0, r4
 80a4110:	4629      	mov	r1, r5
 80a4112:	f000 fd6b 	bl	80a4bec <__aeabi_dmul>
 80a4116:	a362      	add	r3, pc, #392	; (adr r3, 80a42a0 <__ieee754_pow+0x8a8>)
 80a4118:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a411c:	4606      	mov	r6, r0
 80a411e:	460f      	mov	r7, r1
 80a4120:	f000 fd64 	bl	80a4bec <__aeabi_dmul>
 80a4124:	a360      	add	r3, pc, #384	; (adr r3, 80a42a8 <__ieee754_pow+0x8b0>)
 80a4126:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a412a:	f000 fbab 	bl	80a4884 <__aeabi_dsub>
 80a412e:	4632      	mov	r2, r6
 80a4130:	463b      	mov	r3, r7
 80a4132:	f000 fd5b 	bl	80a4bec <__aeabi_dmul>
 80a4136:	a35e      	add	r3, pc, #376	; (adr r3, 80a42b0 <__ieee754_pow+0x8b8>)
 80a4138:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a413c:	f000 fba4 	bl	80a4888 <__adddf3>
 80a4140:	4632      	mov	r2, r6
 80a4142:	463b      	mov	r3, r7
 80a4144:	f000 fd52 	bl	80a4bec <__aeabi_dmul>
 80a4148:	a35b      	add	r3, pc, #364	; (adr r3, 80a42b8 <__ieee754_pow+0x8c0>)
 80a414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a414e:	f000 fb99 	bl	80a4884 <__aeabi_dsub>
 80a4152:	4632      	mov	r2, r6
 80a4154:	463b      	mov	r3, r7
 80a4156:	f000 fd49 	bl	80a4bec <__aeabi_dmul>
 80a415a:	a359      	add	r3, pc, #356	; (adr r3, 80a42c0 <__ieee754_pow+0x8c8>)
 80a415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4160:	f000 fb92 	bl	80a4888 <__adddf3>
 80a4164:	4632      	mov	r2, r6
 80a4166:	463b      	mov	r3, r7
 80a4168:	f000 fd40 	bl	80a4bec <__aeabi_dmul>
 80a416c:	4602      	mov	r2, r0
 80a416e:	460b      	mov	r3, r1
 80a4170:	4620      	mov	r0, r4
 80a4172:	4629      	mov	r1, r5
 80a4174:	f000 fb86 	bl	80a4884 <__aeabi_dsub>
 80a4178:	4606      	mov	r6, r0
 80a417a:	460f      	mov	r7, r1
 80a417c:	4602      	mov	r2, r0
 80a417e:	460b      	mov	r3, r1
 80a4180:	4620      	mov	r0, r4
 80a4182:	4629      	mov	r1, r5
 80a4184:	f000 fd32 	bl	80a4bec <__aeabi_dmul>
 80a4188:	2200      	movs	r2, #0
 80a418a:	e9cd 0100 	strd	r0, r1, [sp]
 80a418e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a4192:	4630      	mov	r0, r6
 80a4194:	4639      	mov	r1, r7
 80a4196:	f000 fb75 	bl	80a4884 <__aeabi_dsub>
 80a419a:	4602      	mov	r2, r0
 80a419c:	460b      	mov	r3, r1
 80a419e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a41a2:	f000 fe4d 	bl	80a4e40 <__aeabi_ddiv>
 80a41a6:	4642      	mov	r2, r8
 80a41a8:	4606      	mov	r6, r0
 80a41aa:	460f      	mov	r7, r1
 80a41ac:	464b      	mov	r3, r9
 80a41ae:	4620      	mov	r0, r4
 80a41b0:	4629      	mov	r1, r5
 80a41b2:	f000 fd1b 	bl	80a4bec <__aeabi_dmul>
 80a41b6:	4642      	mov	r2, r8
 80a41b8:	464b      	mov	r3, r9
 80a41ba:	f000 fb65 	bl	80a4888 <__adddf3>
 80a41be:	4602      	mov	r2, r0
 80a41c0:	460b      	mov	r3, r1
 80a41c2:	4630      	mov	r0, r6
 80a41c4:	4639      	mov	r1, r7
 80a41c6:	f000 fb5d 	bl	80a4884 <__aeabi_dsub>
 80a41ca:	4622      	mov	r2, r4
 80a41cc:	462b      	mov	r3, r5
 80a41ce:	f000 fb59 	bl	80a4884 <__aeabi_dsub>
 80a41d2:	4602      	mov	r2, r0
 80a41d4:	460b      	mov	r3, r1
 80a41d6:	2000      	movs	r0, #0
 80a41d8:	493d      	ldr	r1, [pc, #244]	; (80a42d0 <__ieee754_pow+0x8d8>)
 80a41da:	f000 fb53 	bl	80a4884 <__aeabi_dsub>
 80a41de:	448a      	add	sl, r1
 80a41e0:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
 80a41e4:	f2c0 8137 	blt.w	80a4456 <__ieee754_pow+0xa5e>
 80a41e8:	4651      	mov	r1, sl
 80a41ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a41ee:	f000 fcfd 	bl	80a4bec <__aeabi_dmul>
 80a41f2:	4683      	mov	fp, r0
 80a41f4:	e418      	b.n	80a3a28 <__ieee754_pow+0x30>
 80a41f6:	46f3      	mov	fp, lr
 80a41f8:	4935      	ldr	r1, [pc, #212]	; (80a42d0 <__ieee754_pow+0x8d8>)
 80a41fa:	e415      	b.n	80a3a28 <__ieee754_pow+0x30>
 80a41fc:	464a      	mov	r2, r9
 80a41fe:	4648      	mov	r0, r9
 80a4200:	463b      	mov	r3, r7
 80a4202:	4639      	mov	r1, r7
 80a4204:	f000 fcf2 	bl	80a4bec <__aeabi_dmul>
 80a4208:	4683      	mov	fp, r0
 80a420a:	e40d      	b.n	80a3a28 <__ieee754_pow+0x30>
 80a420c:	4b34      	ldr	r3, [pc, #208]	; (80a42e0 <__ieee754_pow+0x8e8>)
 80a420e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80a4212:	429f      	cmp	r7, r3
 80a4214:	f340 8101 	ble.w	80a441a <__ieee754_pow+0xa22>
 80a4218:	4b32      	ldr	r3, [pc, #200]	; (80a42e4 <__ieee754_pow+0x8ec>)
 80a421a:	440b      	add	r3, r1
 80a421c:	4303      	orrs	r3, r0
 80a421e:	d10c      	bne.n	80a423a <__ieee754_pow+0x842>
 80a4220:	4642      	mov	r2, r8
 80a4222:	464b      	mov	r3, r9
 80a4224:	f000 fb2e 	bl	80a4884 <__aeabi_dsub>
 80a4228:	4602      	mov	r2, r0
 80a422a:	460b      	mov	r3, r1
 80a422c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4230:	f000 ff58 	bl	80a50e4 <__aeabi_dcmple>
 80a4234:	2800      	cmp	r0, #0
 80a4236:	f43f aefb 	beq.w	80a4030 <__ieee754_pow+0x638>
 80a423a:	a323      	add	r3, pc, #140	; (adr r3, 80a42c8 <__ieee754_pow+0x8d0>)
 80a423c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4240:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a4244:	f000 fcd2 	bl	80a4bec <__aeabi_dmul>
 80a4248:	a31f      	add	r3, pc, #124	; (adr r3, 80a42c8 <__ieee754_pow+0x8d0>)
 80a424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a424e:	f000 fccd 	bl	80a4bec <__aeabi_dmul>
 80a4252:	4683      	mov	fp, r0
 80a4254:	f7ff bbe8 	b.w	80a3a28 <__ieee754_pow+0x30>
 80a4258:	f1ba 0f00 	cmp.w	sl, #0
 80a425c:	f6bf acae 	bge.w	80a3bbc <__ieee754_pow+0x1c4>
 80a4260:	e9dd 3400 	ldrd	r3, r4, [sp]
 80a4264:	469b      	mov	fp, r3
 80a4266:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80a426a:	f7ff bbdd 	b.w	80a3a28 <__ieee754_pow+0x30>
 80a426e:	4602      	mov	r2, r0
 80a4270:	460b      	mov	r3, r1
 80a4272:	2000      	movs	r0, #0
 80a4274:	4916      	ldr	r1, [pc, #88]	; (80a42d0 <__ieee754_pow+0x8d8>)
 80a4276:	f000 fde3 	bl	80a4e40 <__aeabi_ddiv>
 80a427a:	e441      	b.n	80a3b00 <__ieee754_pow+0x108>
 80a427c:	f3af 8000 	nop.w
 80a4280:	652b82fe 	.word	0x652b82fe
 80a4284:	3c971547 	.word	0x3c971547
 80a4288:	00000000 	.word	0x00000000
 80a428c:	3fe62e43 	.word	0x3fe62e43
 80a4290:	fefa39ef 	.word	0xfefa39ef
 80a4294:	3fe62e42 	.word	0x3fe62e42
 80a4298:	0ca86c39 	.word	0x0ca86c39
 80a429c:	be205c61 	.word	0xbe205c61
 80a42a0:	72bea4d0 	.word	0x72bea4d0
 80a42a4:	3e663769 	.word	0x3e663769
 80a42a8:	c5d26bf1 	.word	0xc5d26bf1
 80a42ac:	3ebbbd41 	.word	0x3ebbbd41
 80a42b0:	af25de2c 	.word	0xaf25de2c
 80a42b4:	3f11566a 	.word	0x3f11566a
 80a42b8:	16bebd93 	.word	0x16bebd93
 80a42bc:	3f66c16c 	.word	0x3f66c16c
 80a42c0:	5555553e 	.word	0x5555553e
 80a42c4:	3fc55555 	.word	0x3fc55555
 80a42c8:	c2f8f359 	.word	0xc2f8f359
 80a42cc:	01a56e1f 	.word	0x01a56e1f
 80a42d0:	3ff00000 	.word	0x3ff00000
 80a42d4:	bff00000 	.word	0xbff00000
 80a42d8:	408fffff 	.word	0x408fffff
 80a42dc:	000fffff 	.word	0x000fffff
 80a42e0:	4090cbff 	.word	0x4090cbff
 80a42e4:	3f6f3400 	.word	0x3f6f3400
 80a42e8:	4b6f      	ldr	r3, [pc, #444]	; (80a44a8 <__ieee754_pow+0xab0>)
 80a42ea:	429e      	cmp	r6, r3
 80a42ec:	f77f ac63 	ble.w	80a3bb6 <__ieee754_pow+0x1be>
 80a42f0:	4b6e      	ldr	r3, [pc, #440]	; (80a44ac <__ieee754_pow+0xab4>)
 80a42f2:	429e      	cmp	r6, r3
 80a42f4:	f73f abee 	bgt.w	80a3ad4 <__ieee754_pow+0xdc>
 80a42f8:	2200      	movs	r2, #0
 80a42fa:	4b6c      	ldr	r3, [pc, #432]	; (80a44ac <__ieee754_pow+0xab4>)
 80a42fc:	f000 fac2 	bl	80a4884 <__aeabi_dsub>
 80a4300:	a35b      	add	r3, pc, #364	; (adr r3, 80a4470 <__ieee754_pow+0xa78>)
 80a4302:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4306:	4606      	mov	r6, r0
 80a4308:	460f      	mov	r7, r1
 80a430a:	f000 fc6f 	bl	80a4bec <__aeabi_dmul>
 80a430e:	a35a      	add	r3, pc, #360	; (adr r3, 80a4478 <__ieee754_pow+0xa80>)
 80a4310:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4314:	4680      	mov	r8, r0
 80a4316:	4689      	mov	r9, r1
 80a4318:	4630      	mov	r0, r6
 80a431a:	4639      	mov	r1, r7
 80a431c:	f000 fc66 	bl	80a4bec <__aeabi_dmul>
 80a4320:	2200      	movs	r2, #0
 80a4322:	4682      	mov	sl, r0
 80a4324:	468b      	mov	fp, r1
 80a4326:	4b62      	ldr	r3, [pc, #392]	; (80a44b0 <__ieee754_pow+0xab8>)
 80a4328:	4630      	mov	r0, r6
 80a432a:	4639      	mov	r1, r7
 80a432c:	f000 fc5e 	bl	80a4bec <__aeabi_dmul>
 80a4330:	4602      	mov	r2, r0
 80a4332:	460b      	mov	r3, r1
 80a4334:	a152      	add	r1, pc, #328	; (adr r1, 80a4480 <__ieee754_pow+0xa88>)
 80a4336:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a433a:	f000 faa3 	bl	80a4884 <__aeabi_dsub>
 80a433e:	4632      	mov	r2, r6
 80a4340:	463b      	mov	r3, r7
 80a4342:	f000 fc53 	bl	80a4bec <__aeabi_dmul>
 80a4346:	4602      	mov	r2, r0
 80a4348:	460b      	mov	r3, r1
 80a434a:	2000      	movs	r0, #0
 80a434c:	4959      	ldr	r1, [pc, #356]	; (80a44b4 <__ieee754_pow+0xabc>)
 80a434e:	f000 fa99 	bl	80a4884 <__aeabi_dsub>
 80a4352:	4632      	mov	r2, r6
 80a4354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a4358:	463b      	mov	r3, r7
 80a435a:	4630      	mov	r0, r6
 80a435c:	4639      	mov	r1, r7
 80a435e:	f000 fc45 	bl	80a4bec <__aeabi_dmul>
 80a4362:	4602      	mov	r2, r0
 80a4364:	460b      	mov	r3, r1
 80a4366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a436a:	f000 fc3f 	bl	80a4bec <__aeabi_dmul>
 80a436e:	a346      	add	r3, pc, #280	; (adr r3, 80a4488 <__ieee754_pow+0xa90>)
 80a4370:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4374:	f000 fc3a 	bl	80a4bec <__aeabi_dmul>
 80a4378:	4602      	mov	r2, r0
 80a437a:	460b      	mov	r3, r1
 80a437c:	4650      	mov	r0, sl
 80a437e:	4659      	mov	r1, fp
 80a4380:	f000 fa80 	bl	80a4884 <__aeabi_dsub>
 80a4384:	4602      	mov	r2, r0
 80a4386:	460b      	mov	r3, r1
 80a4388:	4606      	mov	r6, r0
 80a438a:	460f      	mov	r7, r1
 80a438c:	4640      	mov	r0, r8
 80a438e:	4649      	mov	r1, r9
 80a4390:	f000 fa7a 	bl	80a4888 <__adddf3>
 80a4394:	4642      	mov	r2, r8
 80a4396:	464b      	mov	r3, r9
 80a4398:	2000      	movs	r0, #0
 80a439a:	4682      	mov	sl, r0
 80a439c:	468b      	mov	fp, r1
 80a439e:	f000 fa71 	bl	80a4884 <__aeabi_dsub>
 80a43a2:	4602      	mov	r2, r0
 80a43a4:	460b      	mov	r3, r1
 80a43a6:	4630      	mov	r0, r6
 80a43a8:	4639      	mov	r1, r7
 80a43aa:	f000 fa6b 	bl	80a4884 <__aeabi_dsub>
 80a43ae:	4680      	mov	r8, r0
 80a43b0:	4689      	mov	r9, r1
 80a43b2:	e5d9      	b.n	80a3f68 <__ieee754_pow+0x570>
 80a43b4:	2200      	movs	r2, #0
 80a43b6:	2300      	movs	r3, #0
 80a43b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a43bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a43c0:	4b3a      	ldr	r3, [pc, #232]	; (80a44ac <__ieee754_pow+0xab4>)
 80a43c2:	2200      	movs	r2, #0
 80a43c4:	2600      	movs	r6, #0
 80a43c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a43ca:	e43d      	b.n	80a3c48 <__ieee754_pow+0x250>
 80a43cc:	464a      	mov	r2, r9
 80a43ce:	463b      	mov	r3, r7
 80a43d0:	2000      	movs	r0, #0
 80a43d2:	4936      	ldr	r1, [pc, #216]	; (80a44ac <__ieee754_pow+0xab4>)
 80a43d4:	f000 fd34 	bl	80a4e40 <__aeabi_ddiv>
 80a43d8:	4683      	mov	fp, r0
 80a43da:	f7ff bb25 	b.w	80a3a28 <__ieee754_pow+0x30>
 80a43de:	a32c      	add	r3, pc, #176	; (adr r3, 80a4490 <__ieee754_pow+0xa98>)
 80a43e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a43e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a43e8:	f000 fc00 	bl	80a4bec <__aeabi_dmul>
 80a43ec:	a328      	add	r3, pc, #160	; (adr r3, 80a4490 <__ieee754_pow+0xa98>)
 80a43ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a43f2:	f000 fbfb 	bl	80a4bec <__aeabi_dmul>
 80a43f6:	4683      	mov	fp, r0
 80a43f8:	f7ff bb16 	b.w	80a3a28 <__ieee754_pow+0x30>
 80a43fc:	f1be 0f00 	cmp.w	lr, #0
 80a4400:	f47f ab4f 	bne.w	80a3aa2 <__ieee754_pow+0xaa>
 80a4404:	f1c3 0314 	rsb	r3, r3, #20
 80a4408:	fa48 f203 	asr.w	r2, r8, r3
 80a440c:	fa02 f303 	lsl.w	r3, r2, r3
 80a4410:	4598      	cmp	r8, r3
 80a4412:	d024      	beq.n	80a445e <__ieee754_pow+0xa66>
 80a4414:	4674      	mov	r4, lr
 80a4416:	f7ff bb21 	b.w	80a3a5c <__ieee754_pow+0x64>
 80a441a:	4b26      	ldr	r3, [pc, #152]	; (80a44b4 <__ieee754_pow+0xabc>)
 80a441c:	429f      	cmp	r7, r3
 80a441e:	f73f ae07 	bgt.w	80a4030 <__ieee754_pow+0x638>
 80a4422:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 80a4426:	469a      	mov	sl, r3
 80a4428:	469b      	mov	fp, r3
 80a442a:	e62e      	b.n	80a408a <__ieee754_pow+0x692>
 80a442c:	4602      	mov	r2, r0
 80a442e:	460b      	mov	r3, r1
 80a4430:	f7ff bbb9 	b.w	80a3ba6 <__ieee754_pow+0x1ae>
 80a4434:	4b20      	ldr	r3, [pc, #128]	; (80a44b8 <__ieee754_pow+0xac0>)
 80a4436:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80a443a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a443e:	a316      	add	r3, pc, #88	; (adr r3, 80a4498 <__ieee754_pow+0xaa0>)
 80a4440:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4444:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a4448:	a315      	add	r3, pc, #84	; (adr r3, 80a44a0 <__ieee754_pow+0xaa8>)
 80a444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a444e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a4452:	f7ff bbf9 	b.w	80a3c48 <__ieee754_pow+0x250>
 80a4456:	465a      	mov	r2, fp
 80a4458:	f000 f996 	bl	80a4788 <scalbn>
 80a445c:	e6c5      	b.n	80a41ea <__ieee754_pow+0x7f2>
 80a445e:	f002 0201 	and.w	r2, r2, #1
 80a4462:	f1c2 0402 	rsb	r4, r2, #2
 80a4466:	f7ff baf9 	b.w	80a3a5c <__ieee754_pow+0x64>
 80a446a:	bf00      	nop
 80a446c:	f3af 8000 	nop.w
 80a4470:	60000000 	.word	0x60000000
 80a4474:	3ff71547 	.word	0x3ff71547
 80a4478:	f85ddf44 	.word	0xf85ddf44
 80a447c:	3e54ae0b 	.word	0x3e54ae0b
 80a4480:	55555555 	.word	0x55555555
 80a4484:	3fd55555 	.word	0x3fd55555
 80a4488:	652b82fe 	.word	0x652b82fe
 80a448c:	3ff71547 	.word	0x3ff71547
 80a4490:	8800759c 	.word	0x8800759c
 80a4494:	7e37e43c 	.word	0x7e37e43c
 80a4498:	40000000 	.word	0x40000000
 80a449c:	3fe2b803 	.word	0x3fe2b803
 80a44a0:	43cfd006 	.word	0x43cfd006
 80a44a4:	3e4cfdeb 	.word	0x3e4cfdeb
 80a44a8:	3feffffe 	.word	0x3feffffe
 80a44ac:	3ff00000 	.word	0x3ff00000
 80a44b0:	3fd00000 	.word	0x3fd00000
 80a44b4:	3fe00000 	.word	0x3fe00000
 80a44b8:	3ff80000 	.word	0x3ff80000

080a44bc <__ieee754_sqrt>:
 80a44bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a44c0:	4e5f      	ldr	r6, [pc, #380]	; (80a4640 <__ieee754_sqrt+0x184>)
 80a44c2:	460c      	mov	r4, r1
 80a44c4:	46b6      	mov	lr, r6
 80a44c6:	400e      	ands	r6, r1
 80a44c8:	4576      	cmp	r6, lr
 80a44ca:	4605      	mov	r5, r0
 80a44cc:	f000 8098 	beq.w	80a4600 <__ieee754_sqrt+0x144>
 80a44d0:	2900      	cmp	r1, #0
 80a44d2:	460b      	mov	r3, r1
 80a44d4:	4602      	mov	r2, r0
 80a44d6:	dd74      	ble.n	80a45c2 <__ieee754_sqrt+0x106>
 80a44d8:	ea5f 5e21 	movs.w	lr, r1, asr #20
 80a44dc:	d07f      	beq.n	80a45de <__ieee754_sqrt+0x122>
 80a44de:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 80a44e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a44e6:	f01e 0f01 	tst.w	lr, #1
 80a44ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a44ee:	d163      	bne.n	80a45b8 <__ieee754_sqrt+0xfc>
 80a44f0:	2700      	movs	r7, #0
 80a44f2:	463e      	mov	r6, r7
 80a44f4:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 80a44f8:	440b      	add	r3, r1
 80a44fa:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80a44fe:	0052      	lsls	r2, r2, #1
 80a4500:	2016      	movs	r0, #22
 80a4502:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80a4506:	1874      	adds	r4, r6, r1
 80a4508:	429c      	cmp	r4, r3
 80a450a:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 80a450e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a4512:	dc02      	bgt.n	80a451a <__ieee754_sqrt+0x5e>
 80a4514:	1b1b      	subs	r3, r3, r4
 80a4516:	1866      	adds	r6, r4, r1
 80a4518:	440f      	add	r7, r1
 80a451a:	3801      	subs	r0, #1
 80a451c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80a4520:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a4524:	d1ef      	bne.n	80a4506 <__ieee754_sqrt+0x4a>
 80a4526:	4684      	mov	ip, r0
 80a4528:	2420      	movs	r4, #32
 80a452a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80a452e:	e009      	b.n	80a4544 <__ieee754_sqrt+0x88>
 80a4530:	d020      	beq.n	80a4574 <__ieee754_sqrt+0xb8>
 80a4532:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 80a4536:	3c01      	subs	r4, #1
 80a4538:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a453c:	442b      	add	r3, r5
 80a453e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a4542:	d020      	beq.n	80a4586 <__ieee754_sqrt+0xca>
 80a4544:	429e      	cmp	r6, r3
 80a4546:	eb01 050c 	add.w	r5, r1, ip
 80a454a:	daf1      	bge.n	80a4530 <__ieee754_sqrt+0x74>
 80a454c:	2d00      	cmp	r5, #0
 80a454e:	eb05 0c01 	add.w	ip, r5, r1
 80a4552:	db09      	blt.n	80a4568 <__ieee754_sqrt+0xac>
 80a4554:	46b0      	mov	r8, r6
 80a4556:	4295      	cmp	r5, r2
 80a4558:	eba3 0306 	sub.w	r3, r3, r6
 80a455c:	d900      	bls.n	80a4560 <__ieee754_sqrt+0xa4>
 80a455e:	3b01      	subs	r3, #1
 80a4560:	4646      	mov	r6, r8
 80a4562:	1b52      	subs	r2, r2, r5
 80a4564:	4408      	add	r0, r1
 80a4566:	e7e4      	b.n	80a4532 <__ieee754_sqrt+0x76>
 80a4568:	f1bc 0f00 	cmp.w	ip, #0
 80a456c:	dbf2      	blt.n	80a4554 <__ieee754_sqrt+0x98>
 80a456e:	f106 0801 	add.w	r8, r6, #1
 80a4572:	e7f0      	b.n	80a4556 <__ieee754_sqrt+0x9a>
 80a4574:	4295      	cmp	r5, r2
 80a4576:	d817      	bhi.n	80a45a8 <__ieee754_sqrt+0xec>
 80a4578:	2d00      	cmp	r5, #0
 80a457a:	eb05 0c01 	add.w	ip, r5, r1
 80a457e:	db49      	blt.n	80a4614 <__ieee754_sqrt+0x158>
 80a4580:	4698      	mov	r8, r3
 80a4582:	2300      	movs	r3, #0
 80a4584:	e7ec      	b.n	80a4560 <__ieee754_sqrt+0xa4>
 80a4586:	4313      	orrs	r3, r2
 80a4588:	d110      	bne.n	80a45ac <__ieee754_sqrt+0xf0>
 80a458a:	0840      	lsrs	r0, r0, #1
 80a458c:	107b      	asrs	r3, r7, #1
 80a458e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80a4592:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a4596:	07fa      	lsls	r2, r7, #31
 80a4598:	eb03 570e 	add.w	r7, r3, lr, lsl #20
 80a459c:	4639      	mov	r1, r7
 80a459e:	bf48      	it	mi
 80a45a0:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 80a45a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a45a8:	4633      	mov	r3, r6
 80a45aa:	e7c2      	b.n	80a4532 <__ieee754_sqrt+0x76>
 80a45ac:	1c41      	adds	r1, r0, #1
 80a45ae:	d035      	beq.n	80a461c <__ieee754_sqrt+0x160>
 80a45b0:	f000 0301 	and.w	r3, r0, #1
 80a45b4:	4418      	add	r0, r3
 80a45b6:	e7e8      	b.n	80a458a <__ieee754_sqrt+0xce>
 80a45b8:	005b      	lsls	r3, r3, #1
 80a45ba:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80a45be:	0052      	lsls	r2, r2, #1
 80a45c0:	e796      	b.n	80a44f0 <__ieee754_sqrt+0x34>
 80a45c2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a45c6:	4306      	orrs	r6, r0
 80a45c8:	d0ec      	beq.n	80a45a4 <__ieee754_sqrt+0xe8>
 80a45ca:	bb79      	cbnz	r1, 80a462c <__ieee754_sqrt+0x170>
 80a45cc:	468e      	mov	lr, r1
 80a45ce:	0ad3      	lsrs	r3, r2, #11
 80a45d0:	f1ae 0e15 	sub.w	lr, lr, #21
 80a45d4:	0552      	lsls	r2, r2, #21
 80a45d6:	2b00      	cmp	r3, #0
 80a45d8:	d0f9      	beq.n	80a45ce <__ieee754_sqrt+0x112>
 80a45da:	02dd      	lsls	r5, r3, #11
 80a45dc:	d421      	bmi.n	80a4622 <__ieee754_sqrt+0x166>
 80a45de:	2100      	movs	r1, #0
 80a45e0:	e000      	b.n	80a45e4 <__ieee754_sqrt+0x128>
 80a45e2:	4601      	mov	r1, r0
 80a45e4:	005b      	lsls	r3, r3, #1
 80a45e6:	02dc      	lsls	r4, r3, #11
 80a45e8:	f101 0001 	add.w	r0, r1, #1
 80a45ec:	d5f9      	bpl.n	80a45e2 <__ieee754_sqrt+0x126>
 80a45ee:	f1c0 0420 	rsb	r4, r0, #32
 80a45f2:	fa22 f404 	lsr.w	r4, r2, r4
 80a45f6:	4323      	orrs	r3, r4
 80a45f8:	ebc1 0e0e 	rsb	lr, r1, lr
 80a45fc:	4082      	lsls	r2, r0
 80a45fe:	e76e      	b.n	80a44de <__ieee754_sqrt+0x22>
 80a4600:	4602      	mov	r2, r0
 80a4602:	460b      	mov	r3, r1
 80a4604:	f000 faf2 	bl	80a4bec <__aeabi_dmul>
 80a4608:	462a      	mov	r2, r5
 80a460a:	4623      	mov	r3, r4
 80a460c:	f000 f93c 	bl	80a4888 <__adddf3>
 80a4610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4614:	f1bc 0f00 	cmp.w	ip, #0
 80a4618:	daa9      	bge.n	80a456e <__ieee754_sqrt+0xb2>
 80a461a:	e7b1      	b.n	80a4580 <__ieee754_sqrt+0xc4>
 80a461c:	3701      	adds	r7, #1
 80a461e:	4620      	mov	r0, r4
 80a4620:	e7b4      	b.n	80a458c <__ieee754_sqrt+0xd0>
 80a4622:	2420      	movs	r4, #32
 80a4624:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80a4628:	2000      	movs	r0, #0
 80a462a:	e7e2      	b.n	80a45f2 <__ieee754_sqrt+0x136>
 80a462c:	4602      	mov	r2, r0
 80a462e:	460b      	mov	r3, r1
 80a4630:	f000 f928 	bl	80a4884 <__aeabi_dsub>
 80a4634:	4602      	mov	r2, r0
 80a4636:	460b      	mov	r3, r1
 80a4638:	f000 fc02 	bl	80a4e40 <__aeabi_ddiv>
 80a463c:	e7b2      	b.n	80a45a4 <__ieee754_sqrt+0xe8>
 80a463e:	bf00      	nop
 80a4640:	7ff00000 	.word	0x7ff00000

080a4644 <fabs>:
 80a4644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4648:	4770      	bx	lr
 80a464a:	bf00      	nop

080a464c <finite>:
 80a464c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80a4650:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80a4654:	0fc0      	lsrs	r0, r0, #31
 80a4656:	4770      	bx	lr

080a4658 <matherr>:
 80a4658:	2000      	movs	r0, #0
 80a465a:	4770      	bx	lr

080a465c <nan>:
 80a465c:	2000      	movs	r0, #0
 80a465e:	4901      	ldr	r1, [pc, #4]	; (80a4664 <nan+0x8>)
 80a4660:	4770      	bx	lr
 80a4662:	bf00      	nop
 80a4664:	7ff80000 	.word	0x7ff80000

080a4668 <rint>:
 80a4668:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a466a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 80a466e:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
 80a4672:	2e13      	cmp	r6, #19
 80a4674:	b083      	sub	sp, #12
 80a4676:	4602      	mov	r2, r0
 80a4678:	460b      	mov	r3, r1
 80a467a:	460c      	mov	r4, r1
 80a467c:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80a4680:	4607      	mov	r7, r0
 80a4682:	dc2e      	bgt.n	80a46e2 <rint+0x7a>
 80a4684:	2e00      	cmp	r6, #0
 80a4686:	db49      	blt.n	80a471c <rint+0xb4>
 80a4688:	493d      	ldr	r1, [pc, #244]	; (80a4780 <rint+0x118>)
 80a468a:	4131      	asrs	r1, r6
 80a468c:	ea03 0001 	and.w	r0, r3, r1
 80a4690:	4310      	orrs	r0, r2
 80a4692:	d02b      	beq.n	80a46ec <rint+0x84>
 80a4694:	0849      	lsrs	r1, r1, #1
 80a4696:	400b      	ands	r3, r1
 80a4698:	ea53 0702 	orrs.w	r7, r3, r2
 80a469c:	d00c      	beq.n	80a46b8 <rint+0x50>
 80a469e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80a46a2:	2e13      	cmp	r6, #19
 80a46a4:	ea24 0101 	bic.w	r1, r4, r1
 80a46a8:	fa43 f406 	asr.w	r4, r3, r6
 80a46ac:	ea44 0401 	orr.w	r4, r4, r1
 80a46b0:	bf0c      	ite	eq
 80a46b2:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80a46b6:	2700      	movne	r7, #0
 80a46b8:	4b32      	ldr	r3, [pc, #200]	; (80a4784 <rint+0x11c>)
 80a46ba:	4621      	mov	r1, r4
 80a46bc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80a46c0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80a46c4:	4638      	mov	r0, r7
 80a46c6:	4622      	mov	r2, r4
 80a46c8:	462b      	mov	r3, r5
 80a46ca:	f000 f8dd 	bl	80a4888 <__adddf3>
 80a46ce:	e9cd 0100 	strd	r0, r1, [sp]
 80a46d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a46d6:	4622      	mov	r2, r4
 80a46d8:	462b      	mov	r3, r5
 80a46da:	f000 f8d3 	bl	80a4884 <__aeabi_dsub>
 80a46de:	b003      	add	sp, #12
 80a46e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a46e2:	2e33      	cmp	r6, #51	; 0x33
 80a46e4:	dd06      	ble.n	80a46f4 <rint+0x8c>
 80a46e6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a46ea:	d045      	beq.n	80a4778 <rint+0x110>
 80a46ec:	4610      	mov	r0, r2
 80a46ee:	4619      	mov	r1, r3
 80a46f0:	b003      	add	sp, #12
 80a46f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a46f4:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 80a46f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80a46fc:	fa21 f10e 	lsr.w	r1, r1, lr
 80a4700:	4208      	tst	r0, r1
 80a4702:	d0f3      	beq.n	80a46ec <rint+0x84>
 80a4704:	0849      	lsrs	r1, r1, #1
 80a4706:	4208      	tst	r0, r1
 80a4708:	d0d6      	beq.n	80a46b8 <rint+0x50>
 80a470a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a470e:	ea20 0101 	bic.w	r1, r0, r1
 80a4712:	fa43 fe0e 	asr.w	lr, r3, lr
 80a4716:	ea4e 0701 	orr.w	r7, lr, r1
 80a471a:	e7cd      	b.n	80a46b8 <rint+0x50>
 80a471c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4720:	4301      	orrs	r1, r0
 80a4722:	4619      	mov	r1, r3
 80a4724:	d0e4      	beq.n	80a46f0 <rint+0x88>
 80a4726:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a472a:	ea43 0c00 	orr.w	ip, r3, r0
 80a472e:	f1cc 0300 	rsb	r3, ip, #0
 80a4732:	ea43 0c0c 	orr.w	ip, r3, ip
 80a4736:	4b13      	ldr	r3, [pc, #76]	; (80a4784 <rint+0x11c>)
 80a4738:	0c64      	lsrs	r4, r4, #17
 80a473a:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
 80a473e:	f40c 2c00 	and.w	ip, ip, #524288	; 0x80000
 80a4742:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80a4746:	0464      	lsls	r4, r4, #17
 80a4748:	e9d3 6700 	ldrd	r6, r7, [r3]
 80a474c:	ea4c 0104 	orr.w	r1, ip, r4
 80a4750:	4632      	mov	r2, r6
 80a4752:	463b      	mov	r3, r7
 80a4754:	f000 f898 	bl	80a4888 <__adddf3>
 80a4758:	e9cd 0100 	strd	r0, r1, [sp]
 80a475c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4760:	4632      	mov	r2, r6
 80a4762:	463b      	mov	r3, r7
 80a4764:	f000 f88e 	bl	80a4884 <__aeabi_dsub>
 80a4768:	4602      	mov	r2, r0
 80a476a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a476e:	ea41 73c5 	orr.w	r3, r1, r5, lsl #31
 80a4772:	4610      	mov	r0, r2
 80a4774:	4619      	mov	r1, r3
 80a4776:	e7bb      	b.n	80a46f0 <rint+0x88>
 80a4778:	f000 f886 	bl	80a4888 <__adddf3>
 80a477c:	e7b8      	b.n	80a46f0 <rint+0x88>
 80a477e:	bf00      	nop
 80a4780:	000fffff 	.word	0x000fffff
 80a4784:	080a6740 	.word	0x080a6740

080a4788 <scalbn>:
 80a4788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a478a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80a478e:	4604      	mov	r4, r0
 80a4790:	460d      	mov	r5, r1
 80a4792:	460b      	mov	r3, r1
 80a4794:	4617      	mov	r7, r2
 80a4796:	bb06      	cbnz	r6, 80a47da <scalbn+0x52>
 80a4798:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a479c:	4303      	orrs	r3, r0
 80a479e:	d025      	beq.n	80a47ec <scalbn+0x64>
 80a47a0:	2200      	movs	r2, #0
 80a47a2:	4b2f      	ldr	r3, [pc, #188]	; (80a4860 <scalbn+0xd8>)
 80a47a4:	f000 fa22 	bl	80a4bec <__aeabi_dmul>
 80a47a8:	4a2e      	ldr	r2, [pc, #184]	; (80a4864 <scalbn+0xdc>)
 80a47aa:	4604      	mov	r4, r0
 80a47ac:	4297      	cmp	r7, r2
 80a47ae:	460d      	mov	r5, r1
 80a47b0:	460b      	mov	r3, r1
 80a47b2:	db2a      	blt.n	80a480a <scalbn+0x82>
 80a47b4:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80a47b8:	3e36      	subs	r6, #54	; 0x36
 80a47ba:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80a47be:	443e      	add	r6, r7
 80a47c0:	4296      	cmp	r6, r2
 80a47c2:	dc28      	bgt.n	80a4816 <scalbn+0x8e>
 80a47c4:	2e00      	cmp	r6, #0
 80a47c6:	dd12      	ble.n	80a47ee <scalbn+0x66>
 80a47c8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80a47cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80a47d0:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80a47d4:	4620      	mov	r0, r4
 80a47d6:	4629      	mov	r1, r5
 80a47d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a47da:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80a47de:	4296      	cmp	r6, r2
 80a47e0:	d1eb      	bne.n	80a47ba <scalbn+0x32>
 80a47e2:	4602      	mov	r2, r0
 80a47e4:	460b      	mov	r3, r1
 80a47e6:	f000 f84f 	bl	80a4888 <__adddf3>
 80a47ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a47ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a47ee:	f116 0f35 	cmn.w	r6, #53	; 0x35
 80a47f2:	da1d      	bge.n	80a4830 <scalbn+0xa8>
 80a47f4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80a47f8:	429f      	cmp	r7, r3
 80a47fa:	dc0c      	bgt.n	80a4816 <scalbn+0x8e>
 80a47fc:	a114      	add	r1, pc, #80	; (adr r1, 80a4850 <scalbn+0xc8>)
 80a47fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a4802:	4622      	mov	r2, r4
 80a4804:	462b      	mov	r3, r5
 80a4806:	f000 f831 	bl	80a486c <copysign>
 80a480a:	a311      	add	r3, pc, #68	; (adr r3, 80a4850 <scalbn+0xc8>)
 80a480c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4810:	f000 f9ec 	bl	80a4bec <__aeabi_dmul>
 80a4814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4816:	4622      	mov	r2, r4
 80a4818:	a10f      	add	r1, pc, #60	; (adr r1, 80a4858 <scalbn+0xd0>)
 80a481a:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a481e:	462b      	mov	r3, r5
 80a4820:	f000 f824 	bl	80a486c <copysign>
 80a4824:	a30c      	add	r3, pc, #48	; (adr r3, 80a4858 <scalbn+0xd0>)
 80a4826:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a482a:	f000 f9df 	bl	80a4bec <__aeabi_dmul>
 80a482e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4830:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80a4834:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80a4838:	3636      	adds	r6, #54	; 0x36
 80a483a:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80a483e:	4620      	mov	r0, r4
 80a4840:	4629      	mov	r1, r5
 80a4842:	2200      	movs	r2, #0
 80a4844:	4b08      	ldr	r3, [pc, #32]	; (80a4868 <scalbn+0xe0>)
 80a4846:	f000 f9d1 	bl	80a4bec <__aeabi_dmul>
 80a484a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a484c:	f3af 8000 	nop.w
 80a4850:	c2f8f359 	.word	0xc2f8f359
 80a4854:	01a56e1f 	.word	0x01a56e1f
 80a4858:	8800759c 	.word	0x8800759c
 80a485c:	7e37e43c 	.word	0x7e37e43c
 80a4860:	43500000 	.word	0x43500000
 80a4864:	ffff3cb0 	.word	0xffff3cb0
 80a4868:	3c900000 	.word	0x3c900000

080a486c <copysign>:
 80a486c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80a4870:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80a4874:	ea42 0103 	orr.w	r1, r2, r3
 80a4878:	4770      	bx	lr
 80a487a:	bf00      	nop

080a487c <__aeabi_drsub>:
 80a487c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a4880:	e002      	b.n	80a4888 <__adddf3>
 80a4882:	bf00      	nop

080a4884 <__aeabi_dsub>:
 80a4884:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a4888 <__adddf3>:
 80a4888:	b530      	push	{r4, r5, lr}
 80a488a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a488e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a4892:	ea94 0f05 	teq	r4, r5
 80a4896:	bf08      	it	eq
 80a4898:	ea90 0f02 	teqeq	r0, r2
 80a489c:	bf1f      	itttt	ne
 80a489e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a48a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a48a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a48aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a48ae:	f000 80e2 	beq.w	80a4a76 <__adddf3+0x1ee>
 80a48b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a48b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a48ba:	bfb8      	it	lt
 80a48bc:	426d      	neglt	r5, r5
 80a48be:	dd0c      	ble.n	80a48da <__adddf3+0x52>
 80a48c0:	442c      	add	r4, r5
 80a48c2:	ea80 0202 	eor.w	r2, r0, r2
 80a48c6:	ea81 0303 	eor.w	r3, r1, r3
 80a48ca:	ea82 0000 	eor.w	r0, r2, r0
 80a48ce:	ea83 0101 	eor.w	r1, r3, r1
 80a48d2:	ea80 0202 	eor.w	r2, r0, r2
 80a48d6:	ea81 0303 	eor.w	r3, r1, r3
 80a48da:	2d36      	cmp	r5, #54	; 0x36
 80a48dc:	bf88      	it	hi
 80a48de:	bd30      	pophi	{r4, r5, pc}
 80a48e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a48e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a48e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a48ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a48f0:	d002      	beq.n	80a48f8 <__adddf3+0x70>
 80a48f2:	4240      	negs	r0, r0
 80a48f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a48f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a48fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4900:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a4904:	d002      	beq.n	80a490c <__adddf3+0x84>
 80a4906:	4252      	negs	r2, r2
 80a4908:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a490c:	ea94 0f05 	teq	r4, r5
 80a4910:	f000 80a7 	beq.w	80a4a62 <__adddf3+0x1da>
 80a4914:	f1a4 0401 	sub.w	r4, r4, #1
 80a4918:	f1d5 0e20 	rsbs	lr, r5, #32
 80a491c:	db0d      	blt.n	80a493a <__adddf3+0xb2>
 80a491e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a4922:	fa22 f205 	lsr.w	r2, r2, r5
 80a4926:	1880      	adds	r0, r0, r2
 80a4928:	f141 0100 	adc.w	r1, r1, #0
 80a492c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a4930:	1880      	adds	r0, r0, r2
 80a4932:	fa43 f305 	asr.w	r3, r3, r5
 80a4936:	4159      	adcs	r1, r3
 80a4938:	e00e      	b.n	80a4958 <__adddf3+0xd0>
 80a493a:	f1a5 0520 	sub.w	r5, r5, #32
 80a493e:	f10e 0e20 	add.w	lr, lr, #32
 80a4942:	2a01      	cmp	r2, #1
 80a4944:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a4948:	bf28      	it	cs
 80a494a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a494e:	fa43 f305 	asr.w	r3, r3, r5
 80a4952:	18c0      	adds	r0, r0, r3
 80a4954:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a4958:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a495c:	d507      	bpl.n	80a496e <__adddf3+0xe6>
 80a495e:	f04f 0e00 	mov.w	lr, #0
 80a4962:	f1dc 0c00 	rsbs	ip, ip, #0
 80a4966:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a496a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a496e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a4972:	d31b      	bcc.n	80a49ac <__adddf3+0x124>
 80a4974:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a4978:	d30c      	bcc.n	80a4994 <__adddf3+0x10c>
 80a497a:	0849      	lsrs	r1, r1, #1
 80a497c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a4980:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a4984:	f104 0401 	add.w	r4, r4, #1
 80a4988:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a498c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a4990:	f080 809a 	bcs.w	80a4ac8 <__adddf3+0x240>
 80a4994:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4998:	bf08      	it	eq
 80a499a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a499e:	f150 0000 	adcs.w	r0, r0, #0
 80a49a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a49a6:	ea41 0105 	orr.w	r1, r1, r5
 80a49aa:	bd30      	pop	{r4, r5, pc}
 80a49ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a49b0:	4140      	adcs	r0, r0
 80a49b2:	eb41 0101 	adc.w	r1, r1, r1
 80a49b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a49ba:	f1a4 0401 	sub.w	r4, r4, #1
 80a49be:	d1e9      	bne.n	80a4994 <__adddf3+0x10c>
 80a49c0:	f091 0f00 	teq	r1, #0
 80a49c4:	bf04      	itt	eq
 80a49c6:	4601      	moveq	r1, r0
 80a49c8:	2000      	moveq	r0, #0
 80a49ca:	fab1 f381 	clz	r3, r1
 80a49ce:	bf08      	it	eq
 80a49d0:	3320      	addeq	r3, #32
 80a49d2:	f1a3 030b 	sub.w	r3, r3, #11
 80a49d6:	f1b3 0220 	subs.w	r2, r3, #32
 80a49da:	da0c      	bge.n	80a49f6 <__adddf3+0x16e>
 80a49dc:	320c      	adds	r2, #12
 80a49de:	dd08      	ble.n	80a49f2 <__adddf3+0x16a>
 80a49e0:	f102 0c14 	add.w	ip, r2, #20
 80a49e4:	f1c2 020c 	rsb	r2, r2, #12
 80a49e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80a49ec:	fa21 f102 	lsr.w	r1, r1, r2
 80a49f0:	e00c      	b.n	80a4a0c <__adddf3+0x184>
 80a49f2:	f102 0214 	add.w	r2, r2, #20
 80a49f6:	bfd8      	it	le
 80a49f8:	f1c2 0c20 	rsble	ip, r2, #32
 80a49fc:	fa01 f102 	lsl.w	r1, r1, r2
 80a4a00:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a4a04:	bfdc      	itt	le
 80a4a06:	ea41 010c 	orrle.w	r1, r1, ip
 80a4a0a:	4090      	lslle	r0, r2
 80a4a0c:	1ae4      	subs	r4, r4, r3
 80a4a0e:	bfa2      	ittt	ge
 80a4a10:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a4a14:	4329      	orrge	r1, r5
 80a4a16:	bd30      	popge	{r4, r5, pc}
 80a4a18:	ea6f 0404 	mvn.w	r4, r4
 80a4a1c:	3c1f      	subs	r4, #31
 80a4a1e:	da1c      	bge.n	80a4a5a <__adddf3+0x1d2>
 80a4a20:	340c      	adds	r4, #12
 80a4a22:	dc0e      	bgt.n	80a4a42 <__adddf3+0x1ba>
 80a4a24:	f104 0414 	add.w	r4, r4, #20
 80a4a28:	f1c4 0220 	rsb	r2, r4, #32
 80a4a2c:	fa20 f004 	lsr.w	r0, r0, r4
 80a4a30:	fa01 f302 	lsl.w	r3, r1, r2
 80a4a34:	ea40 0003 	orr.w	r0, r0, r3
 80a4a38:	fa21 f304 	lsr.w	r3, r1, r4
 80a4a3c:	ea45 0103 	orr.w	r1, r5, r3
 80a4a40:	bd30      	pop	{r4, r5, pc}
 80a4a42:	f1c4 040c 	rsb	r4, r4, #12
 80a4a46:	f1c4 0220 	rsb	r2, r4, #32
 80a4a4a:	fa20 f002 	lsr.w	r0, r0, r2
 80a4a4e:	fa01 f304 	lsl.w	r3, r1, r4
 80a4a52:	ea40 0003 	orr.w	r0, r0, r3
 80a4a56:	4629      	mov	r1, r5
 80a4a58:	bd30      	pop	{r4, r5, pc}
 80a4a5a:	fa21 f004 	lsr.w	r0, r1, r4
 80a4a5e:	4629      	mov	r1, r5
 80a4a60:	bd30      	pop	{r4, r5, pc}
 80a4a62:	f094 0f00 	teq	r4, #0
 80a4a66:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a4a6a:	bf06      	itte	eq
 80a4a6c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a4a70:	3401      	addeq	r4, #1
 80a4a72:	3d01      	subne	r5, #1
 80a4a74:	e74e      	b.n	80a4914 <__adddf3+0x8c>
 80a4a76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a4a7a:	bf18      	it	ne
 80a4a7c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a4a80:	d029      	beq.n	80a4ad6 <__adddf3+0x24e>
 80a4a82:	ea94 0f05 	teq	r4, r5
 80a4a86:	bf08      	it	eq
 80a4a88:	ea90 0f02 	teqeq	r0, r2
 80a4a8c:	d005      	beq.n	80a4a9a <__adddf3+0x212>
 80a4a8e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a4a92:	bf04      	itt	eq
 80a4a94:	4619      	moveq	r1, r3
 80a4a96:	4610      	moveq	r0, r2
 80a4a98:	bd30      	pop	{r4, r5, pc}
 80a4a9a:	ea91 0f03 	teq	r1, r3
 80a4a9e:	bf1e      	ittt	ne
 80a4aa0:	2100      	movne	r1, #0
 80a4aa2:	2000      	movne	r0, #0
 80a4aa4:	bd30      	popne	{r4, r5, pc}
 80a4aa6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a4aaa:	d105      	bne.n	80a4ab8 <__adddf3+0x230>
 80a4aac:	0040      	lsls	r0, r0, #1
 80a4aae:	4149      	adcs	r1, r1
 80a4ab0:	bf28      	it	cs
 80a4ab2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a4ab6:	bd30      	pop	{r4, r5, pc}
 80a4ab8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a4abc:	bf3c      	itt	cc
 80a4abe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a4ac2:	bd30      	popcc	{r4, r5, pc}
 80a4ac4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4ac8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a4acc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4ad0:	f04f 0000 	mov.w	r0, #0
 80a4ad4:	bd30      	pop	{r4, r5, pc}
 80a4ad6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a4ada:	bf1a      	itte	ne
 80a4adc:	4619      	movne	r1, r3
 80a4ade:	4610      	movne	r0, r2
 80a4ae0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a4ae4:	bf1c      	itt	ne
 80a4ae6:	460b      	movne	r3, r1
 80a4ae8:	4602      	movne	r2, r0
 80a4aea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4aee:	bf06      	itte	eq
 80a4af0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a4af4:	ea91 0f03 	teqeq	r1, r3
 80a4af8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a4afc:	bd30      	pop	{r4, r5, pc}
 80a4afe:	bf00      	nop

080a4b00 <__aeabi_ui2d>:
 80a4b00:	f090 0f00 	teq	r0, #0
 80a4b04:	bf04      	itt	eq
 80a4b06:	2100      	moveq	r1, #0
 80a4b08:	4770      	bxeq	lr
 80a4b0a:	b530      	push	{r4, r5, lr}
 80a4b0c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4b10:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4b14:	f04f 0500 	mov.w	r5, #0
 80a4b18:	f04f 0100 	mov.w	r1, #0
 80a4b1c:	e750      	b.n	80a49c0 <__adddf3+0x138>
 80a4b1e:	bf00      	nop

080a4b20 <__aeabi_i2d>:
 80a4b20:	f090 0f00 	teq	r0, #0
 80a4b24:	bf04      	itt	eq
 80a4b26:	2100      	moveq	r1, #0
 80a4b28:	4770      	bxeq	lr
 80a4b2a:	b530      	push	{r4, r5, lr}
 80a4b2c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4b30:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4b34:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a4b38:	bf48      	it	mi
 80a4b3a:	4240      	negmi	r0, r0
 80a4b3c:	f04f 0100 	mov.w	r1, #0
 80a4b40:	e73e      	b.n	80a49c0 <__adddf3+0x138>
 80a4b42:	bf00      	nop

080a4b44 <__aeabi_f2d>:
 80a4b44:	0042      	lsls	r2, r0, #1
 80a4b46:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a4b4a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4b4e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a4b52:	bf1f      	itttt	ne
 80a4b54:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a4b58:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a4b5c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a4b60:	4770      	bxne	lr
 80a4b62:	f092 0f00 	teq	r2, #0
 80a4b66:	bf14      	ite	ne
 80a4b68:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a4b6c:	4770      	bxeq	lr
 80a4b6e:	b530      	push	{r4, r5, lr}
 80a4b70:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a4b74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4b78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4b7c:	e720      	b.n	80a49c0 <__adddf3+0x138>
 80a4b7e:	bf00      	nop

080a4b80 <__aeabi_ul2d>:
 80a4b80:	ea50 0201 	orrs.w	r2, r0, r1
 80a4b84:	bf08      	it	eq
 80a4b86:	4770      	bxeq	lr
 80a4b88:	b530      	push	{r4, r5, lr}
 80a4b8a:	f04f 0500 	mov.w	r5, #0
 80a4b8e:	e00a      	b.n	80a4ba6 <__aeabi_l2d+0x16>

080a4b90 <__aeabi_l2d>:
 80a4b90:	ea50 0201 	orrs.w	r2, r0, r1
 80a4b94:	bf08      	it	eq
 80a4b96:	4770      	bxeq	lr
 80a4b98:	b530      	push	{r4, r5, lr}
 80a4b9a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a4b9e:	d502      	bpl.n	80a4ba6 <__aeabi_l2d+0x16>
 80a4ba0:	4240      	negs	r0, r0
 80a4ba2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4ba6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4baa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4bae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a4bb2:	f43f aedc 	beq.w	80a496e <__adddf3+0xe6>
 80a4bb6:	f04f 0203 	mov.w	r2, #3
 80a4bba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a4bbe:	bf18      	it	ne
 80a4bc0:	3203      	addne	r2, #3
 80a4bc2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a4bc6:	bf18      	it	ne
 80a4bc8:	3203      	addne	r2, #3
 80a4bca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a4bce:	f1c2 0320 	rsb	r3, r2, #32
 80a4bd2:	fa00 fc03 	lsl.w	ip, r0, r3
 80a4bd6:	fa20 f002 	lsr.w	r0, r0, r2
 80a4bda:	fa01 fe03 	lsl.w	lr, r1, r3
 80a4bde:	ea40 000e 	orr.w	r0, r0, lr
 80a4be2:	fa21 f102 	lsr.w	r1, r1, r2
 80a4be6:	4414      	add	r4, r2
 80a4be8:	e6c1      	b.n	80a496e <__adddf3+0xe6>
 80a4bea:	bf00      	nop

080a4bec <__aeabi_dmul>:
 80a4bec:	b570      	push	{r4, r5, r6, lr}
 80a4bee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4bf2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4bf6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4bfa:	bf1d      	ittte	ne
 80a4bfc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4c00:	ea94 0f0c 	teqne	r4, ip
 80a4c04:	ea95 0f0c 	teqne	r5, ip
 80a4c08:	f000 f8de 	bleq	80a4dc8 <__aeabi_dmul+0x1dc>
 80a4c0c:	442c      	add	r4, r5
 80a4c0e:	ea81 0603 	eor.w	r6, r1, r3
 80a4c12:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a4c16:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a4c1a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a4c1e:	bf18      	it	ne
 80a4c20:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a4c24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4c28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a4c2c:	d038      	beq.n	80a4ca0 <__aeabi_dmul+0xb4>
 80a4c2e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a4c32:	f04f 0500 	mov.w	r5, #0
 80a4c36:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a4c3a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a4c3e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a4c42:	f04f 0600 	mov.w	r6, #0
 80a4c46:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a4c4a:	f09c 0f00 	teq	ip, #0
 80a4c4e:	bf18      	it	ne
 80a4c50:	f04e 0e01 	orrne.w	lr, lr, #1
 80a4c54:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a4c58:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a4c5c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a4c60:	d204      	bcs.n	80a4c6c <__aeabi_dmul+0x80>
 80a4c62:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a4c66:	416d      	adcs	r5, r5
 80a4c68:	eb46 0606 	adc.w	r6, r6, r6
 80a4c6c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a4c70:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a4c74:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a4c78:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a4c7c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a4c80:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4c84:	bf88      	it	hi
 80a4c86:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4c8a:	d81e      	bhi.n	80a4cca <__aeabi_dmul+0xde>
 80a4c8c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a4c90:	bf08      	it	eq
 80a4c92:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a4c96:	f150 0000 	adcs.w	r0, r0, #0
 80a4c9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4c9e:	bd70      	pop	{r4, r5, r6, pc}
 80a4ca0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a4ca4:	ea46 0101 	orr.w	r1, r6, r1
 80a4ca8:	ea40 0002 	orr.w	r0, r0, r2
 80a4cac:	ea81 0103 	eor.w	r1, r1, r3
 80a4cb0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a4cb4:	bfc2      	ittt	gt
 80a4cb6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4cba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4cbe:	bd70      	popgt	{r4, r5, r6, pc}
 80a4cc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4cc4:	f04f 0e00 	mov.w	lr, #0
 80a4cc8:	3c01      	subs	r4, #1
 80a4cca:	f300 80ab 	bgt.w	80a4e24 <__aeabi_dmul+0x238>
 80a4cce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a4cd2:	bfde      	ittt	le
 80a4cd4:	2000      	movle	r0, #0
 80a4cd6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a4cda:	bd70      	pople	{r4, r5, r6, pc}
 80a4cdc:	f1c4 0400 	rsb	r4, r4, #0
 80a4ce0:	3c20      	subs	r4, #32
 80a4ce2:	da35      	bge.n	80a4d50 <__aeabi_dmul+0x164>
 80a4ce4:	340c      	adds	r4, #12
 80a4ce6:	dc1b      	bgt.n	80a4d20 <__aeabi_dmul+0x134>
 80a4ce8:	f104 0414 	add.w	r4, r4, #20
 80a4cec:	f1c4 0520 	rsb	r5, r4, #32
 80a4cf0:	fa00 f305 	lsl.w	r3, r0, r5
 80a4cf4:	fa20 f004 	lsr.w	r0, r0, r4
 80a4cf8:	fa01 f205 	lsl.w	r2, r1, r5
 80a4cfc:	ea40 0002 	orr.w	r0, r0, r2
 80a4d00:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a4d04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4d08:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4d0c:	fa21 f604 	lsr.w	r6, r1, r4
 80a4d10:	eb42 0106 	adc.w	r1, r2, r6
 80a4d14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4d18:	bf08      	it	eq
 80a4d1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4d1e:	bd70      	pop	{r4, r5, r6, pc}
 80a4d20:	f1c4 040c 	rsb	r4, r4, #12
 80a4d24:	f1c4 0520 	rsb	r5, r4, #32
 80a4d28:	fa00 f304 	lsl.w	r3, r0, r4
 80a4d2c:	fa20 f005 	lsr.w	r0, r0, r5
 80a4d30:	fa01 f204 	lsl.w	r2, r1, r4
 80a4d34:	ea40 0002 	orr.w	r0, r0, r2
 80a4d38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4d3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4d40:	f141 0100 	adc.w	r1, r1, #0
 80a4d44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4d48:	bf08      	it	eq
 80a4d4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4d4e:	bd70      	pop	{r4, r5, r6, pc}
 80a4d50:	f1c4 0520 	rsb	r5, r4, #32
 80a4d54:	fa00 f205 	lsl.w	r2, r0, r5
 80a4d58:	ea4e 0e02 	orr.w	lr, lr, r2
 80a4d5c:	fa20 f304 	lsr.w	r3, r0, r4
 80a4d60:	fa01 f205 	lsl.w	r2, r1, r5
 80a4d64:	ea43 0302 	orr.w	r3, r3, r2
 80a4d68:	fa21 f004 	lsr.w	r0, r1, r4
 80a4d6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4d70:	fa21 f204 	lsr.w	r2, r1, r4
 80a4d74:	ea20 0002 	bic.w	r0, r0, r2
 80a4d78:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a4d7c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4d80:	bf08      	it	eq
 80a4d82:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4d86:	bd70      	pop	{r4, r5, r6, pc}
 80a4d88:	f094 0f00 	teq	r4, #0
 80a4d8c:	d10f      	bne.n	80a4dae <__aeabi_dmul+0x1c2>
 80a4d8e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a4d92:	0040      	lsls	r0, r0, #1
 80a4d94:	eb41 0101 	adc.w	r1, r1, r1
 80a4d98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4d9c:	bf08      	it	eq
 80a4d9e:	3c01      	subeq	r4, #1
 80a4da0:	d0f7      	beq.n	80a4d92 <__aeabi_dmul+0x1a6>
 80a4da2:	ea41 0106 	orr.w	r1, r1, r6
 80a4da6:	f095 0f00 	teq	r5, #0
 80a4daa:	bf18      	it	ne
 80a4dac:	4770      	bxne	lr
 80a4dae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a4db2:	0052      	lsls	r2, r2, #1
 80a4db4:	eb43 0303 	adc.w	r3, r3, r3
 80a4db8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a4dbc:	bf08      	it	eq
 80a4dbe:	3d01      	subeq	r5, #1
 80a4dc0:	d0f7      	beq.n	80a4db2 <__aeabi_dmul+0x1c6>
 80a4dc2:	ea43 0306 	orr.w	r3, r3, r6
 80a4dc6:	4770      	bx	lr
 80a4dc8:	ea94 0f0c 	teq	r4, ip
 80a4dcc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a4dd0:	bf18      	it	ne
 80a4dd2:	ea95 0f0c 	teqne	r5, ip
 80a4dd6:	d00c      	beq.n	80a4df2 <__aeabi_dmul+0x206>
 80a4dd8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4ddc:	bf18      	it	ne
 80a4dde:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4de2:	d1d1      	bne.n	80a4d88 <__aeabi_dmul+0x19c>
 80a4de4:	ea81 0103 	eor.w	r1, r1, r3
 80a4de8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4dec:	f04f 0000 	mov.w	r0, #0
 80a4df0:	bd70      	pop	{r4, r5, r6, pc}
 80a4df2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4df6:	bf06      	itte	eq
 80a4df8:	4610      	moveq	r0, r2
 80a4dfa:	4619      	moveq	r1, r3
 80a4dfc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4e00:	d019      	beq.n	80a4e36 <__aeabi_dmul+0x24a>
 80a4e02:	ea94 0f0c 	teq	r4, ip
 80a4e06:	d102      	bne.n	80a4e0e <__aeabi_dmul+0x222>
 80a4e08:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a4e0c:	d113      	bne.n	80a4e36 <__aeabi_dmul+0x24a>
 80a4e0e:	ea95 0f0c 	teq	r5, ip
 80a4e12:	d105      	bne.n	80a4e20 <__aeabi_dmul+0x234>
 80a4e14:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a4e18:	bf1c      	itt	ne
 80a4e1a:	4610      	movne	r0, r2
 80a4e1c:	4619      	movne	r1, r3
 80a4e1e:	d10a      	bne.n	80a4e36 <__aeabi_dmul+0x24a>
 80a4e20:	ea81 0103 	eor.w	r1, r1, r3
 80a4e24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4e28:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4e2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4e30:	f04f 0000 	mov.w	r0, #0
 80a4e34:	bd70      	pop	{r4, r5, r6, pc}
 80a4e36:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4e3a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a4e3e:	bd70      	pop	{r4, r5, r6, pc}

080a4e40 <__aeabi_ddiv>:
 80a4e40:	b570      	push	{r4, r5, r6, lr}
 80a4e42:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4e46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4e4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4e4e:	bf1d      	ittte	ne
 80a4e50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4e54:	ea94 0f0c 	teqne	r4, ip
 80a4e58:	ea95 0f0c 	teqne	r5, ip
 80a4e5c:	f000 f8a7 	bleq	80a4fae <__aeabi_ddiv+0x16e>
 80a4e60:	eba4 0405 	sub.w	r4, r4, r5
 80a4e64:	ea81 0e03 	eor.w	lr, r1, r3
 80a4e68:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4e6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4e70:	f000 8088 	beq.w	80a4f84 <__aeabi_ddiv+0x144>
 80a4e74:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4e78:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a4e7c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a4e80:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a4e84:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a4e88:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a4e8c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a4e90:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a4e94:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a4e98:	429d      	cmp	r5, r3
 80a4e9a:	bf08      	it	eq
 80a4e9c:	4296      	cmpeq	r6, r2
 80a4e9e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a4ea2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a4ea6:	d202      	bcs.n	80a4eae <__aeabi_ddiv+0x6e>
 80a4ea8:	085b      	lsrs	r3, r3, #1
 80a4eaa:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4eae:	1ab6      	subs	r6, r6, r2
 80a4eb0:	eb65 0503 	sbc.w	r5, r5, r3
 80a4eb4:	085b      	lsrs	r3, r3, #1
 80a4eb6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4eba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a4ebe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a4ec2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4ec6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4eca:	bf22      	ittt	cs
 80a4ecc:	1ab6      	subcs	r6, r6, r2
 80a4ece:	4675      	movcs	r5, lr
 80a4ed0:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4ed4:	085b      	lsrs	r3, r3, #1
 80a4ed6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4eda:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4ede:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4ee2:	bf22      	ittt	cs
 80a4ee4:	1ab6      	subcs	r6, r6, r2
 80a4ee6:	4675      	movcs	r5, lr
 80a4ee8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4eec:	085b      	lsrs	r3, r3, #1
 80a4eee:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4ef2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4ef6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4efa:	bf22      	ittt	cs
 80a4efc:	1ab6      	subcs	r6, r6, r2
 80a4efe:	4675      	movcs	r5, lr
 80a4f00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4f04:	085b      	lsrs	r3, r3, #1
 80a4f06:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4f0a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4f0e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4f12:	bf22      	ittt	cs
 80a4f14:	1ab6      	subcs	r6, r6, r2
 80a4f16:	4675      	movcs	r5, lr
 80a4f18:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4f1c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a4f20:	d018      	beq.n	80a4f54 <__aeabi_ddiv+0x114>
 80a4f22:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a4f26:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a4f2a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a4f2e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a4f32:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a4f36:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a4f3a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a4f3e:	d1c0      	bne.n	80a4ec2 <__aeabi_ddiv+0x82>
 80a4f40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4f44:	d10b      	bne.n	80a4f5e <__aeabi_ddiv+0x11e>
 80a4f46:	ea41 0100 	orr.w	r1, r1, r0
 80a4f4a:	f04f 0000 	mov.w	r0, #0
 80a4f4e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a4f52:	e7b6      	b.n	80a4ec2 <__aeabi_ddiv+0x82>
 80a4f54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4f58:	bf04      	itt	eq
 80a4f5a:	4301      	orreq	r1, r0
 80a4f5c:	2000      	moveq	r0, #0
 80a4f5e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4f62:	bf88      	it	hi
 80a4f64:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4f68:	f63f aeaf 	bhi.w	80a4cca <__aeabi_dmul+0xde>
 80a4f6c:	ebb5 0c03 	subs.w	ip, r5, r3
 80a4f70:	bf04      	itt	eq
 80a4f72:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a4f76:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4f7a:	f150 0000 	adcs.w	r0, r0, #0
 80a4f7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4f82:	bd70      	pop	{r4, r5, r6, pc}
 80a4f84:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a4f88:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a4f8c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a4f90:	bfc2      	ittt	gt
 80a4f92:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4f96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4f9a:	bd70      	popgt	{r4, r5, r6, pc}
 80a4f9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4fa0:	f04f 0e00 	mov.w	lr, #0
 80a4fa4:	3c01      	subs	r4, #1
 80a4fa6:	e690      	b.n	80a4cca <__aeabi_dmul+0xde>
 80a4fa8:	ea45 0e06 	orr.w	lr, r5, r6
 80a4fac:	e68d      	b.n	80a4cca <__aeabi_dmul+0xde>
 80a4fae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a4fb2:	ea94 0f0c 	teq	r4, ip
 80a4fb6:	bf08      	it	eq
 80a4fb8:	ea95 0f0c 	teqeq	r5, ip
 80a4fbc:	f43f af3b 	beq.w	80a4e36 <__aeabi_dmul+0x24a>
 80a4fc0:	ea94 0f0c 	teq	r4, ip
 80a4fc4:	d10a      	bne.n	80a4fdc <__aeabi_ddiv+0x19c>
 80a4fc6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4fca:	f47f af34 	bne.w	80a4e36 <__aeabi_dmul+0x24a>
 80a4fce:	ea95 0f0c 	teq	r5, ip
 80a4fd2:	f47f af25 	bne.w	80a4e20 <__aeabi_dmul+0x234>
 80a4fd6:	4610      	mov	r0, r2
 80a4fd8:	4619      	mov	r1, r3
 80a4fda:	e72c      	b.n	80a4e36 <__aeabi_dmul+0x24a>
 80a4fdc:	ea95 0f0c 	teq	r5, ip
 80a4fe0:	d106      	bne.n	80a4ff0 <__aeabi_ddiv+0x1b0>
 80a4fe2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4fe6:	f43f aefd 	beq.w	80a4de4 <__aeabi_dmul+0x1f8>
 80a4fea:	4610      	mov	r0, r2
 80a4fec:	4619      	mov	r1, r3
 80a4fee:	e722      	b.n	80a4e36 <__aeabi_dmul+0x24a>
 80a4ff0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4ff4:	bf18      	it	ne
 80a4ff6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4ffa:	f47f aec5 	bne.w	80a4d88 <__aeabi_dmul+0x19c>
 80a4ffe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a5002:	f47f af0d 	bne.w	80a4e20 <__aeabi_dmul+0x234>
 80a5006:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a500a:	f47f aeeb 	bne.w	80a4de4 <__aeabi_dmul+0x1f8>
 80a500e:	e712      	b.n	80a4e36 <__aeabi_dmul+0x24a>

080a5010 <__gedf2>:
 80a5010:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a5014:	e006      	b.n	80a5024 <__cmpdf2+0x4>
 80a5016:	bf00      	nop

080a5018 <__ledf2>:
 80a5018:	f04f 0c01 	mov.w	ip, #1
 80a501c:	e002      	b.n	80a5024 <__cmpdf2+0x4>
 80a501e:	bf00      	nop

080a5020 <__cmpdf2>:
 80a5020:	f04f 0c01 	mov.w	ip, #1
 80a5024:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a5028:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a502c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5030:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5034:	bf18      	it	ne
 80a5036:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a503a:	d01b      	beq.n	80a5074 <__cmpdf2+0x54>
 80a503c:	b001      	add	sp, #4
 80a503e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a5042:	bf0c      	ite	eq
 80a5044:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a5048:	ea91 0f03 	teqne	r1, r3
 80a504c:	bf02      	ittt	eq
 80a504e:	ea90 0f02 	teqeq	r0, r2
 80a5052:	2000      	moveq	r0, #0
 80a5054:	4770      	bxeq	lr
 80a5056:	f110 0f00 	cmn.w	r0, #0
 80a505a:	ea91 0f03 	teq	r1, r3
 80a505e:	bf58      	it	pl
 80a5060:	4299      	cmppl	r1, r3
 80a5062:	bf08      	it	eq
 80a5064:	4290      	cmpeq	r0, r2
 80a5066:	bf2c      	ite	cs
 80a5068:	17d8      	asrcs	r0, r3, #31
 80a506a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a506e:	f040 0001 	orr.w	r0, r0, #1
 80a5072:	4770      	bx	lr
 80a5074:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5078:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a507c:	d102      	bne.n	80a5084 <__cmpdf2+0x64>
 80a507e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a5082:	d107      	bne.n	80a5094 <__cmpdf2+0x74>
 80a5084:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5088:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a508c:	d1d6      	bne.n	80a503c <__cmpdf2+0x1c>
 80a508e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a5092:	d0d3      	beq.n	80a503c <__cmpdf2+0x1c>
 80a5094:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a5098:	4770      	bx	lr
 80a509a:	bf00      	nop

080a509c <__aeabi_cdrcmple>:
 80a509c:	4684      	mov	ip, r0
 80a509e:	4610      	mov	r0, r2
 80a50a0:	4662      	mov	r2, ip
 80a50a2:	468c      	mov	ip, r1
 80a50a4:	4619      	mov	r1, r3
 80a50a6:	4663      	mov	r3, ip
 80a50a8:	e000      	b.n	80a50ac <__aeabi_cdcmpeq>
 80a50aa:	bf00      	nop

080a50ac <__aeabi_cdcmpeq>:
 80a50ac:	b501      	push	{r0, lr}
 80a50ae:	f7ff ffb7 	bl	80a5020 <__cmpdf2>
 80a50b2:	2800      	cmp	r0, #0
 80a50b4:	bf48      	it	mi
 80a50b6:	f110 0f00 	cmnmi.w	r0, #0
 80a50ba:	bd01      	pop	{r0, pc}

080a50bc <__aeabi_dcmpeq>:
 80a50bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a50c0:	f7ff fff4 	bl	80a50ac <__aeabi_cdcmpeq>
 80a50c4:	bf0c      	ite	eq
 80a50c6:	2001      	moveq	r0, #1
 80a50c8:	2000      	movne	r0, #0
 80a50ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80a50ce:	bf00      	nop

080a50d0 <__aeabi_dcmplt>:
 80a50d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a50d4:	f7ff ffea 	bl	80a50ac <__aeabi_cdcmpeq>
 80a50d8:	bf34      	ite	cc
 80a50da:	2001      	movcc	r0, #1
 80a50dc:	2000      	movcs	r0, #0
 80a50de:	f85d fb08 	ldr.w	pc, [sp], #8
 80a50e2:	bf00      	nop

080a50e4 <__aeabi_dcmple>:
 80a50e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a50e8:	f7ff ffe0 	bl	80a50ac <__aeabi_cdcmpeq>
 80a50ec:	bf94      	ite	ls
 80a50ee:	2001      	movls	r0, #1
 80a50f0:	2000      	movhi	r0, #0
 80a50f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a50f6:	bf00      	nop

080a50f8 <__aeabi_dcmpge>:
 80a50f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a50fc:	f7ff ffce 	bl	80a509c <__aeabi_cdrcmple>
 80a5100:	bf94      	ite	ls
 80a5102:	2001      	movls	r0, #1
 80a5104:	2000      	movhi	r0, #0
 80a5106:	f85d fb08 	ldr.w	pc, [sp], #8
 80a510a:	bf00      	nop

080a510c <__aeabi_dcmpgt>:
 80a510c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5110:	f7ff ffc4 	bl	80a509c <__aeabi_cdrcmple>
 80a5114:	bf34      	ite	cc
 80a5116:	2001      	movcc	r0, #1
 80a5118:	2000      	movcs	r0, #0
 80a511a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a511e:	bf00      	nop

080a5120 <__aeabi_dcmpun>:
 80a5120:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5124:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5128:	d102      	bne.n	80a5130 <__aeabi_dcmpun+0x10>
 80a512a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a512e:	d10a      	bne.n	80a5146 <__aeabi_dcmpun+0x26>
 80a5130:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5134:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5138:	d102      	bne.n	80a5140 <__aeabi_dcmpun+0x20>
 80a513a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a513e:	d102      	bne.n	80a5146 <__aeabi_dcmpun+0x26>
 80a5140:	f04f 0000 	mov.w	r0, #0
 80a5144:	4770      	bx	lr
 80a5146:	f04f 0001 	mov.w	r0, #1
 80a514a:	4770      	bx	lr

080a514c <__aeabi_d2iz>:
 80a514c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a5150:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a5154:	d215      	bcs.n	80a5182 <__aeabi_d2iz+0x36>
 80a5156:	d511      	bpl.n	80a517c <__aeabi_d2iz+0x30>
 80a5158:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a515c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a5160:	d912      	bls.n	80a5188 <__aeabi_d2iz+0x3c>
 80a5162:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5166:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a516a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a516e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5172:	fa23 f002 	lsr.w	r0, r3, r2
 80a5176:	bf18      	it	ne
 80a5178:	4240      	negne	r0, r0
 80a517a:	4770      	bx	lr
 80a517c:	f04f 0000 	mov.w	r0, #0
 80a5180:	4770      	bx	lr
 80a5182:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a5186:	d105      	bne.n	80a5194 <__aeabi_d2iz+0x48>
 80a5188:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a518c:	bf08      	it	eq
 80a518e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a5192:	4770      	bx	lr
 80a5194:	f04f 0000 	mov.w	r0, #0
 80a5198:	4770      	bx	lr
 80a519a:	bf00      	nop

080a519c <__aeabi_d2uiz>:
 80a519c:	004a      	lsls	r2, r1, #1
 80a519e:	d211      	bcs.n	80a51c4 <__aeabi_d2uiz+0x28>
 80a51a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a51a4:	d211      	bcs.n	80a51ca <__aeabi_d2uiz+0x2e>
 80a51a6:	d50d      	bpl.n	80a51c4 <__aeabi_d2uiz+0x28>
 80a51a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a51ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a51b0:	d40e      	bmi.n	80a51d0 <__aeabi_d2uiz+0x34>
 80a51b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a51b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a51ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a51be:	fa23 f002 	lsr.w	r0, r3, r2
 80a51c2:	4770      	bx	lr
 80a51c4:	f04f 0000 	mov.w	r0, #0
 80a51c8:	4770      	bx	lr
 80a51ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a51ce:	d102      	bne.n	80a51d6 <__aeabi_d2uiz+0x3a>
 80a51d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a51d4:	4770      	bx	lr
 80a51d6:	f04f 0000 	mov.w	r0, #0
 80a51da:	4770      	bx	lr

080a51dc <__aeabi_d2f>:
 80a51dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a51e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a51e4:	bf24      	itt	cs
 80a51e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a51ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a51ee:	d90d      	bls.n	80a520c <__aeabi_d2f+0x30>
 80a51f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a51f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a51f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a51fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a5200:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a5204:	bf08      	it	eq
 80a5206:	f020 0001 	biceq.w	r0, r0, #1
 80a520a:	4770      	bx	lr
 80a520c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a5210:	d121      	bne.n	80a5256 <__aeabi_d2f+0x7a>
 80a5212:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a5216:	bfbc      	itt	lt
 80a5218:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a521c:	4770      	bxlt	lr
 80a521e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5222:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a5226:	f1c2 0218 	rsb	r2, r2, #24
 80a522a:	f1c2 0c20 	rsb	ip, r2, #32
 80a522e:	fa10 f30c 	lsls.w	r3, r0, ip
 80a5232:	fa20 f002 	lsr.w	r0, r0, r2
 80a5236:	bf18      	it	ne
 80a5238:	f040 0001 	orrne.w	r0, r0, #1
 80a523c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5240:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a5244:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a5248:	ea40 000c 	orr.w	r0, r0, ip
 80a524c:	fa23 f302 	lsr.w	r3, r3, r2
 80a5250:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a5254:	e7cc      	b.n	80a51f0 <__aeabi_d2f+0x14>
 80a5256:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a525a:	d107      	bne.n	80a526c <__aeabi_d2f+0x90>
 80a525c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a5260:	bf1e      	ittt	ne
 80a5262:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a5266:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a526a:	4770      	bxne	lr
 80a526c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a5270:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5274:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5278:	4770      	bx	lr
 80a527a:	bf00      	nop

080a527c <__aeabi_frsub>:
 80a527c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a5280:	e002      	b.n	80a5288 <__addsf3>
 80a5282:	bf00      	nop

080a5284 <__aeabi_fsub>:
 80a5284:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a5288 <__addsf3>:
 80a5288:	0042      	lsls	r2, r0, #1
 80a528a:	bf1f      	itttt	ne
 80a528c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a5290:	ea92 0f03 	teqne	r2, r3
 80a5294:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a5298:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a529c:	d06a      	beq.n	80a5374 <__addsf3+0xec>
 80a529e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a52a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a52a6:	bfc1      	itttt	gt
 80a52a8:	18d2      	addgt	r2, r2, r3
 80a52aa:	4041      	eorgt	r1, r0
 80a52ac:	4048      	eorgt	r0, r1
 80a52ae:	4041      	eorgt	r1, r0
 80a52b0:	bfb8      	it	lt
 80a52b2:	425b      	neglt	r3, r3
 80a52b4:	2b19      	cmp	r3, #25
 80a52b6:	bf88      	it	hi
 80a52b8:	4770      	bxhi	lr
 80a52ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a52be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a52c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a52c6:	bf18      	it	ne
 80a52c8:	4240      	negne	r0, r0
 80a52ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a52ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a52d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a52d6:	bf18      	it	ne
 80a52d8:	4249      	negne	r1, r1
 80a52da:	ea92 0f03 	teq	r2, r3
 80a52de:	d03f      	beq.n	80a5360 <__addsf3+0xd8>
 80a52e0:	f1a2 0201 	sub.w	r2, r2, #1
 80a52e4:	fa41 fc03 	asr.w	ip, r1, r3
 80a52e8:	eb10 000c 	adds.w	r0, r0, ip
 80a52ec:	f1c3 0320 	rsb	r3, r3, #32
 80a52f0:	fa01 f103 	lsl.w	r1, r1, r3
 80a52f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a52f8:	d502      	bpl.n	80a5300 <__addsf3+0x78>
 80a52fa:	4249      	negs	r1, r1
 80a52fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a5300:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a5304:	d313      	bcc.n	80a532e <__addsf3+0xa6>
 80a5306:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a530a:	d306      	bcc.n	80a531a <__addsf3+0x92>
 80a530c:	0840      	lsrs	r0, r0, #1
 80a530e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a5312:	f102 0201 	add.w	r2, r2, #1
 80a5316:	2afe      	cmp	r2, #254	; 0xfe
 80a5318:	d251      	bcs.n	80a53be <__addsf3+0x136>
 80a531a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a531e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5322:	bf08      	it	eq
 80a5324:	f020 0001 	biceq.w	r0, r0, #1
 80a5328:	ea40 0003 	orr.w	r0, r0, r3
 80a532c:	4770      	bx	lr
 80a532e:	0049      	lsls	r1, r1, #1
 80a5330:	eb40 0000 	adc.w	r0, r0, r0
 80a5334:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a5338:	f1a2 0201 	sub.w	r2, r2, #1
 80a533c:	d1ed      	bne.n	80a531a <__addsf3+0x92>
 80a533e:	fab0 fc80 	clz	ip, r0
 80a5342:	f1ac 0c08 	sub.w	ip, ip, #8
 80a5346:	ebb2 020c 	subs.w	r2, r2, ip
 80a534a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a534e:	bfaa      	itet	ge
 80a5350:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a5354:	4252      	neglt	r2, r2
 80a5356:	4318      	orrge	r0, r3
 80a5358:	bfbc      	itt	lt
 80a535a:	40d0      	lsrlt	r0, r2
 80a535c:	4318      	orrlt	r0, r3
 80a535e:	4770      	bx	lr
 80a5360:	f092 0f00 	teq	r2, #0
 80a5364:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a5368:	bf06      	itte	eq
 80a536a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a536e:	3201      	addeq	r2, #1
 80a5370:	3b01      	subne	r3, #1
 80a5372:	e7b5      	b.n	80a52e0 <__addsf3+0x58>
 80a5374:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a5378:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a537c:	bf18      	it	ne
 80a537e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5382:	d021      	beq.n	80a53c8 <__addsf3+0x140>
 80a5384:	ea92 0f03 	teq	r2, r3
 80a5388:	d004      	beq.n	80a5394 <__addsf3+0x10c>
 80a538a:	f092 0f00 	teq	r2, #0
 80a538e:	bf08      	it	eq
 80a5390:	4608      	moveq	r0, r1
 80a5392:	4770      	bx	lr
 80a5394:	ea90 0f01 	teq	r0, r1
 80a5398:	bf1c      	itt	ne
 80a539a:	2000      	movne	r0, #0
 80a539c:	4770      	bxne	lr
 80a539e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a53a2:	d104      	bne.n	80a53ae <__addsf3+0x126>
 80a53a4:	0040      	lsls	r0, r0, #1
 80a53a6:	bf28      	it	cs
 80a53a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a53ac:	4770      	bx	lr
 80a53ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a53b2:	bf3c      	itt	cc
 80a53b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a53b8:	4770      	bxcc	lr
 80a53ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a53be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a53c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a53c6:	4770      	bx	lr
 80a53c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a53cc:	bf16      	itet	ne
 80a53ce:	4608      	movne	r0, r1
 80a53d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a53d4:	4601      	movne	r1, r0
 80a53d6:	0242      	lsls	r2, r0, #9
 80a53d8:	bf06      	itte	eq
 80a53da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a53de:	ea90 0f01 	teqeq	r0, r1
 80a53e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a53e6:	4770      	bx	lr

080a53e8 <__aeabi_ui2f>:
 80a53e8:	f04f 0300 	mov.w	r3, #0
 80a53ec:	e004      	b.n	80a53f8 <__aeabi_i2f+0x8>
 80a53ee:	bf00      	nop

080a53f0 <__aeabi_i2f>:
 80a53f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a53f4:	bf48      	it	mi
 80a53f6:	4240      	negmi	r0, r0
 80a53f8:	ea5f 0c00 	movs.w	ip, r0
 80a53fc:	bf08      	it	eq
 80a53fe:	4770      	bxeq	lr
 80a5400:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a5404:	4601      	mov	r1, r0
 80a5406:	f04f 0000 	mov.w	r0, #0
 80a540a:	e01c      	b.n	80a5446 <__aeabi_l2f+0x2a>

080a540c <__aeabi_ul2f>:
 80a540c:	ea50 0201 	orrs.w	r2, r0, r1
 80a5410:	bf08      	it	eq
 80a5412:	4770      	bxeq	lr
 80a5414:	f04f 0300 	mov.w	r3, #0
 80a5418:	e00a      	b.n	80a5430 <__aeabi_l2f+0x14>
 80a541a:	bf00      	nop

080a541c <__aeabi_l2f>:
 80a541c:	ea50 0201 	orrs.w	r2, r0, r1
 80a5420:	bf08      	it	eq
 80a5422:	4770      	bxeq	lr
 80a5424:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a5428:	d502      	bpl.n	80a5430 <__aeabi_l2f+0x14>
 80a542a:	4240      	negs	r0, r0
 80a542c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5430:	ea5f 0c01 	movs.w	ip, r1
 80a5434:	bf02      	ittt	eq
 80a5436:	4684      	moveq	ip, r0
 80a5438:	4601      	moveq	r1, r0
 80a543a:	2000      	moveq	r0, #0
 80a543c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a5440:	bf08      	it	eq
 80a5442:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a5446:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a544a:	fabc f28c 	clz	r2, ip
 80a544e:	3a08      	subs	r2, #8
 80a5450:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a5454:	db10      	blt.n	80a5478 <__aeabi_l2f+0x5c>
 80a5456:	fa01 fc02 	lsl.w	ip, r1, r2
 80a545a:	4463      	add	r3, ip
 80a545c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a5460:	f1c2 0220 	rsb	r2, r2, #32
 80a5464:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a5468:	fa20 f202 	lsr.w	r2, r0, r2
 80a546c:	eb43 0002 	adc.w	r0, r3, r2
 80a5470:	bf08      	it	eq
 80a5472:	f020 0001 	biceq.w	r0, r0, #1
 80a5476:	4770      	bx	lr
 80a5478:	f102 0220 	add.w	r2, r2, #32
 80a547c:	fa01 fc02 	lsl.w	ip, r1, r2
 80a5480:	f1c2 0220 	rsb	r2, r2, #32
 80a5484:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a5488:	fa21 f202 	lsr.w	r2, r1, r2
 80a548c:	eb43 0002 	adc.w	r0, r3, r2
 80a5490:	bf08      	it	eq
 80a5492:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a5496:	4770      	bx	lr

080a5498 <__aeabi_fmul>:
 80a5498:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a549c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a54a0:	bf1e      	ittt	ne
 80a54a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a54a6:	ea92 0f0c 	teqne	r2, ip
 80a54aa:	ea93 0f0c 	teqne	r3, ip
 80a54ae:	d06f      	beq.n	80a5590 <__aeabi_fmul+0xf8>
 80a54b0:	441a      	add	r2, r3
 80a54b2:	ea80 0c01 	eor.w	ip, r0, r1
 80a54b6:	0240      	lsls	r0, r0, #9
 80a54b8:	bf18      	it	ne
 80a54ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a54be:	d01e      	beq.n	80a54fe <__aeabi_fmul+0x66>
 80a54c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a54c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a54c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a54cc:	fba0 3101 	umull	r3, r1, r0, r1
 80a54d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a54d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a54d8:	bf3e      	ittt	cc
 80a54da:	0049      	lslcc	r1, r1, #1
 80a54dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a54e0:	005b      	lslcc	r3, r3, #1
 80a54e2:	ea40 0001 	orr.w	r0, r0, r1
 80a54e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a54ea:	2afd      	cmp	r2, #253	; 0xfd
 80a54ec:	d81d      	bhi.n	80a552a <__aeabi_fmul+0x92>
 80a54ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a54f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a54f6:	bf08      	it	eq
 80a54f8:	f020 0001 	biceq.w	r0, r0, #1
 80a54fc:	4770      	bx	lr
 80a54fe:	f090 0f00 	teq	r0, #0
 80a5502:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a5506:	bf08      	it	eq
 80a5508:	0249      	lsleq	r1, r1, #9
 80a550a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a550e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a5512:	3a7f      	subs	r2, #127	; 0x7f
 80a5514:	bfc2      	ittt	gt
 80a5516:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a551a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a551e:	4770      	bxgt	lr
 80a5520:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5524:	f04f 0300 	mov.w	r3, #0
 80a5528:	3a01      	subs	r2, #1
 80a552a:	dc5d      	bgt.n	80a55e8 <__aeabi_fmul+0x150>
 80a552c:	f112 0f19 	cmn.w	r2, #25
 80a5530:	bfdc      	itt	le
 80a5532:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a5536:	4770      	bxle	lr
 80a5538:	f1c2 0200 	rsb	r2, r2, #0
 80a553c:	0041      	lsls	r1, r0, #1
 80a553e:	fa21 f102 	lsr.w	r1, r1, r2
 80a5542:	f1c2 0220 	rsb	r2, r2, #32
 80a5546:	fa00 fc02 	lsl.w	ip, r0, r2
 80a554a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a554e:	f140 0000 	adc.w	r0, r0, #0
 80a5552:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a5556:	bf08      	it	eq
 80a5558:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a555c:	4770      	bx	lr
 80a555e:	f092 0f00 	teq	r2, #0
 80a5562:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a5566:	bf02      	ittt	eq
 80a5568:	0040      	lsleq	r0, r0, #1
 80a556a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a556e:	3a01      	subeq	r2, #1
 80a5570:	d0f9      	beq.n	80a5566 <__aeabi_fmul+0xce>
 80a5572:	ea40 000c 	orr.w	r0, r0, ip
 80a5576:	f093 0f00 	teq	r3, #0
 80a557a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a557e:	bf02      	ittt	eq
 80a5580:	0049      	lsleq	r1, r1, #1
 80a5582:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a5586:	3b01      	subeq	r3, #1
 80a5588:	d0f9      	beq.n	80a557e <__aeabi_fmul+0xe6>
 80a558a:	ea41 010c 	orr.w	r1, r1, ip
 80a558e:	e78f      	b.n	80a54b0 <__aeabi_fmul+0x18>
 80a5590:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a5594:	ea92 0f0c 	teq	r2, ip
 80a5598:	bf18      	it	ne
 80a559a:	ea93 0f0c 	teqne	r3, ip
 80a559e:	d00a      	beq.n	80a55b6 <__aeabi_fmul+0x11e>
 80a55a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a55a4:	bf18      	it	ne
 80a55a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a55aa:	d1d8      	bne.n	80a555e <__aeabi_fmul+0xc6>
 80a55ac:	ea80 0001 	eor.w	r0, r0, r1
 80a55b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a55b4:	4770      	bx	lr
 80a55b6:	f090 0f00 	teq	r0, #0
 80a55ba:	bf17      	itett	ne
 80a55bc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a55c0:	4608      	moveq	r0, r1
 80a55c2:	f091 0f00 	teqne	r1, #0
 80a55c6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a55ca:	d014      	beq.n	80a55f6 <__aeabi_fmul+0x15e>
 80a55cc:	ea92 0f0c 	teq	r2, ip
 80a55d0:	d101      	bne.n	80a55d6 <__aeabi_fmul+0x13e>
 80a55d2:	0242      	lsls	r2, r0, #9
 80a55d4:	d10f      	bne.n	80a55f6 <__aeabi_fmul+0x15e>
 80a55d6:	ea93 0f0c 	teq	r3, ip
 80a55da:	d103      	bne.n	80a55e4 <__aeabi_fmul+0x14c>
 80a55dc:	024b      	lsls	r3, r1, #9
 80a55de:	bf18      	it	ne
 80a55e0:	4608      	movne	r0, r1
 80a55e2:	d108      	bne.n	80a55f6 <__aeabi_fmul+0x15e>
 80a55e4:	ea80 0001 	eor.w	r0, r0, r1
 80a55e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a55ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a55f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a55f4:	4770      	bx	lr
 80a55f6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a55fa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a55fe:	4770      	bx	lr

080a5600 <__aeabi_fdiv>:
 80a5600:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5604:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a5608:	bf1e      	ittt	ne
 80a560a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a560e:	ea92 0f0c 	teqne	r2, ip
 80a5612:	ea93 0f0c 	teqne	r3, ip
 80a5616:	d069      	beq.n	80a56ec <__aeabi_fdiv+0xec>
 80a5618:	eba2 0203 	sub.w	r2, r2, r3
 80a561c:	ea80 0c01 	eor.w	ip, r0, r1
 80a5620:	0249      	lsls	r1, r1, #9
 80a5622:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a5626:	d037      	beq.n	80a5698 <__aeabi_fdiv+0x98>
 80a5628:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a562c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a5630:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a5634:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a5638:	428b      	cmp	r3, r1
 80a563a:	bf38      	it	cc
 80a563c:	005b      	lslcc	r3, r3, #1
 80a563e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a5642:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a5646:	428b      	cmp	r3, r1
 80a5648:	bf24      	itt	cs
 80a564a:	1a5b      	subcs	r3, r3, r1
 80a564c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5650:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a5654:	bf24      	itt	cs
 80a5656:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a565a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a565e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a5662:	bf24      	itt	cs
 80a5664:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a5668:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a566c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a5670:	bf24      	itt	cs
 80a5672:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a5676:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a567a:	011b      	lsls	r3, r3, #4
 80a567c:	bf18      	it	ne
 80a567e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a5682:	d1e0      	bne.n	80a5646 <__aeabi_fdiv+0x46>
 80a5684:	2afd      	cmp	r2, #253	; 0xfd
 80a5686:	f63f af50 	bhi.w	80a552a <__aeabi_fmul+0x92>
 80a568a:	428b      	cmp	r3, r1
 80a568c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5690:	bf08      	it	eq
 80a5692:	f020 0001 	biceq.w	r0, r0, #1
 80a5696:	4770      	bx	lr
 80a5698:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a569c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a56a0:	327f      	adds	r2, #127	; 0x7f
 80a56a2:	bfc2      	ittt	gt
 80a56a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a56a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a56ac:	4770      	bxgt	lr
 80a56ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a56b2:	f04f 0300 	mov.w	r3, #0
 80a56b6:	3a01      	subs	r2, #1
 80a56b8:	e737      	b.n	80a552a <__aeabi_fmul+0x92>
 80a56ba:	f092 0f00 	teq	r2, #0
 80a56be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a56c2:	bf02      	ittt	eq
 80a56c4:	0040      	lsleq	r0, r0, #1
 80a56c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a56ca:	3a01      	subeq	r2, #1
 80a56cc:	d0f9      	beq.n	80a56c2 <__aeabi_fdiv+0xc2>
 80a56ce:	ea40 000c 	orr.w	r0, r0, ip
 80a56d2:	f093 0f00 	teq	r3, #0
 80a56d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a56da:	bf02      	ittt	eq
 80a56dc:	0049      	lsleq	r1, r1, #1
 80a56de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a56e2:	3b01      	subeq	r3, #1
 80a56e4:	d0f9      	beq.n	80a56da <__aeabi_fdiv+0xda>
 80a56e6:	ea41 010c 	orr.w	r1, r1, ip
 80a56ea:	e795      	b.n	80a5618 <__aeabi_fdiv+0x18>
 80a56ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a56f0:	ea92 0f0c 	teq	r2, ip
 80a56f4:	d108      	bne.n	80a5708 <__aeabi_fdiv+0x108>
 80a56f6:	0242      	lsls	r2, r0, #9
 80a56f8:	f47f af7d 	bne.w	80a55f6 <__aeabi_fmul+0x15e>
 80a56fc:	ea93 0f0c 	teq	r3, ip
 80a5700:	f47f af70 	bne.w	80a55e4 <__aeabi_fmul+0x14c>
 80a5704:	4608      	mov	r0, r1
 80a5706:	e776      	b.n	80a55f6 <__aeabi_fmul+0x15e>
 80a5708:	ea93 0f0c 	teq	r3, ip
 80a570c:	d104      	bne.n	80a5718 <__aeabi_fdiv+0x118>
 80a570e:	024b      	lsls	r3, r1, #9
 80a5710:	f43f af4c 	beq.w	80a55ac <__aeabi_fmul+0x114>
 80a5714:	4608      	mov	r0, r1
 80a5716:	e76e      	b.n	80a55f6 <__aeabi_fmul+0x15e>
 80a5718:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a571c:	bf18      	it	ne
 80a571e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a5722:	d1ca      	bne.n	80a56ba <__aeabi_fdiv+0xba>
 80a5724:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a5728:	f47f af5c 	bne.w	80a55e4 <__aeabi_fmul+0x14c>
 80a572c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a5730:	f47f af3c 	bne.w	80a55ac <__aeabi_fmul+0x114>
 80a5734:	e75f      	b.n	80a55f6 <__aeabi_fmul+0x15e>
 80a5736:	bf00      	nop

080a5738 <asctime>:
 80a5738:	4b09      	ldr	r3, [pc, #36]	; (80a5760 <asctime+0x28>)
 80a573a:	b570      	push	{r4, r5, r6, lr}
 80a573c:	681c      	ldr	r4, [r3, #0]
 80a573e:	4606      	mov	r6, r0
 80a5740:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80a5742:	b93d      	cbnz	r5, 80a5754 <asctime+0x1c>
 80a5744:	201a      	movs	r0, #26
 80a5746:	f7fc f823 	bl	80a1790 <malloc>
 80a574a:	221a      	movs	r2, #26
 80a574c:	6420      	str	r0, [r4, #64]	; 0x40
 80a574e:	4629      	mov	r1, r5
 80a5750:	f000 f93f 	bl	80a59d2 <memset>
 80a5754:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80a5756:	4630      	mov	r0, r6
 80a5758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a575c:	f000 b802 	b.w	80a5764 <asctime_r>
 80a5760:	20000390 	.word	0x20000390

080a5764 <asctime_r>:
 80a5764:	b510      	push	{r4, lr}
 80a5766:	460c      	mov	r4, r1
 80a5768:	6941      	ldr	r1, [r0, #20]
 80a576a:	b086      	sub	sp, #24
 80a576c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80a5770:	6903      	ldr	r3, [r0, #16]
 80a5772:	6982      	ldr	r2, [r0, #24]
 80a5774:	9104      	str	r1, [sp, #16]
 80a5776:	6801      	ldr	r1, [r0, #0]
 80a5778:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a577c:	9103      	str	r1, [sp, #12]
 80a577e:	6841      	ldr	r1, [r0, #4]
 80a5780:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a5784:	9102      	str	r1, [sp, #8]
 80a5786:	6881      	ldr	r1, [r0, #8]
 80a5788:	9101      	str	r1, [sp, #4]
 80a578a:	68c1      	ldr	r1, [r0, #12]
 80a578c:	4620      	mov	r0, r4
 80a578e:	9100      	str	r1, [sp, #0]
 80a5790:	4904      	ldr	r1, [pc, #16]	; (80a57a4 <asctime_r+0x40>)
 80a5792:	440b      	add	r3, r1
 80a5794:	4904      	ldr	r1, [pc, #16]	; (80a57a8 <asctime_r+0x44>)
 80a5796:	440a      	add	r2, r1
 80a5798:	4904      	ldr	r1, [pc, #16]	; (80a57ac <asctime_r+0x48>)
 80a579a:	f7fc f811 	bl	80a17c0 <siprintf>
 80a579e:	4620      	mov	r0, r4
 80a57a0:	b006      	add	sp, #24
 80a57a2:	bd10      	pop	{r4, pc}
 80a57a4:	080a6765 	.word	0x080a6765
 80a57a8:	080a6750 	.word	0x080a6750
 80a57ac:	080a6789 	.word	0x080a6789

080a57b0 <__cxa_atexit>:
 80a57b0:	b510      	push	{r4, lr}
 80a57b2:	4c05      	ldr	r4, [pc, #20]	; (80a57c8 <__cxa_atexit+0x18>)
 80a57b4:	4613      	mov	r3, r2
 80a57b6:	b12c      	cbz	r4, 80a57c4 <__cxa_atexit+0x14>
 80a57b8:	460a      	mov	r2, r1
 80a57ba:	4601      	mov	r1, r0
 80a57bc:	2002      	movs	r0, #2
 80a57be:	f3af 8000 	nop.w
 80a57c2:	bd10      	pop	{r4, pc}
 80a57c4:	4620      	mov	r0, r4
 80a57c6:	bd10      	pop	{r4, pc}
 80a57c8:	00000000 	.word	0x00000000

080a57cc <localtime>:
 80a57cc:	b538      	push	{r3, r4, r5, lr}
 80a57ce:	4b07      	ldr	r3, [pc, #28]	; (80a57ec <localtime+0x20>)
 80a57d0:	4605      	mov	r5, r0
 80a57d2:	681c      	ldr	r4, [r3, #0]
 80a57d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a57d6:	b91b      	cbnz	r3, 80a57e0 <localtime+0x14>
 80a57d8:	2024      	movs	r0, #36	; 0x24
 80a57da:	f7fb ffd9 	bl	80a1790 <malloc>
 80a57de:	63e0      	str	r0, [r4, #60]	; 0x3c
 80a57e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a57e2:	4628      	mov	r0, r5
 80a57e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a57e8:	f000 b802 	b.w	80a57f0 <localtime_r>
 80a57ec:	20000390 	.word	0x20000390

080a57f0 <localtime_r>:
 80a57f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a57f4:	460c      	mov	r4, r1
 80a57f6:	4680      	mov	r8, r0
 80a57f8:	f000 fc62 	bl	80a60c0 <__gettzinfo>
 80a57fc:	4621      	mov	r1, r4
 80a57fe:	4607      	mov	r7, r0
 80a5800:	4640      	mov	r0, r8
 80a5802:	f000 fc61 	bl	80a60c8 <gmtime_r>
 80a5806:	6946      	ldr	r6, [r0, #20]
 80a5808:	4604      	mov	r4, r0
 80a580a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a580e:	07b3      	lsls	r3, r6, #30
 80a5810:	d105      	bne.n	80a581e <localtime_r+0x2e>
 80a5812:	2264      	movs	r2, #100	; 0x64
 80a5814:	fb96 f3f2 	sdiv	r3, r6, r2
 80a5818:	fb02 6313 	mls	r3, r2, r3, r6
 80a581c:	b94b      	cbnz	r3, 80a5832 <localtime_r+0x42>
 80a581e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a5822:	fb96 f3f5 	sdiv	r3, r6, r5
 80a5826:	fb05 6513 	mls	r5, r5, r3, r6
 80a582a:	fab5 f385 	clz	r3, r5
 80a582e:	095b      	lsrs	r3, r3, #5
 80a5830:	e000      	b.n	80a5834 <localtime_r+0x44>
 80a5832:	2301      	movs	r3, #1
 80a5834:	4a5f      	ldr	r2, [pc, #380]	; (80a59b4 <localtime_r+0x1c4>)
 80a5836:	2530      	movs	r5, #48	; 0x30
 80a5838:	fb05 2503 	mla	r5, r5, r3, r2
 80a583c:	f000 fa74 	bl	80a5d28 <__tz_lock>
 80a5840:	f000 fa74 	bl	80a5d2c <_tzset_unlocked>
 80a5844:	4b5c      	ldr	r3, [pc, #368]	; (80a59b8 <localtime_r+0x1c8>)
 80a5846:	681b      	ldr	r3, [r3, #0]
 80a5848:	b1f3      	cbz	r3, 80a5888 <localtime_r+0x98>
 80a584a:	687b      	ldr	r3, [r7, #4]
 80a584c:	429e      	cmp	r6, r3
 80a584e:	d105      	bne.n	80a585c <localtime_r+0x6c>
 80a5850:	6839      	ldr	r1, [r7, #0]
 80a5852:	f8d8 3000 	ldr.w	r3, [r8]
 80a5856:	69fa      	ldr	r2, [r7, #28]
 80a5858:	b941      	cbnz	r1, 80a586c <localtime_r+0x7c>
 80a585a:	e00a      	b.n	80a5872 <localtime_r+0x82>
 80a585c:	4630      	mov	r0, r6
 80a585e:	f000 f9bb 	bl	80a5bd8 <__tzcalc_limits>
 80a5862:	2800      	cmp	r0, #0
 80a5864:	d1f4      	bne.n	80a5850 <localtime_r+0x60>
 80a5866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a586a:	e00d      	b.n	80a5888 <localtime_r+0x98>
 80a586c:	4293      	cmp	r3, r2
 80a586e:	db08      	blt.n	80a5882 <localtime_r+0x92>
 80a5870:	e001      	b.n	80a5876 <localtime_r+0x86>
 80a5872:	4293      	cmp	r3, r2
 80a5874:	da07      	bge.n	80a5886 <localtime_r+0x96>
 80a5876:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a5878:	4293      	cmp	r3, r2
 80a587a:	bfac      	ite	ge
 80a587c:	2300      	movge	r3, #0
 80a587e:	2301      	movlt	r3, #1
 80a5880:	e002      	b.n	80a5888 <localtime_r+0x98>
 80a5882:	2300      	movs	r3, #0
 80a5884:	e000      	b.n	80a5888 <localtime_r+0x98>
 80a5886:	2301      	movs	r3, #1
 80a5888:	6223      	str	r3, [r4, #32]
 80a588a:	6a23      	ldr	r3, [r4, #32]
 80a588c:	203c      	movs	r0, #60	; 0x3c
 80a588e:	2b01      	cmp	r3, #1
 80a5890:	bf0c      	ite	eq
 80a5892:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80a5894:	6a39      	ldrne	r1, [r7, #32]
 80a5896:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a589a:	fb91 f6f3 	sdiv	r6, r1, r3
 80a589e:	fb03 1316 	mls	r3, r3, r6, r1
 80a58a2:	fb93 f2f0 	sdiv	r2, r3, r0
 80a58a6:	fb00 3012 	mls	r0, r0, r2, r3
 80a58aa:	6861      	ldr	r1, [r4, #4]
 80a58ac:	6823      	ldr	r3, [r4, #0]
 80a58ae:	1a89      	subs	r1, r1, r2
 80a58b0:	68a2      	ldr	r2, [r4, #8]
 80a58b2:	1a1b      	subs	r3, r3, r0
 80a58b4:	1b92      	subs	r2, r2, r6
 80a58b6:	2b3b      	cmp	r3, #59	; 0x3b
 80a58b8:	6023      	str	r3, [r4, #0]
 80a58ba:	6061      	str	r1, [r4, #4]
 80a58bc:	60a2      	str	r2, [r4, #8]
 80a58be:	dd03      	ble.n	80a58c8 <localtime_r+0xd8>
 80a58c0:	3101      	adds	r1, #1
 80a58c2:	6061      	str	r1, [r4, #4]
 80a58c4:	3b3c      	subs	r3, #60	; 0x3c
 80a58c6:	e004      	b.n	80a58d2 <localtime_r+0xe2>
 80a58c8:	2b00      	cmp	r3, #0
 80a58ca:	da03      	bge.n	80a58d4 <localtime_r+0xe4>
 80a58cc:	3901      	subs	r1, #1
 80a58ce:	6061      	str	r1, [r4, #4]
 80a58d0:	333c      	adds	r3, #60	; 0x3c
 80a58d2:	6023      	str	r3, [r4, #0]
 80a58d4:	6863      	ldr	r3, [r4, #4]
 80a58d6:	2b3b      	cmp	r3, #59	; 0x3b
 80a58d8:	dd03      	ble.n	80a58e2 <localtime_r+0xf2>
 80a58da:	3201      	adds	r2, #1
 80a58dc:	60a2      	str	r2, [r4, #8]
 80a58de:	3b3c      	subs	r3, #60	; 0x3c
 80a58e0:	e004      	b.n	80a58ec <localtime_r+0xfc>
 80a58e2:	2b00      	cmp	r3, #0
 80a58e4:	da03      	bge.n	80a58ee <localtime_r+0xfe>
 80a58e6:	3a01      	subs	r2, #1
 80a58e8:	60a2      	str	r2, [r4, #8]
 80a58ea:	333c      	adds	r3, #60	; 0x3c
 80a58ec:	6063      	str	r3, [r4, #4]
 80a58ee:	68a3      	ldr	r3, [r4, #8]
 80a58f0:	2b17      	cmp	r3, #23
 80a58f2:	dd22      	ble.n	80a593a <localtime_r+0x14a>
 80a58f4:	69e2      	ldr	r2, [r4, #28]
 80a58f6:	3b18      	subs	r3, #24
 80a58f8:	3201      	adds	r2, #1
 80a58fa:	61e2      	str	r2, [r4, #28]
 80a58fc:	69a2      	ldr	r2, [r4, #24]
 80a58fe:	60a3      	str	r3, [r4, #8]
 80a5900:	3201      	adds	r2, #1
 80a5902:	2a06      	cmp	r2, #6
 80a5904:	bfc8      	it	gt
 80a5906:	2200      	movgt	r2, #0
 80a5908:	61a2      	str	r2, [r4, #24]
 80a590a:	68e2      	ldr	r2, [r4, #12]
 80a590c:	6923      	ldr	r3, [r4, #16]
 80a590e:	3201      	adds	r2, #1
 80a5910:	60e2      	str	r2, [r4, #12]
 80a5912:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a5916:	428a      	cmp	r2, r1
 80a5918:	dd46      	ble.n	80a59a8 <localtime_r+0x1b8>
 80a591a:	3301      	adds	r3, #1
 80a591c:	2b0c      	cmp	r3, #12
 80a591e:	bf08      	it	eq
 80a5920:	6963      	ldreq	r3, [r4, #20]
 80a5922:	eba2 0201 	sub.w	r2, r2, r1
 80a5926:	60e2      	str	r2, [r4, #12]
 80a5928:	bf05      	ittet	eq
 80a592a:	3301      	addeq	r3, #1
 80a592c:	2200      	moveq	r2, #0
 80a592e:	6123      	strne	r3, [r4, #16]
 80a5930:	6122      	streq	r2, [r4, #16]
 80a5932:	bf04      	itt	eq
 80a5934:	6163      	streq	r3, [r4, #20]
 80a5936:	61e2      	streq	r2, [r4, #28]
 80a5938:	e036      	b.n	80a59a8 <localtime_r+0x1b8>
 80a593a:	2b00      	cmp	r3, #0
 80a593c:	da34      	bge.n	80a59a8 <localtime_r+0x1b8>
 80a593e:	69e2      	ldr	r2, [r4, #28]
 80a5940:	3318      	adds	r3, #24
 80a5942:	3a01      	subs	r2, #1
 80a5944:	61e2      	str	r2, [r4, #28]
 80a5946:	69a2      	ldr	r2, [r4, #24]
 80a5948:	60a3      	str	r3, [r4, #8]
 80a594a:	3a01      	subs	r2, #1
 80a594c:	bf48      	it	mi
 80a594e:	2206      	movmi	r2, #6
 80a5950:	61a2      	str	r2, [r4, #24]
 80a5952:	68e2      	ldr	r2, [r4, #12]
 80a5954:	3a01      	subs	r2, #1
 80a5956:	60e2      	str	r2, [r4, #12]
 80a5958:	bb32      	cbnz	r2, 80a59a8 <localtime_r+0x1b8>
 80a595a:	6923      	ldr	r3, [r4, #16]
 80a595c:	3b01      	subs	r3, #1
 80a595e:	d401      	bmi.n	80a5964 <localtime_r+0x174>
 80a5960:	6123      	str	r3, [r4, #16]
 80a5962:	e01d      	b.n	80a59a0 <localtime_r+0x1b0>
 80a5964:	230b      	movs	r3, #11
 80a5966:	6123      	str	r3, [r4, #16]
 80a5968:	6963      	ldr	r3, [r4, #20]
 80a596a:	1e5a      	subs	r2, r3, #1
 80a596c:	f012 0f03 	tst.w	r2, #3
 80a5970:	6162      	str	r2, [r4, #20]
 80a5972:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a5976:	d105      	bne.n	80a5984 <localtime_r+0x194>
 80a5978:	2164      	movs	r1, #100	; 0x64
 80a597a:	fb93 f2f1 	sdiv	r2, r3, r1
 80a597e:	fb01 3212 	mls	r2, r1, r2, r3
 80a5982:	b94a      	cbnz	r2, 80a5998 <localtime_r+0x1a8>
 80a5984:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a5988:	fb93 f2f1 	sdiv	r2, r3, r1
 80a598c:	fb01 3312 	mls	r3, r1, r2, r3
 80a5990:	fab3 f383 	clz	r3, r3
 80a5994:	095b      	lsrs	r3, r3, #5
 80a5996:	e000      	b.n	80a599a <localtime_r+0x1aa>
 80a5998:	2301      	movs	r3, #1
 80a599a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a599e:	61e3      	str	r3, [r4, #28]
 80a59a0:	6923      	ldr	r3, [r4, #16]
 80a59a2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a59a6:	60e3      	str	r3, [r4, #12]
 80a59a8:	f000 f9bf 	bl	80a5d2a <__tz_unlock>
 80a59ac:	4620      	mov	r0, r4
 80a59ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a59b2:	bf00      	nop
 80a59b4:	080a6910 	.word	0x080a6910
 80a59b8:	20000ad0 	.word	0x20000ad0

080a59bc <memcpy>:
 80a59bc:	b510      	push	{r4, lr}
 80a59be:	1e43      	subs	r3, r0, #1
 80a59c0:	440a      	add	r2, r1
 80a59c2:	4291      	cmp	r1, r2
 80a59c4:	d004      	beq.n	80a59d0 <memcpy+0x14>
 80a59c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a59ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a59ce:	e7f8      	b.n	80a59c2 <memcpy+0x6>
 80a59d0:	bd10      	pop	{r4, pc}

080a59d2 <memset>:
 80a59d2:	4603      	mov	r3, r0
 80a59d4:	4402      	add	r2, r0
 80a59d6:	4293      	cmp	r3, r2
 80a59d8:	d002      	beq.n	80a59e0 <memset+0xe>
 80a59da:	f803 1b01 	strb.w	r1, [r3], #1
 80a59de:	e7fa      	b.n	80a59d6 <memset+0x4>
 80a59e0:	4770      	bx	lr
	...

080a59e4 <srand>:
 80a59e4:	b538      	push	{r3, r4, r5, lr}
 80a59e6:	4b12      	ldr	r3, [pc, #72]	; (80a5a30 <srand+0x4c>)
 80a59e8:	4605      	mov	r5, r0
 80a59ea:	681c      	ldr	r4, [r3, #0]
 80a59ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a59ee:	b9d3      	cbnz	r3, 80a5a26 <srand+0x42>
 80a59f0:	2018      	movs	r0, #24
 80a59f2:	f7fb fecd 	bl	80a1790 <malloc>
 80a59f6:	f243 330e 	movw	r3, #13070	; 0x330e
 80a59fa:	63a0      	str	r0, [r4, #56]	; 0x38
 80a59fc:	8003      	strh	r3, [r0, #0]
 80a59fe:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a5a02:	8043      	strh	r3, [r0, #2]
 80a5a04:	f241 2334 	movw	r3, #4660	; 0x1234
 80a5a08:	8083      	strh	r3, [r0, #4]
 80a5a0a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a5a0e:	80c3      	strh	r3, [r0, #6]
 80a5a10:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a5a14:	8103      	strh	r3, [r0, #8]
 80a5a16:	2305      	movs	r3, #5
 80a5a18:	8143      	strh	r3, [r0, #10]
 80a5a1a:	230b      	movs	r3, #11
 80a5a1c:	8183      	strh	r3, [r0, #12]
 80a5a1e:	2201      	movs	r2, #1
 80a5a20:	2300      	movs	r3, #0
 80a5a22:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a5a26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a5a28:	2200      	movs	r2, #0
 80a5a2a:	611d      	str	r5, [r3, #16]
 80a5a2c:	615a      	str	r2, [r3, #20]
 80a5a2e:	bd38      	pop	{r3, r4, r5, pc}
 80a5a30:	20000390 	.word	0x20000390

080a5a34 <strcmp>:
 80a5a34:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a5a38:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a5a3c:	2a01      	cmp	r2, #1
 80a5a3e:	bf28      	it	cs
 80a5a40:	429a      	cmpcs	r2, r3
 80a5a42:	d0f7      	beq.n	80a5a34 <strcmp>
 80a5a44:	1ad0      	subs	r0, r2, r3
 80a5a46:	4770      	bx	lr

080a5a48 <strcpy>:
 80a5a48:	4603      	mov	r3, r0
 80a5a4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a5a4e:	f803 2b01 	strb.w	r2, [r3], #1
 80a5a52:	2a00      	cmp	r2, #0
 80a5a54:	d1f9      	bne.n	80a5a4a <strcpy+0x2>
 80a5a56:	4770      	bx	lr

080a5a58 <strdup>:
 80a5a58:	4b02      	ldr	r3, [pc, #8]	; (80a5a64 <strdup+0xc>)
 80a5a5a:	4601      	mov	r1, r0
 80a5a5c:	6818      	ldr	r0, [r3, #0]
 80a5a5e:	f000 b803 	b.w	80a5a68 <_strdup_r>
 80a5a62:	bf00      	nop
 80a5a64:	20000390 	.word	0x20000390

080a5a68 <_strdup_r>:
 80a5a68:	b570      	push	{r4, r5, r6, lr}
 80a5a6a:	4606      	mov	r6, r0
 80a5a6c:	4608      	mov	r0, r1
 80a5a6e:	460c      	mov	r4, r1
 80a5a70:	f000 f80d 	bl	80a5a8e <strlen>
 80a5a74:	1c45      	adds	r5, r0, #1
 80a5a76:	4629      	mov	r1, r5
 80a5a78:	4630      	mov	r0, r6
 80a5a7a:	f7fb fec1 	bl	80a1800 <_malloc_r>
 80a5a7e:	4606      	mov	r6, r0
 80a5a80:	b118      	cbz	r0, 80a5a8a <_strdup_r+0x22>
 80a5a82:	462a      	mov	r2, r5
 80a5a84:	4621      	mov	r1, r4
 80a5a86:	f7ff ff99 	bl	80a59bc <memcpy>
 80a5a8a:	4630      	mov	r0, r6
 80a5a8c:	bd70      	pop	{r4, r5, r6, pc}

080a5a8e <strlen>:
 80a5a8e:	4603      	mov	r3, r0
 80a5a90:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a5a94:	2a00      	cmp	r2, #0
 80a5a96:	d1fb      	bne.n	80a5a90 <strlen+0x2>
 80a5a98:	1a18      	subs	r0, r3, r0
 80a5a9a:	3801      	subs	r0, #1
 80a5a9c:	4770      	bx	lr

080a5a9e <strncmp>:
 80a5a9e:	b530      	push	{r4, r5, lr}
 80a5aa0:	b182      	cbz	r2, 80a5ac4 <strncmp+0x26>
 80a5aa2:	1e45      	subs	r5, r0, #1
 80a5aa4:	3901      	subs	r1, #1
 80a5aa6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a5aaa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a5aae:	42a3      	cmp	r3, r4
 80a5ab0:	d106      	bne.n	80a5ac0 <strncmp+0x22>
 80a5ab2:	43ec      	mvns	r4, r5
 80a5ab4:	4414      	add	r4, r2
 80a5ab6:	42e0      	cmn	r0, r4
 80a5ab8:	d001      	beq.n	80a5abe <strncmp+0x20>
 80a5aba:	2b00      	cmp	r3, #0
 80a5abc:	d1f3      	bne.n	80a5aa6 <strncmp+0x8>
 80a5abe:	461c      	mov	r4, r3
 80a5ac0:	1b18      	subs	r0, r3, r4
 80a5ac2:	bd30      	pop	{r4, r5, pc}
 80a5ac4:	4610      	mov	r0, r2
 80a5ac6:	bd30      	pop	{r4, r5, pc}

080a5ac8 <_strtoul_r>:
 80a5ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a5acc:	460e      	mov	r6, r1
 80a5ace:	4680      	mov	r8, r0
 80a5ad0:	483b      	ldr	r0, [pc, #236]	; (80a5bc0 <_strtoul_r+0xf8>)
 80a5ad2:	f8d0 9000 	ldr.w	r9, [r0]
 80a5ad6:	4635      	mov	r5, r6
 80a5ad8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a5adc:	eb09 0004 	add.w	r0, r9, r4
 80a5ae0:	7840      	ldrb	r0, [r0, #1]
 80a5ae2:	f000 0008 	and.w	r0, r0, #8
 80a5ae6:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80a5aea:	b108      	cbz	r0, 80a5af0 <_strtoul_r+0x28>
 80a5aec:	462e      	mov	r6, r5
 80a5aee:	e7f2      	b.n	80a5ad6 <_strtoul_r+0xe>
 80a5af0:	2c2d      	cmp	r4, #45	; 0x2d
 80a5af2:	d103      	bne.n	80a5afc <_strtoul_r+0x34>
 80a5af4:	1cb5      	adds	r5, r6, #2
 80a5af6:	7874      	ldrb	r4, [r6, #1]
 80a5af8:	2701      	movs	r7, #1
 80a5afa:	e003      	b.n	80a5b04 <_strtoul_r+0x3c>
 80a5afc:	2c2b      	cmp	r4, #43	; 0x2b
 80a5afe:	bf04      	itt	eq
 80a5b00:	7874      	ldrbeq	r4, [r6, #1]
 80a5b02:	1cb5      	addeq	r5, r6, #2
 80a5b04:	b113      	cbz	r3, 80a5b0c <_strtoul_r+0x44>
 80a5b06:	2b10      	cmp	r3, #16
 80a5b08:	d10a      	bne.n	80a5b20 <_strtoul_r+0x58>
 80a5b0a:	e053      	b.n	80a5bb4 <_strtoul_r+0xec>
 80a5b0c:	2c30      	cmp	r4, #48	; 0x30
 80a5b0e:	d14f      	bne.n	80a5bb0 <_strtoul_r+0xe8>
 80a5b10:	7828      	ldrb	r0, [r5, #0]
 80a5b12:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a5b16:	2858      	cmp	r0, #88	; 0x58
 80a5b18:	d145      	bne.n	80a5ba6 <_strtoul_r+0xde>
 80a5b1a:	786c      	ldrb	r4, [r5, #1]
 80a5b1c:	2310      	movs	r3, #16
 80a5b1e:	3502      	adds	r5, #2
 80a5b20:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a5b24:	fbbc fcf3 	udiv	ip, ip, r3
 80a5b28:	fb03 fa0c 	mul.w	sl, r3, ip
 80a5b2c:	2600      	movs	r6, #0
 80a5b2e:	ea6f 0a0a 	mvn.w	sl, sl
 80a5b32:	4630      	mov	r0, r6
 80a5b34:	eb09 0e04 	add.w	lr, r9, r4
 80a5b38:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a5b3c:	f01e 0f04 	tst.w	lr, #4
 80a5b40:	d001      	beq.n	80a5b46 <_strtoul_r+0x7e>
 80a5b42:	3c30      	subs	r4, #48	; 0x30
 80a5b44:	e00b      	b.n	80a5b5e <_strtoul_r+0x96>
 80a5b46:	f01e 0e03 	ands.w	lr, lr, #3
 80a5b4a:	d01a      	beq.n	80a5b82 <_strtoul_r+0xba>
 80a5b4c:	f1be 0f01 	cmp.w	lr, #1
 80a5b50:	bf0c      	ite	eq
 80a5b52:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a5b56:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a5b5a:	ebce 0404 	rsb	r4, lr, r4
 80a5b5e:	42a3      	cmp	r3, r4
 80a5b60:	dd0f      	ble.n	80a5b82 <_strtoul_r+0xba>
 80a5b62:	2e00      	cmp	r6, #0
 80a5b64:	db08      	blt.n	80a5b78 <_strtoul_r+0xb0>
 80a5b66:	4560      	cmp	r0, ip
 80a5b68:	d806      	bhi.n	80a5b78 <_strtoul_r+0xb0>
 80a5b6a:	d101      	bne.n	80a5b70 <_strtoul_r+0xa8>
 80a5b6c:	4554      	cmp	r4, sl
 80a5b6e:	dc03      	bgt.n	80a5b78 <_strtoul_r+0xb0>
 80a5b70:	fb03 4000 	mla	r0, r3, r0, r4
 80a5b74:	2601      	movs	r6, #1
 80a5b76:	e001      	b.n	80a5b7c <_strtoul_r+0xb4>
 80a5b78:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a5b7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a5b80:	e7d8      	b.n	80a5b34 <_strtoul_r+0x6c>
 80a5b82:	2e00      	cmp	r6, #0
 80a5b84:	da07      	bge.n	80a5b96 <_strtoul_r+0xce>
 80a5b86:	2322      	movs	r3, #34	; 0x22
 80a5b88:	f8c8 3000 	str.w	r3, [r8]
 80a5b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a5b90:	b92a      	cbnz	r2, 80a5b9e <_strtoul_r+0xd6>
 80a5b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a5b96:	b107      	cbz	r7, 80a5b9a <_strtoul_r+0xd2>
 80a5b98:	4240      	negs	r0, r0
 80a5b9a:	b172      	cbz	r2, 80a5bba <_strtoul_r+0xf2>
 80a5b9c:	b106      	cbz	r6, 80a5ba0 <_strtoul_r+0xd8>
 80a5b9e:	1e69      	subs	r1, r5, #1
 80a5ba0:	6011      	str	r1, [r2, #0]
 80a5ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a5ba6:	2430      	movs	r4, #48	; 0x30
 80a5ba8:	2b00      	cmp	r3, #0
 80a5baa:	d1b9      	bne.n	80a5b20 <_strtoul_r+0x58>
 80a5bac:	2308      	movs	r3, #8
 80a5bae:	e7b7      	b.n	80a5b20 <_strtoul_r+0x58>
 80a5bb0:	230a      	movs	r3, #10
 80a5bb2:	e7b5      	b.n	80a5b20 <_strtoul_r+0x58>
 80a5bb4:	2c30      	cmp	r4, #48	; 0x30
 80a5bb6:	d0ab      	beq.n	80a5b10 <_strtoul_r+0x48>
 80a5bb8:	e7b2      	b.n	80a5b20 <_strtoul_r+0x58>
 80a5bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a5bbe:	bf00      	nop
 80a5bc0:	2000032c 	.word	0x2000032c

080a5bc4 <strtoul>:
 80a5bc4:	4613      	mov	r3, r2
 80a5bc6:	460a      	mov	r2, r1
 80a5bc8:	4601      	mov	r1, r0
 80a5bca:	4802      	ldr	r0, [pc, #8]	; (80a5bd4 <strtoul+0x10>)
 80a5bcc:	6800      	ldr	r0, [r0, #0]
 80a5bce:	f7ff bf7b 	b.w	80a5ac8 <_strtoul_r>
 80a5bd2:	bf00      	nop
 80a5bd4:	20000390 	.word	0x20000390

080a5bd8 <__tzcalc_limits>:
 80a5bd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5bdc:	4604      	mov	r4, r0
 80a5bde:	f000 fa6f 	bl	80a60c0 <__gettzinfo>
 80a5be2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a5be6:	429c      	cmp	r4, r3
 80a5be8:	f340 8096 	ble.w	80a5d18 <__tzcalc_limits+0x140>
 80a5bec:	f240 156d 	movw	r5, #365	; 0x16d
 80a5bf0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a5bf4:	18e3      	adds	r3, r4, r3
 80a5bf6:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80a5bfa:	109b      	asrs	r3, r3, #2
 80a5bfc:	fb05 3502 	mla	r5, r5, r2, r3
 80a5c00:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80a5c04:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80a5c08:	fb92 f3f3 	sdiv	r3, r2, r3
 80a5c0c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a5c10:	442b      	add	r3, r5
 80a5c12:	18a5      	adds	r5, r4, r2
 80a5c14:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a5c18:	fb94 f7f2 	sdiv	r7, r4, r2
 80a5c1c:	fb95 f5f2 	sdiv	r5, r5, r2
 80a5c20:	fb02 4717 	mls	r7, r2, r7, r4
 80a5c24:	441d      	add	r5, r3
 80a5c26:	2364      	movs	r3, #100	; 0x64
 80a5c28:	fb94 f6f3 	sdiv	r6, r4, r3
 80a5c2c:	fab7 fe87 	clz	lr, r7
 80a5c30:	4601      	mov	r1, r0
 80a5c32:	fb03 4616 	mls	r6, r3, r6, r4
 80a5c36:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80a5c3a:	9301      	str	r3, [sp, #4]
 80a5c3c:	f004 0303 	and.w	r3, r4, #3
 80a5c40:	6044      	str	r4, [r0, #4]
 80a5c42:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80a5c46:	9300      	str	r3, [sp, #0]
 80a5c48:	f04f 0c07 	mov.w	ip, #7
 80a5c4c:	7a0b      	ldrb	r3, [r1, #8]
 80a5c4e:	2b4a      	cmp	r3, #74	; 0x4a
 80a5c50:	d10e      	bne.n	80a5c70 <__tzcalc_limits+0x98>
 80a5c52:	694b      	ldr	r3, [r1, #20]
 80a5c54:	9a00      	ldr	r2, [sp, #0]
 80a5c56:	18ec      	adds	r4, r5, r3
 80a5c58:	b902      	cbnz	r2, 80a5c5c <__tzcalc_limits+0x84>
 80a5c5a:	b906      	cbnz	r6, 80a5c5e <__tzcalc_limits+0x86>
 80a5c5c:	b927      	cbnz	r7, 80a5c68 <__tzcalc_limits+0x90>
 80a5c5e:	2b3b      	cmp	r3, #59	; 0x3b
 80a5c60:	bfd4      	ite	le
 80a5c62:	2300      	movle	r3, #0
 80a5c64:	2301      	movgt	r3, #1
 80a5c66:	e000      	b.n	80a5c6a <__tzcalc_limits+0x92>
 80a5c68:	2300      	movs	r3, #0
 80a5c6a:	4423      	add	r3, r4
 80a5c6c:	3b01      	subs	r3, #1
 80a5c6e:	e03f      	b.n	80a5cf0 <__tzcalc_limits+0x118>
 80a5c70:	2b44      	cmp	r3, #68	; 0x44
 80a5c72:	d102      	bne.n	80a5c7a <__tzcalc_limits+0xa2>
 80a5c74:	694b      	ldr	r3, [r1, #20]
 80a5c76:	442b      	add	r3, r5
 80a5c78:	e03a      	b.n	80a5cf0 <__tzcalc_limits+0x118>
 80a5c7a:	9b00      	ldr	r3, [sp, #0]
 80a5c7c:	b92b      	cbnz	r3, 80a5c8a <__tzcalc_limits+0xb2>
 80a5c7e:	2e00      	cmp	r6, #0
 80a5c80:	bf0c      	ite	eq
 80a5c82:	46f0      	moveq	r8, lr
 80a5c84:	f04f 0801 	movne.w	r8, #1
 80a5c88:	e000      	b.n	80a5c8c <__tzcalc_limits+0xb4>
 80a5c8a:	46f0      	mov	r8, lr
 80a5c8c:	46a9      	mov	r9, r5
 80a5c8e:	4b24      	ldr	r3, [pc, #144]	; (80a5d20 <__tzcalc_limits+0x148>)
 80a5c90:	2230      	movs	r2, #48	; 0x30
 80a5c92:	fb02 3808 	mla	r8, r2, r8, r3
 80a5c96:	68cc      	ldr	r4, [r1, #12]
 80a5c98:	f1a8 0a04 	sub.w	sl, r8, #4
 80a5c9c:	2301      	movs	r3, #1
 80a5c9e:	42a3      	cmp	r3, r4
 80a5ca0:	da04      	bge.n	80a5cac <__tzcalc_limits+0xd4>
 80a5ca2:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80a5ca6:	3301      	adds	r3, #1
 80a5ca8:	44d9      	add	r9, fp
 80a5caa:	e7f8      	b.n	80a5c9e <__tzcalc_limits+0xc6>
 80a5cac:	f109 0304 	add.w	r3, r9, #4
 80a5cb0:	fb93 fbfc 	sdiv	fp, r3, ip
 80a5cb4:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80a5cb8:	ebca 0a03 	rsb	sl, sl, r3
 80a5cbc:	694b      	ldr	r3, [r1, #20]
 80a5cbe:	2c01      	cmp	r4, #1
 80a5cc0:	bfb8      	it	lt
 80a5cc2:	2401      	movlt	r4, #1
 80a5cc4:	ebb3 0a0a 	subs.w	sl, r3, sl
 80a5cc8:	690b      	ldr	r3, [r1, #16]
 80a5cca:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80a5cce:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80a5cd2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80a5cd6:	bf48      	it	mi
 80a5cd8:	f10a 0a07 	addmi.w	sl, sl, #7
 80a5cdc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a5ce0:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80a5ce4:	4453      	add	r3, sl
 80a5ce6:	42a3      	cmp	r3, r4
 80a5ce8:	db01      	blt.n	80a5cee <__tzcalc_limits+0x116>
 80a5cea:	3b07      	subs	r3, #7
 80a5cec:	e7fb      	b.n	80a5ce6 <__tzcalc_limits+0x10e>
 80a5cee:	444b      	add	r3, r9
 80a5cf0:	698c      	ldr	r4, [r1, #24]
 80a5cf2:	4a0c      	ldr	r2, [pc, #48]	; (80a5d24 <__tzcalc_limits+0x14c>)
 80a5cf4:	fb02 4303 	mla	r3, r2, r3, r4
 80a5cf8:	6a0c      	ldr	r4, [r1, #32]
 80a5cfa:	4423      	add	r3, r4
 80a5cfc:	f841 3f1c 	str.w	r3, [r1, #28]!
 80a5d00:	9b01      	ldr	r3, [sp, #4]
 80a5d02:	4299      	cmp	r1, r3
 80a5d04:	d1a2      	bne.n	80a5c4c <__tzcalc_limits+0x74>
 80a5d06:	69c3      	ldr	r3, [r0, #28]
 80a5d08:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80a5d0a:	4293      	cmp	r3, r2
 80a5d0c:	bfac      	ite	ge
 80a5d0e:	2300      	movge	r3, #0
 80a5d10:	2301      	movlt	r3, #1
 80a5d12:	6003      	str	r3, [r0, #0]
 80a5d14:	2001      	movs	r0, #1
 80a5d16:	e000      	b.n	80a5d1a <__tzcalc_limits+0x142>
 80a5d18:	2000      	movs	r0, #0
 80a5d1a:	b003      	add	sp, #12
 80a5d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5d20:	080a6910 	.word	0x080a6910
 80a5d24:	00015180 	.word	0x00015180

080a5d28 <__tz_lock>:
 80a5d28:	4770      	bx	lr

080a5d2a <__tz_unlock>:
 80a5d2a:	4770      	bx	lr

080a5d2c <_tzset_unlocked>:
 80a5d2c:	4b01      	ldr	r3, [pc, #4]	; (80a5d34 <_tzset_unlocked+0x8>)
 80a5d2e:	6818      	ldr	r0, [r3, #0]
 80a5d30:	f000 b802 	b.w	80a5d38 <_tzset_unlocked_r>
 80a5d34:	20000390 	.word	0x20000390

080a5d38 <_tzset_unlocked_r>:
 80a5d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5d3c:	b08d      	sub	sp, #52	; 0x34
 80a5d3e:	4607      	mov	r7, r0
 80a5d40:	f000 f9be 	bl	80a60c0 <__gettzinfo>
 80a5d44:	49b0      	ldr	r1, [pc, #704]	; (80a6008 <_tzset_unlocked_r+0x2d0>)
 80a5d46:	4604      	mov	r4, r0
 80a5d48:	4638      	mov	r0, r7
 80a5d4a:	f000 f9b1 	bl	80a60b0 <_getenv_r>
 80a5d4e:	4eaf      	ldr	r6, [pc, #700]	; (80a600c <_tzset_unlocked_r+0x2d4>)
 80a5d50:	4605      	mov	r5, r0
 80a5d52:	b960      	cbnz	r0, 80a5d6e <_tzset_unlocked_r+0x36>
 80a5d54:	4bae      	ldr	r3, [pc, #696]	; (80a6010 <_tzset_unlocked_r+0x2d8>)
 80a5d56:	4aaf      	ldr	r2, [pc, #700]	; (80a6014 <_tzset_unlocked_r+0x2dc>)
 80a5d58:	6018      	str	r0, [r3, #0]
 80a5d5a:	4baf      	ldr	r3, [pc, #700]	; (80a6018 <_tzset_unlocked_r+0x2e0>)
 80a5d5c:	6018      	str	r0, [r3, #0]
 80a5d5e:	4baf      	ldr	r3, [pc, #700]	; (80a601c <_tzset_unlocked_r+0x2e4>)
 80a5d60:	6830      	ldr	r0, [r6, #0]
 80a5d62:	601a      	str	r2, [r3, #0]
 80a5d64:	605a      	str	r2, [r3, #4]
 80a5d66:	f7fb fd1b 	bl	80a17a0 <free>
 80a5d6a:	6035      	str	r5, [r6, #0]
 80a5d6c:	e148      	b.n	80a6000 <_tzset_unlocked_r+0x2c8>
 80a5d6e:	6831      	ldr	r1, [r6, #0]
 80a5d70:	b979      	cbnz	r1, 80a5d92 <_tzset_unlocked_r+0x5a>
 80a5d72:	6830      	ldr	r0, [r6, #0]
 80a5d74:	f7fb fd14 	bl	80a17a0 <free>
 80a5d78:	4628      	mov	r0, r5
 80a5d7a:	f7ff fe88 	bl	80a5a8e <strlen>
 80a5d7e:	1c41      	adds	r1, r0, #1
 80a5d80:	4638      	mov	r0, r7
 80a5d82:	f7fb fd3d 	bl	80a1800 <_malloc_r>
 80a5d86:	6030      	str	r0, [r6, #0]
 80a5d88:	b148      	cbz	r0, 80a5d9e <_tzset_unlocked_r+0x66>
 80a5d8a:	4629      	mov	r1, r5
 80a5d8c:	f7ff fe5c 	bl	80a5a48 <strcpy>
 80a5d90:	e005      	b.n	80a5d9e <_tzset_unlocked_r+0x66>
 80a5d92:	f7ff fe4f 	bl	80a5a34 <strcmp>
 80a5d96:	2800      	cmp	r0, #0
 80a5d98:	f000 8132 	beq.w	80a6000 <_tzset_unlocked_r+0x2c8>
 80a5d9c:	e7e9      	b.n	80a5d72 <_tzset_unlocked_r+0x3a>
 80a5d9e:	782b      	ldrb	r3, [r5, #0]
 80a5da0:	ae0a      	add	r6, sp, #40	; 0x28
 80a5da2:	2b3a      	cmp	r3, #58	; 0x3a
 80a5da4:	bf08      	it	eq
 80a5da6:	3501      	addeq	r5, #1
 80a5da8:	4633      	mov	r3, r6
 80a5daa:	4a9d      	ldr	r2, [pc, #628]	; (80a6020 <_tzset_unlocked_r+0x2e8>)
 80a5dac:	499d      	ldr	r1, [pc, #628]	; (80a6024 <_tzset_unlocked_r+0x2ec>)
 80a5dae:	4628      	mov	r0, r5
 80a5db0:	f7fb fd0e 	bl	80a17d0 <siscanf>
 80a5db4:	2800      	cmp	r0, #0
 80a5db6:	f340 8123 	ble.w	80a6000 <_tzset_unlocked_r+0x2c8>
 80a5dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5dbc:	18ef      	adds	r7, r5, r3
 80a5dbe:	5ceb      	ldrb	r3, [r5, r3]
 80a5dc0:	2b2d      	cmp	r3, #45	; 0x2d
 80a5dc2:	d103      	bne.n	80a5dcc <_tzset_unlocked_r+0x94>
 80a5dc4:	3701      	adds	r7, #1
 80a5dc6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80a5dca:	e003      	b.n	80a5dd4 <_tzset_unlocked_r+0x9c>
 80a5dcc:	2b2b      	cmp	r3, #43	; 0x2b
 80a5dce:	bf08      	it	eq
 80a5dd0:	3701      	addeq	r7, #1
 80a5dd2:	2501      	movs	r5, #1
 80a5dd4:	f10d 0a20 	add.w	sl, sp, #32
 80a5dd8:	f10d 0b1e 	add.w	fp, sp, #30
 80a5ddc:	f04f 0800 	mov.w	r8, #0
 80a5de0:	9603      	str	r6, [sp, #12]
 80a5de2:	f8cd a008 	str.w	sl, [sp, #8]
 80a5de6:	9601      	str	r6, [sp, #4]
 80a5de8:	f8cd b000 	str.w	fp, [sp]
 80a5dec:	4633      	mov	r3, r6
 80a5dee:	aa07      	add	r2, sp, #28
 80a5df0:	498d      	ldr	r1, [pc, #564]	; (80a6028 <_tzset_unlocked_r+0x2f0>)
 80a5df2:	4638      	mov	r0, r7
 80a5df4:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a5df8:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a5dfc:	f7fb fce8 	bl	80a17d0 <siscanf>
 80a5e00:	4540      	cmp	r0, r8
 80a5e02:	f340 80fd 	ble.w	80a6000 <_tzset_unlocked_r+0x2c8>
 80a5e06:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a5e0a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a5e0e:	213c      	movs	r1, #60	; 0x3c
 80a5e10:	fb01 3302 	mla	r3, r1, r2, r3
 80a5e14:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a5e18:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a5e1c:	fb01 3302 	mla	r3, r1, r2, r3
 80a5e20:	435d      	muls	r5, r3
 80a5e22:	4b7f      	ldr	r3, [pc, #508]	; (80a6020 <_tzset_unlocked_r+0x2e8>)
 80a5e24:	6225      	str	r5, [r4, #32]
 80a5e26:	4d7d      	ldr	r5, [pc, #500]	; (80a601c <_tzset_unlocked_r+0x2e4>)
 80a5e28:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80a6034 <_tzset_unlocked_r+0x2fc>
 80a5e2c:	602b      	str	r3, [r5, #0]
 80a5e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5e30:	464a      	mov	r2, r9
 80a5e32:	441f      	add	r7, r3
 80a5e34:	497b      	ldr	r1, [pc, #492]	; (80a6024 <_tzset_unlocked_r+0x2ec>)
 80a5e36:	4633      	mov	r3, r6
 80a5e38:	4638      	mov	r0, r7
 80a5e3a:	f7fb fcc9 	bl	80a17d0 <siscanf>
 80a5e3e:	4540      	cmp	r0, r8
 80a5e40:	dc08      	bgt.n	80a5e54 <_tzset_unlocked_r+0x11c>
 80a5e42:	682b      	ldr	r3, [r5, #0]
 80a5e44:	6a22      	ldr	r2, [r4, #32]
 80a5e46:	606b      	str	r3, [r5, #4]
 80a5e48:	4b71      	ldr	r3, [pc, #452]	; (80a6010 <_tzset_unlocked_r+0x2d8>)
 80a5e4a:	601a      	str	r2, [r3, #0]
 80a5e4c:	4b72      	ldr	r3, [pc, #456]	; (80a6018 <_tzset_unlocked_r+0x2e0>)
 80a5e4e:	f8c3 8000 	str.w	r8, [r3]
 80a5e52:	e0d5      	b.n	80a6000 <_tzset_unlocked_r+0x2c8>
 80a5e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5e56:	f8c5 9004 	str.w	r9, [r5, #4]
 80a5e5a:	18fd      	adds	r5, r7, r3
 80a5e5c:	5cfb      	ldrb	r3, [r7, r3]
 80a5e5e:	2b2d      	cmp	r3, #45	; 0x2d
 80a5e60:	d103      	bne.n	80a5e6a <_tzset_unlocked_r+0x132>
 80a5e62:	3501      	adds	r5, #1
 80a5e64:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a5e68:	e003      	b.n	80a5e72 <_tzset_unlocked_r+0x13a>
 80a5e6a:	2b2b      	cmp	r3, #43	; 0x2b
 80a5e6c:	bf08      	it	eq
 80a5e6e:	3501      	addeq	r5, #1
 80a5e70:	2701      	movs	r7, #1
 80a5e72:	2300      	movs	r3, #0
 80a5e74:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a5e78:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a5e7c:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a5e80:	930a      	str	r3, [sp, #40]	; 0x28
 80a5e82:	9603      	str	r6, [sp, #12]
 80a5e84:	f8cd a008 	str.w	sl, [sp, #8]
 80a5e88:	9601      	str	r6, [sp, #4]
 80a5e8a:	f8cd b000 	str.w	fp, [sp]
 80a5e8e:	4633      	mov	r3, r6
 80a5e90:	aa07      	add	r2, sp, #28
 80a5e92:	4965      	ldr	r1, [pc, #404]	; (80a6028 <_tzset_unlocked_r+0x2f0>)
 80a5e94:	4628      	mov	r0, r5
 80a5e96:	f7fb fc9b 	bl	80a17d0 <siscanf>
 80a5e9a:	2800      	cmp	r0, #0
 80a5e9c:	dc04      	bgt.n	80a5ea8 <_tzset_unlocked_r+0x170>
 80a5e9e:	6a23      	ldr	r3, [r4, #32]
 80a5ea0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a5ea4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a5ea6:	e00e      	b.n	80a5ec6 <_tzset_unlocked_r+0x18e>
 80a5ea8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a5eac:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a5eb0:	213c      	movs	r1, #60	; 0x3c
 80a5eb2:	fb01 3302 	mla	r3, r1, r2, r3
 80a5eb6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a5eba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a5ebe:	fb01 3302 	mla	r3, r1, r2, r3
 80a5ec2:	435f      	muls	r7, r3
 80a5ec4:	63e7      	str	r7, [r4, #60]	; 0x3c
 80a5ec6:	4627      	mov	r7, r4
 80a5ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5eca:	f04f 0900 	mov.w	r9, #0
 80a5ece:	441d      	add	r5, r3
 80a5ed0:	782b      	ldrb	r3, [r5, #0]
 80a5ed2:	2b2c      	cmp	r3, #44	; 0x2c
 80a5ed4:	bf08      	it	eq
 80a5ed6:	3501      	addeq	r5, #1
 80a5ed8:	f895 8000 	ldrb.w	r8, [r5]
 80a5edc:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a5ee0:	d126      	bne.n	80a5f30 <_tzset_unlocked_r+0x1f8>
 80a5ee2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a5ee6:	9302      	str	r3, [sp, #8]
 80a5ee8:	ab09      	add	r3, sp, #36	; 0x24
 80a5eea:	9300      	str	r3, [sp, #0]
 80a5eec:	9603      	str	r6, [sp, #12]
 80a5eee:	9601      	str	r6, [sp, #4]
 80a5ef0:	4633      	mov	r3, r6
 80a5ef2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a5ef6:	494d      	ldr	r1, [pc, #308]	; (80a602c <_tzset_unlocked_r+0x2f4>)
 80a5ef8:	4628      	mov	r0, r5
 80a5efa:	f7fb fc69 	bl	80a17d0 <siscanf>
 80a5efe:	2803      	cmp	r0, #3
 80a5f00:	d17e      	bne.n	80a6000 <_tzset_unlocked_r+0x2c8>
 80a5f02:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a5f06:	1e4b      	subs	r3, r1, #1
 80a5f08:	2b0b      	cmp	r3, #11
 80a5f0a:	d879      	bhi.n	80a6000 <_tzset_unlocked_r+0x2c8>
 80a5f0c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a5f10:	1e53      	subs	r3, r2, #1
 80a5f12:	2b04      	cmp	r3, #4
 80a5f14:	d874      	bhi.n	80a6000 <_tzset_unlocked_r+0x2c8>
 80a5f16:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a5f1a:	2b06      	cmp	r3, #6
 80a5f1c:	d870      	bhi.n	80a6000 <_tzset_unlocked_r+0x2c8>
 80a5f1e:	f887 8008 	strb.w	r8, [r7, #8]
 80a5f22:	60f9      	str	r1, [r7, #12]
 80a5f24:	613a      	str	r2, [r7, #16]
 80a5f26:	617b      	str	r3, [r7, #20]
 80a5f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5f2a:	eb05 0803 	add.w	r8, r5, r3
 80a5f2e:	e02a      	b.n	80a5f86 <_tzset_unlocked_r+0x24e>
 80a5f30:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a5f34:	bf06      	itte	eq
 80a5f36:	4643      	moveq	r3, r8
 80a5f38:	3501      	addeq	r5, #1
 80a5f3a:	2344      	movne	r3, #68	; 0x44
 80a5f3c:	220a      	movs	r2, #10
 80a5f3e:	a90b      	add	r1, sp, #44	; 0x2c
 80a5f40:	4628      	mov	r0, r5
 80a5f42:	9305      	str	r3, [sp, #20]
 80a5f44:	f7ff fe3e 	bl	80a5bc4 <strtoul>
 80a5f48:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a5f4c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a5f50:	4545      	cmp	r5, r8
 80a5f52:	9b05      	ldr	r3, [sp, #20]
 80a5f54:	d114      	bne.n	80a5f80 <_tzset_unlocked_r+0x248>
 80a5f56:	234d      	movs	r3, #77	; 0x4d
 80a5f58:	f1b9 0f00 	cmp.w	r9, #0
 80a5f5c:	d107      	bne.n	80a5f6e <_tzset_unlocked_r+0x236>
 80a5f5e:	7223      	strb	r3, [r4, #8]
 80a5f60:	2303      	movs	r3, #3
 80a5f62:	60e3      	str	r3, [r4, #12]
 80a5f64:	2302      	movs	r3, #2
 80a5f66:	6123      	str	r3, [r4, #16]
 80a5f68:	f8c4 9014 	str.w	r9, [r4, #20]
 80a5f6c:	e00b      	b.n	80a5f86 <_tzset_unlocked_r+0x24e>
 80a5f6e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80a5f72:	230b      	movs	r3, #11
 80a5f74:	62a3      	str	r3, [r4, #40]	; 0x28
 80a5f76:	2301      	movs	r3, #1
 80a5f78:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a5f7a:	2300      	movs	r3, #0
 80a5f7c:	6323      	str	r3, [r4, #48]	; 0x30
 80a5f7e:	e002      	b.n	80a5f86 <_tzset_unlocked_r+0x24e>
 80a5f80:	b280      	uxth	r0, r0
 80a5f82:	723b      	strb	r3, [r7, #8]
 80a5f84:	6178      	str	r0, [r7, #20]
 80a5f86:	2302      	movs	r3, #2
 80a5f88:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a5f8c:	2300      	movs	r3, #0
 80a5f8e:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a5f92:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a5f96:	930a      	str	r3, [sp, #40]	; 0x28
 80a5f98:	f898 3000 	ldrb.w	r3, [r8]
 80a5f9c:	2b2f      	cmp	r3, #47	; 0x2f
 80a5f9e:	d10b      	bne.n	80a5fb8 <_tzset_unlocked_r+0x280>
 80a5fa0:	9603      	str	r6, [sp, #12]
 80a5fa2:	f8cd a008 	str.w	sl, [sp, #8]
 80a5fa6:	9601      	str	r6, [sp, #4]
 80a5fa8:	f8cd b000 	str.w	fp, [sp]
 80a5fac:	4633      	mov	r3, r6
 80a5fae:	aa07      	add	r2, sp, #28
 80a5fb0:	491f      	ldr	r1, [pc, #124]	; (80a6030 <_tzset_unlocked_r+0x2f8>)
 80a5fb2:	4640      	mov	r0, r8
 80a5fb4:	f7fb fc0c 	bl	80a17d0 <siscanf>
 80a5fb8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a5fbc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a5fc0:	213c      	movs	r1, #60	; 0x3c
 80a5fc2:	fb01 3302 	mla	r3, r1, r2, r3
 80a5fc6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a5fca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a5fce:	fb01 3302 	mla	r3, r1, r2, r3
 80a5fd2:	61bb      	str	r3, [r7, #24]
 80a5fd4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a5fd6:	f109 0901 	add.w	r9, r9, #1
 80a5fda:	f1b9 0f02 	cmp.w	r9, #2
 80a5fde:	4445      	add	r5, r8
 80a5fe0:	f107 071c 	add.w	r7, r7, #28
 80a5fe4:	f47f af74 	bne.w	80a5ed0 <_tzset_unlocked_r+0x198>
 80a5fe8:	6860      	ldr	r0, [r4, #4]
 80a5fea:	f7ff fdf5 	bl	80a5bd8 <__tzcalc_limits>
 80a5fee:	6a22      	ldr	r2, [r4, #32]
 80a5ff0:	4b07      	ldr	r3, [pc, #28]	; (80a6010 <_tzset_unlocked_r+0x2d8>)
 80a5ff2:	601a      	str	r2, [r3, #0]
 80a5ff4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a5ff6:	1a9b      	subs	r3, r3, r2
 80a5ff8:	4a07      	ldr	r2, [pc, #28]	; (80a6018 <_tzset_unlocked_r+0x2e0>)
 80a5ffa:	bf18      	it	ne
 80a5ffc:	2301      	movne	r3, #1
 80a5ffe:	6013      	str	r3, [r2, #0]
 80a6000:	b00d      	add	sp, #52	; 0x34
 80a6002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6006:	bf00      	nop
 80a6008:	080a6970 	.word	0x080a6970
 80a600c:	20000acc 	.word	0x20000acc
 80a6010:	20000ad4 	.word	0x20000ad4
 80a6014:	080a6973 	.word	0x080a6973
 80a6018:	20000ad0 	.word	0x20000ad0
 80a601c:	20000394 	.word	0x20000394
 80a6020:	20000abf 	.word	0x20000abf
 80a6024:	080a6977 	.word	0x080a6977
 80a6028:	080a699a 	.word	0x080a699a
 80a602c:	080a6986 	.word	0x080a6986
 80a6030:	080a6999 	.word	0x080a6999
 80a6034:	20000ab4 	.word	0x20000ab4

080a6038 <_findenv_r>:
 80a6038:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a603c:	4607      	mov	r7, r0
 80a603e:	468b      	mov	fp, r1
 80a6040:	4690      	mov	r8, r2
 80a6042:	f000 f8d7 	bl	80a61f4 <__env_lock>
 80a6046:	4b19      	ldr	r3, [pc, #100]	; (80a60ac <_findenv_r+0x74>)
 80a6048:	681d      	ldr	r5, [r3, #0]
 80a604a:	469a      	mov	sl, r3
 80a604c:	b13d      	cbz	r5, 80a605e <_findenv_r+0x26>
 80a604e:	465c      	mov	r4, fp
 80a6050:	4623      	mov	r3, r4
 80a6052:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a6056:	b142      	cbz	r2, 80a606a <_findenv_r+0x32>
 80a6058:	2a3d      	cmp	r2, #61	; 0x3d
 80a605a:	461c      	mov	r4, r3
 80a605c:	d1f8      	bne.n	80a6050 <_findenv_r+0x18>
 80a605e:	4638      	mov	r0, r7
 80a6060:	f000 f8c9 	bl	80a61f6 <__env_unlock>
 80a6064:	2000      	movs	r0, #0
 80a6066:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a606a:	ebcb 0404 	rsb	r4, fp, r4
 80a606e:	46a9      	mov	r9, r5
 80a6070:	f859 0b04 	ldr.w	r0, [r9], #4
 80a6074:	2800      	cmp	r0, #0
 80a6076:	d0f2      	beq.n	80a605e <_findenv_r+0x26>
 80a6078:	4622      	mov	r2, r4
 80a607a:	4659      	mov	r1, fp
 80a607c:	f7ff fd0f 	bl	80a5a9e <strncmp>
 80a6080:	b988      	cbnz	r0, 80a60a6 <_findenv_r+0x6e>
 80a6082:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80a6086:	191e      	adds	r6, r3, r4
 80a6088:	5d1b      	ldrb	r3, [r3, r4]
 80a608a:	2b3d      	cmp	r3, #61	; 0x3d
 80a608c:	d10b      	bne.n	80a60a6 <_findenv_r+0x6e>
 80a608e:	f8da 3000 	ldr.w	r3, [sl]
 80a6092:	4638      	mov	r0, r7
 80a6094:	1aed      	subs	r5, r5, r3
 80a6096:	10ad      	asrs	r5, r5, #2
 80a6098:	f8c8 5000 	str.w	r5, [r8]
 80a609c:	f000 f8ab 	bl	80a61f6 <__env_unlock>
 80a60a0:	1c70      	adds	r0, r6, #1
 80a60a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a60a6:	464d      	mov	r5, r9
 80a60a8:	e7e1      	b.n	80a606e <_findenv_r+0x36>
 80a60aa:	bf00      	nop
 80a60ac:	200003dc 	.word	0x200003dc

080a60b0 <_getenv_r>:
 80a60b0:	b507      	push	{r0, r1, r2, lr}
 80a60b2:	aa01      	add	r2, sp, #4
 80a60b4:	f7ff ffc0 	bl	80a6038 <_findenv_r>
 80a60b8:	b003      	add	sp, #12
 80a60ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a60c0 <__gettzinfo>:
 80a60c0:	4800      	ldr	r0, [pc, #0]	; (80a60c4 <__gettzinfo+0x4>)
 80a60c2:	4770      	bx	lr
 80a60c4:	2000039c 	.word	0x2000039c

080a60c8 <gmtime_r>:
 80a60c8:	6802      	ldr	r2, [r0, #0]
 80a60ca:	4b46      	ldr	r3, [pc, #280]	; (80a61e4 <gmtime_r+0x11c>)
 80a60cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a60ce:	fb92 f4f3 	sdiv	r4, r2, r3
 80a60d2:	fb03 2214 	mls	r2, r3, r4, r2
 80a60d6:	2a00      	cmp	r2, #0
 80a60d8:	bfbc      	itt	lt
 80a60da:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a60de:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a60e2:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a60e6:	fb92 f3f0 	sdiv	r3, r2, r0
 80a60ea:	fb00 2213 	mls	r2, r0, r3, r2
 80a60ee:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a60f2:	608b      	str	r3, [r1, #8]
 80a60f4:	fb92 f3f0 	sdiv	r3, r2, r0
 80a60f8:	fb00 2213 	mls	r2, r0, r3, r2
 80a60fc:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80a6100:	bfac      	ite	ge
 80a6102:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80a6106:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80a610a:	604b      	str	r3, [r1, #4]
 80a610c:	600a      	str	r2, [r1, #0]
 80a610e:	2307      	movs	r3, #7
 80a6110:	1ce2      	adds	r2, r4, #3
 80a6112:	fb92 f3f3 	sdiv	r3, r2, r3
 80a6116:	4d34      	ldr	r5, [pc, #208]	; (80a61e8 <gmtime_r+0x120>)
 80a6118:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a611c:	fb94 f5f5 	sdiv	r5, r4, r5
 80a6120:	1ad3      	subs	r3, r2, r3
 80a6122:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a6126:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80a612a:	618b      	str	r3, [r1, #24]
 80a612c:	4b2f      	ldr	r3, [pc, #188]	; (80a61ec <gmtime_r+0x124>)
 80a612e:	4830      	ldr	r0, [pc, #192]	; (80a61f0 <gmtime_r+0x128>)
 80a6130:	fb03 4405 	mla	r4, r3, r5, r4
 80a6134:	fbb4 f2f2 	udiv	r2, r4, r2
 80a6138:	fbb4 f3f7 	udiv	r3, r4, r7
 80a613c:	fbb4 f0f0 	udiv	r0, r4, r0
 80a6140:	4422      	add	r2, r4
 80a6142:	1ad2      	subs	r2, r2, r3
 80a6144:	f648 6694 	movw	r6, #36500	; 0x8e94
 80a6148:	1a13      	subs	r3, r2, r0
 80a614a:	f240 126d 	movw	r2, #365	; 0x16d
 80a614e:	fbb3 f6f6 	udiv	r6, r3, r6
 80a6152:	fbb3 f0f2 	udiv	r0, r3, r2
 80a6156:	fbb3 f3f7 	udiv	r3, r3, r7
 80a615a:	4434      	add	r4, r6
 80a615c:	1ae3      	subs	r3, r4, r3
 80a615e:	fb02 3310 	mls	r3, r2, r0, r3
 80a6162:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80a6166:	2499      	movs	r4, #153	; 0x99
 80a6168:	3202      	adds	r2, #2
 80a616a:	fbb2 f2f4 	udiv	r2, r2, r4
 80a616e:	4354      	muls	r4, r2
 80a6170:	1ca6      	adds	r6, r4, #2
 80a6172:	2405      	movs	r4, #5
 80a6174:	fbb6 f4f4 	udiv	r4, r6, r4
 80a6178:	2a0a      	cmp	r2, #10
 80a617a:	bf34      	ite	cc
 80a617c:	2602      	movcc	r6, #2
 80a617e:	f06f 0609 	mvncs.w	r6, #9
 80a6182:	4416      	add	r6, r2
 80a6184:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a6188:	fb02 0505 	mla	r5, r2, r5, r0
 80a618c:	1c5f      	adds	r7, r3, #1
 80a618e:	2e01      	cmp	r6, #1
 80a6190:	bf98      	it	ls
 80a6192:	3501      	addls	r5, #1
 80a6194:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a6198:	eba7 0704 	sub.w	r7, r7, r4
 80a619c:	d302      	bcc.n	80a61a4 <gmtime_r+0xdc>
 80a619e:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80a61a2:	e014      	b.n	80a61ce <gmtime_r+0x106>
 80a61a4:	0782      	lsls	r2, r0, #30
 80a61a6:	d105      	bne.n	80a61b4 <gmtime_r+0xec>
 80a61a8:	2464      	movs	r4, #100	; 0x64
 80a61aa:	fbb0 f2f4 	udiv	r2, r0, r4
 80a61ae:	fb04 0212 	mls	r2, r4, r2, r0
 80a61b2:	b94a      	cbnz	r2, 80a61c8 <gmtime_r+0x100>
 80a61b4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a61b8:	fbb0 f4f2 	udiv	r4, r0, r2
 80a61bc:	fb02 0014 	mls	r0, r2, r4, r0
 80a61c0:	fab0 f280 	clz	r2, r0
 80a61c4:	0952      	lsrs	r2, r2, #5
 80a61c6:	e000      	b.n	80a61ca <gmtime_r+0x102>
 80a61c8:	2201      	movs	r2, #1
 80a61ca:	333b      	adds	r3, #59	; 0x3b
 80a61cc:	441a      	add	r2, r3
 80a61ce:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a61d2:	2300      	movs	r3, #0
 80a61d4:	61ca      	str	r2, [r1, #28]
 80a61d6:	614d      	str	r5, [r1, #20]
 80a61d8:	610e      	str	r6, [r1, #16]
 80a61da:	60cf      	str	r7, [r1, #12]
 80a61dc:	620b      	str	r3, [r1, #32]
 80a61de:	4608      	mov	r0, r1
 80a61e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a61e2:	bf00      	nop
 80a61e4:	00015180 	.word	0x00015180
 80a61e8:	00023ab1 	.word	0x00023ab1
 80a61ec:	fffdc54f 	.word	0xfffdc54f
 80a61f0:	00023ab0 	.word	0x00023ab0

080a61f4 <__env_lock>:
 80a61f4:	4770      	bx	lr

080a61f6 <__env_unlock>:
 80a61f6:	4770      	bx	lr

080a61f8 <dynalib_user>:
 80a61f8:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a6208:	0000 0000                                   ....

080a620c <_ZTV5Timer>:
	...
 80a6214:	028d 080a 02d5 080a 00e1 080a 6c63 736f     ............clos
 80a6224:	0065 704f 6e65 6e69 2067 6167 6172 6567     e.Opening garage
 80a6234:	6420 6f6f 2072 2e2e 002e 6c43 736f 6e69      door ....Closin
 80a6244:	2067 6167 6172 6567 6420 6f6f 2072 2e2e     g garage door ..
 80a6254:	002e 666f 0066 7473 7461 7375 4100 656c     ..off.status.Ale
 80a6264:	7472 4700 7261 6761 4465 6f6f 0072 6147     rt.GarageDoor.Ga
 80a6274:	6172 6567 6420 6f6f 2072 706f 6e65 4700     rage door open.G
 80a6284:	7261 6761 2065 6f64 726f 6920 206e 7274     arage door in tr
 80a6294:	6e61 6973 6974 6e6f 4700 7261 6761 2065     ansition.Garage 
 80a62a4:	6f64 726f 6320 6f6c 6573 0064 6553 736e     door closed.Sens
 80a62b4:	726f 6620 6961 756c 6572 4700 7261 6761     or failure.Garag
 80a62c4:	2065 6f64 726f 6620 6961 756c 6572 0021     e door failure!.
 80a62d4:	6554 706d 7265 7461 7275 0065 0a0a 5200     Temperature....R
 80a62e4:	7465 6972 7665 6e69 2067 6e69 6f66 6d72     etrieving inform
 80a62f4:	7461 6f69 206e 7266 6d6f 7320 6e65 6f73     ation from senso
 80a6304:	2e72 0020 6552 6461 7320 6e65 6f73 3a72     r. .Read sensor:
 80a6314:	0020 4b4f 4500 7272 726f 0d0a 4309 6568      .OK.Error...Che
 80a6324:	6b63 7573 206d 7265 6f72 0072 7245 6f72     cksum error.Erro
 80a6334:	0a72 090d 5349 2052 6974 656d 6f20 7475     r...ISR time out
 80a6344:	6520 7272 726f 4500 7272 726f 0d0a 5209      error.Error...R
 80a6354:	7365 6f70 736e 2065 6974 656d 6f20 7475     esponse time out
 80a6364:	6520 7272 726f 4500 7272 726f 0d0a 4409      error.Error...D
 80a6374:	7461 2061 6974 656d 6f20 7475 6520 7272     ata time out err
 80a6384:	726f 4500 7272 726f 0d0a 4109 7163 6975     or.Error...Acqui
 80a6394:	6972 676e 4500 7272 726f 0d0a 4409 6c65     ring.Error...Del
 80a63a4:	6174 7420 6d69 2065 6f74 7320 616d 6c6c     ta time to small
 80a63b4:	4500 7272 726f 0d0a 4e09 746f 7320 6174     .Error...Not sta
 80a63c4:	7472 6465 5500 6b6e 6f6e 6e77 6520 7272     rted.Unknown err
 80a63d4:	726f 4800 6d75 6469 7469 2079 2528 3a29     or.Humidity (%):
 80a63e4:	0020 6554 706d 7265 7461 7275 2065 c228      .Temperature (.
 80a63f4:	43b0 3a29 0020 6544 2077 6f50 6e69 2074     .C): .Dew Point 
 80a6404:	c228 43b0 3a29 0020 6544 2077 6f50 6e69     (..C): .Dew Poin
 80a6414:	2074 6c53 776f 2820 b0c2 2943 203a 5400     t Slow (..C): .T
 80a6424:	6d69 2065 7075 6164 6574 2064 7461 2520     ime updated at %
 80a6434:	2e73 2e2e 6900 736e 6469 0065 756f 7374     s....inside.outs
 80a6444:	6469 0065 7953 7473 6d65 7620 7265 6973     ide.System versi
 80a6454:	6e6f 203a 7325 4600 7269 776d 7261 2065     on: %s.Firmware 
 80a6464:	6576 7372 6f69 3a6e 2520 0073 2d2d 2d2d     version: %s.----
 80a6474:	2d2d 2d2d 2d2d 2d2d 2d2d 002d 5746 562d     -----------.FW-V
 80a6484:	7265 6973 6e6f 5400 6d65 5370 6174 7574     ersion.TempStatu
 80a6494:	0073 7548 696d 6964 7974 6700 7261 6761     s.Humidity.garag
 80a64a4:	4465 6f6f 5372 6174 6574 7600 6865 6369     eDoorState.vehic
 80a64b4:	656c 7453 7461 0065 6167 6172 6567 7254     leState.garageTr
 80a64c4:	6769 6567 0072 7561 6f74 616d 6974 4d63     igger.automaticM
 80a64d4:	646f 0065 6e49 7469 6169 696c 617a 6974     ode.Initializati
 80a64e4:	6e6f 7600 2e30 2e33 0030 0000               on.v0.3.0...

080a64f0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a64f8:	184f 080a 1855 080a 186d 080a 1863 080a     O...U...m...c...
 80a6508:	1851 080a                                   Q...

080a650c <_ZTV7TwoWire>:
	...
 80a6514:	1e19 080a 1e63 080a 1e3b 080a 1e1b 080a     ....c...;.......
 80a6524:	1e43 080a 1e4b 080a 1e53 080a 1e5b 080a     C...K...S...[...

080a6534 <_ZTV9IPAddress>:
	...
 80a653c:	1fa5 080a 1f95 080a 1f97 080a 6e6c 6600     ............ln.f
 80a654c:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
 80a655c:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
 80a656c:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
 80a657c:	2500 0069 6564 6174 6c69 2073 203d 6200     .%i.details = .b
 80a658c:	7561 0064 6553 6972 6c61 5500 4253 6553     aud.Serial.USBSe
 80a659c:	6972 6c61 0031 7974 6570 7000 7261 6d61     rial1.type.param
 80a65ac:	6300 646d 6900 0064 6e68 0064 7473 6d72     .cmd.id.hnd.strm
 80a65bc:	6600 6c69 0074 766c 006c 6461 4864 6e61     .filt.lvl.addHan
 80a65cc:	6c64 7265 7200 6d65 766f 4865 6e61 6c64     dler.removeHandl
 80a65dc:	7265 6500 756e 486d 6e61 6c64 7265 0073     er.enumHandlers.
 80a65ec:	534a 4e4f 7453 6572 6d61 6f4c 4867 6e61     JSONStreamLogHan
 80a65fc:	6c64 7265 6100 7070 6e00 6e6f 0065 7274     dler.app.none.tr
 80a660c:	6361 0065 6e69 6f66 7700 7261 006e 6170     ace.info.warn.pa
 80a661c:	696e 0063                                   nic.

080a6620 <_ZTVN5spark12NetworkClassE>:
	...
 80a6628:	206d 080a 2077 080a 2081 080a 208b 080a     m ..w ... ... ..
 80a6638:	2095 080a 20a1 080a 20ad 080a 20b9 080a     . ... ... ... ..
 80a6648:	20c1 080a 20cb 080a 20d5 080a 616e 006e     . ... ... ..nan.
 80a6658:	766f 0066 6e69 0066                         ovf.inf.

080a6660 <_ZTV8SPIClass>:
	...
 80a6668:	2471 080a 2473 080a 2b25 3330 3a64 3025     q$..s$..%+03d:%0
 80a6678:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 80a6688:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

080a6698 <_ZTV11USARTSerial>:
	...
 80a66a0:	26b9 080a 2709 080a 2717 080a 2139 080a     .&...'...'..9!..
 80a66b0:	26cd 080a 26ef 080a 26db 080a 2703 080a     .&...&...&...'..
 80a66c0:	26bb 080a 26bf 080a                         .&...&..

080a66c8 <_ZTV9USBSerial>:
	...
 80a66d0:	27c1 080a 2811 080a 281f 080a 2139 080a     .'...(...(..9!..
 80a66e0:	27fd 080a 27c3 080a 27d9 080a 280b 080a     .'...'...'...(..
 80a66f0:	27ef 080a 27bd 080a                         .'...'..

080a66f8 <_ZTVN5spark9WiFiClassE>:
	...
 80a6700:	2a03 080a 29f9 080a 29ef 080a 2961 080a     .*...)...)..a)..
 80a6710:	29e3 080a 29d7 080a 29cb 080a 29c3 080a     .)...)...)...)..
 80a6720:	29b9 080a 29af 080a 296b 080a 6f6c 0067     .)...)..k)..log.
 80a6730:	0000 0000 6f6c 3167 0030 0000 6f70 0077     ....log10...pow.

080a6740 <TWO52>:
 80a6740:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

080a6750 <day_name.4723>:
 80a6750:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80a6760:	6972 6153 4a74                                   riSat

080a6765 <mon_name.4724>:
 80a6765:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80a6775:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80a6785:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 80a6795:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 80a67a5:	6425 000a                                   %d..

080a67a9 <_ctype_>:
 80a67a9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a67b9:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a67c9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a67d9:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a67e9:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a67f9:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a6809:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a6819:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a6829:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a68ac <__sf_fake_stdin>:
	...

080a68cc <__sf_fake_stdout>:
	...

080a68ec <__sf_fake_stderr>:
	...
 80a690c:	0043 0000                                   C...

080a6910 <__month_lengths>:
 80a6910:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a6920:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a6930:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a6940:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a6950:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a6960:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a6970:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 80a6980:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 80a6990:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 80a69a0:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

080a69ac <link_const_variable_data_end>:
 80a69ac:	080a0ab5 	.word	0x080a0ab5
 80a69b0:	080a12d1 	.word	0x080a12d1
 80a69b4:	080a205d 	.word	0x080a205d
 80a69b8:	080a2125 	.word	0x080a2125
 80a69bc:	080a2455 	.word	0x080a2455
 80a69c0:	080a25dd 	.word	0x080a25dd
 80a69c4:	080a26a5 	.word	0x080a26a5
 80a69c8:	080a2a0d 	.word	0x080a2a0d
 80a69cc:	080a2c61 	.word	0x080a2c61
 80a69d0:	080a2c91 	.word	0x080a2c91
 80a69d4:	080a2ce9 	.word	0x080a2ce9
 80a69d8:	080a2dad 	.word	0x080a2dad
 80a69dc:	080a2e31 	.word	0x080a2e31
 80a69e0:	080a2eb5 	.word	0x080a2eb5

080a69e4 <link_constructors_end>:
	...
